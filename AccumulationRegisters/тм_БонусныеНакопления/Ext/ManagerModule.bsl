
Процедура ЗаписатьБонусы(ДокументОбъект) Экспорт

	НастройкиКонтрагентов = РегистрыСведений.тм_НастройкиКонтрагентов.Получить(Новый Структура("Контрагент", ДокументОбъект.Контрагент));
	
	Если Не ЗначениеЗаполнено(НастройкиКонтрагентов.БонусныйСчет) Тогда
		Сообщить("Не указан бонусный счет контрагента для начисления!");
		Возврат;
	КонецЕсли; 
	
	СписатьБонусы = Ложь;
	ДатаЗаписи = ТекущаяДатаСеанса();
	//Проверка использовались бонусы	
	Если ДокументОбъект.тм_ИспользованныеБонусы = 0 Тогда
		СуммаДляНачисленияБонусов = ДокументОбъект.СуммаДокумента;
	ИначеЕсли ДокументОбъект.тм_ИспользованныеБонусы = ДокументОбъект.СуммаДокумента Тогда
		СуммаДляНачисленияБонусов = 0;
	Иначе
		СуммаДляНачисленияБонусов = ДокументОбъект.СуммаДокумента - ДокументОбъект.тм_ИспользованныеБонусы;
		СписатьБонусы = Истина;
	КонецЕсли; 
	
	Если СуммаДляНачисленияБонусов = 0 И Не (ДокументОбъект.СуммаДокумента = 0) Тогда
		СписатьИспользованныеБонусы(ДокументОбъект, НастройкиКонтрагентов);
		Сообщить("Сумма начисления бонусов = 0. Бонусы равны сумме документа");
		Возврат;
	КонецЕсли; 
	
	Если СписатьБонусы Тогда
		СписатьИспользованныеБонусы(ДокументОбъект, НастройкиКонтрагентов);
	КонецЕсли; 
	
	// Если документ "Расходная накладная" создан на основании "Заказа покупателя", бонусы не начислять
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Заказ) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	// Исключить из суммы начислений услуги из ТЧ "Работы"
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
				
		Для каждого СтрокаРаботы Из ДокументОбъект.Работы Цикл
			Если СтрокаРаботы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда			
				СуммаДляНачисленияБонусов = СуммаДляНачисленияБонусов - СтрокаРаботы.Сумма; 				
			КонецЕсли; 
		КонецЦикла;  
		
	КонецЕсли;
	
	Если СуммаДляНачисленияБонусов = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДокументОбъект.Движения.тм_БонусныеНакопления.Записывать = Истина;
	
	Движение = ДокументОбъект.Движения.тм_БонусныеНакопления.Добавить();
	Движение.Период = ДатаЗаписи;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Контрагент = ДокументОбъект.Контрагент;
	Движение.БонусныйСчет = НастройкиКонтрагентов.БонусныйСчет;
	Движение.ПроцентНакопления = НастройкиКонтрагентов.НачисляемыйПроцентБонусов;
	Движение.СуммаНакоплений = СуммаДляНачисленияБонусов * НастройкиКонтрагентов.НачисляемыйПроцентБонусов/100;

КонецПроцедуры

Процедура УдалитьЗаписанныеБонусы(ДокументОбъект) Экспорт
	
	НЗ = СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	НЗ.Прочитать();
	
	НЗ.Записать();
	
КонецПроцедуры

Процедура СписатьИспользованныеБонусы(ДокументОбъект, НастройкиКонтрагентов, ВозвратПокупателя = Неопределено) Экспорт
	
	//Если ЗначениеЗаполнено(ВозвратПокупателя) Тогда
	//	ДокументСписания = НайтиДокументСписания(ВозвратПокупателя);
	//	Если Не ДокументСписания.Пустая() Тогда
	//		ДокументСписанияБонусов = ДокументСписания.ПолучитьОбъект();	
	//		ДокументСписанияБонусов.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	КонецЕсли; 		
	//Иначе
	//	ДокументСписания = Документы.тм_СписаниеБонусов.ПустаяСсылка();	
	//КонецЕсли; 
	//
	//ДокументСписания = НайтиДокументСписания(ВозвратПокупателя);

	Основание = ?(ВозвратПокупателя = Неопределено, ДокументОбъект.Ссылка, ВозвратПокупателя);
	ДокументСписания = НайтиДокументСписания(Основание);
	Если Не ДокументСписания.Пустая() Тогда
		ДокументСписанияБонусов = ДокументСписания.ПолучитьОбъект();	
		ДокументСписанияБонусов.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли; 		
	
	СуммаБонусов = ?(ЗначениеЗаполнено(ВозвратПокупателя), 
		ПолучитьСуммуНачисленияБонусовРасходнойНакладной(ДокументОбъект.Ссылка, ВозвратПокупателя), 
		ДокументОбъект.тм_ИспользованныеБонусы);
		
	Если ДокументСписания.Пустая() Тогда
		ДокументСписанияБонусов = Документы.тм_СписаниеБонусов.СоздатьДокумент();	
	Иначе
		ДокументСписанияБонусов = ДокументСписания.ПолучитьОбъект();
	КонецЕсли; 
		
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("ДокументОснование", ?(ЗначениеЗаполнено(ВозвратПокупателя), ВозвратПокупателя, ДокументОбъект.Ссылка));
	ДанныеЗаполнения.Вставить("Контрагент", ДокументОбъект.Контрагент);
	ДанныеЗаполнения.Вставить("СуммаБонусов", СуммаБонусов);
	ДанныеЗаполнения.Вставить("ПроцентНакопления", НастройкиКонтрагентов.НачисляемыйПроцентБонусов);
	ДанныеЗаполнения.Вставить("БонусныйСчет", НастройкиКонтрагентов.БонусныйСчет);
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса() - 1);
	ДанныеЗаполнения.Вставить("Комментарий", ?(ЗначениеЗаполнено(ВозвратПокупателя), "Списано возвратом покупателя", ""));			
	
	Если ДанныеЗаполнения.СуммаБонусов = 0 Тогда
		ДанныеЗаполнения.Вставить("Комментарий", "Не удалось найти в регистре ""Бонусные накопления"" запись по документу: " + Строка(ДокументОбъект.Ссылка));
	КонецЕсли; 
	
	Попытка
		ДокументСписанияБонусов.Заполнить(ДанныеЗаполнения);
		ДокументСписанияБонусов.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки; 
	
КонецПроцедуры
 
Функция ПолучитьСуммуНачисленияБонусовРасходнойНакладной(РасходнаяНакладная, ВозвратПокупателя)
	
	Бонусы = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_БонусныеНакопленияПолныйОбороты.Номенклатура КАК Номенклатура,
		|	тм_БонусныеНакопленияПолныйОбороты.СуммаНакопленийОборот КАК СуммаНакопленийОборот
		|ИЗ
		|	РегистрНакопления.тм_БонусныеНакопленияПолный.Обороты(, &Дата, Регистратор, Номенклатура В (&Номенклатура)) КАК тм_БонусныеНакопленияПолныйОбороты
		|ГДЕ
		|	тм_БонусныеНакопленияПолныйОбороты.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Номенклатура", ВозвратПокупателя.Запасы.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Регистратор", РасходнаяНакладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	//Было
	//Пока Выборка.Следующий() Цикл
	//	Бонусы = Бонусы + Выборка.СуммаНакопленийОборот; 
	//КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		ИскомаяСтрока = ВозвратПокупателя.Запасы.Найти(Выборка.Номенклатура, "Номенклатура");
		КоличествоНоменаклурыОснования = ВозвратПокупателя.ДокументОснование.Запасы.Найти(Выборка.Номенклатура, "Номенклатура").Количество;
		
		Бонусы = Окр(Бонусы + (Выборка.СуммаНакопленийОборот*ИскомаяСтрока.Количество / КоличествоНоменаклурыОснования)); 
	КонецЦикла;
	
	ОстатокБонусов = тм_ОбщегоНазначенияВызовСервера.ПолучитьОстатокБонусов(РасходнаяНакладная.Контрагент);
	Если ОстатокБонусов <= 0 Тогда
		Бонусы = 0;
	ИначеЕсли ОстатокБонусов < Бонусы Тогда
		Бонусы = ОстатокБонусов;
	КонецЕсли; 
	
	//
	//НЗ = РегистрыНакопления.тм_БонусныеНакопленияПолный.СоздатьНаборЗаписей();
	//НЗ.Отбор.Регистратор.Установить(РасходнаяНакладная);
	//НЗ.Прочитать();
	//
	//Если НЗ.Количество() = 1 Тогда
	//	Бонусы = НЗ[0].СуммаНакоплений;		
	//КонецЕсли; 
		
	Возврат Бонусы;
	
КонецФункции // ПолучитьСуммуБонусовСписанияРасходнойНакладной()

Функция НайтиДокументСписания(Основание)
	
	ДокументСписания = Документы.тм_СписаниеБонусов.ПустаяСсылка();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_СписаниеБонусов.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.тм_СписаниеБонусов КАК тм_СписаниеБонусов
		|ГДЕ
		|	тм_СписаниеБонусов.ДокументОснование = &ДокументОснование
		|	И тм_СписаниеБонусов.Проведен";
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументСписания = Выборка.Ссылка;	
	КонецЕсли; 
	
	Возврат ДокументСписания;

КонецФункции // НайтиДокументСписания()

Процедура ВернутьБонусыКлиенту(ДокументПриходнаяНакладная, РасходнаяНакладная, НастройкиКонтрагентов) Экспорт
	
	//ДокументСписания = НайтиДокументСписания(РасходнаяНакладная);
	СуммаБонусов = ПолучитьСуммуНачисленияБонусовРасходнойНакладной(РасходнаяНакладная, ДокументПриходнаяНакладная);
	
	ДокументПриходнаяНакладная.Движения.тм_БонусныеНакопления.Записывать = Истина;
	Движение = ДокументПриходнаяНакладная.Движения.тм_БонусныеНакопления.Добавить();
	Движение.Контрагент = ДокументПриходнаяНакладная.Контрагент;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.БонусныйСчет = НастройкиКонтрагентов.БонусныйСчет;
	Движение.ПроцентНакопления = НастройкиКонтрагентов.НачисляемыйПроцентБонусов;
	Движение.Период = ТекущаяДатаСеанса();
	Движение.СуммаНакоплений = СуммаБонусов;

КонецПроцедуры
 