
Процедура тм_ПриПроведенииДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	мЭтотОбъект = Источник;
	Если мЭтотОбъект.ОбменДанными.Загрузка Или Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ТипДокумента = ТипЗнч(мЭтотОбъект);
	
	Если ТипДокумента = Тип("ДокументОбъект.ОприходованиеЗапасов") Тогда
		ПриПроведенииДокументаОприходованиеЗапасов(мЭтотОбъект);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		ПриПроведенииДокументаПриходнаяНакладная(мЭтотОбъект);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		ПриПроведенииДокументаРасходнаяНакладная(мЭтотОбъект);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.РасходИзКассы") Тогда
		ПриПроведенииДокументаРасходИзКассы(мЭтотОбъект);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		ПриПроведенииДокументаЗаказПокупателя(мЭтотОбъект, Отказ);		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.СписаниеЗапасов") Тогда
		ПриПроведенииДокументаСписаниеЗапасов(мЭтотОбъект, Отказ);								
	КонецЕсли;
	
	// Динамические подписки  
	Если Не Отказ И Не мЭтотОбъект.ОбменДанными.Загрузка Тогда
		ПолноеИмяОбъекта = мЭтотОбъект.Метаданные().ПолноеИмя();
		тм_РаботаСДинамическимиПодписками.ОбработкаПодписки("Документ", "ОбработкаПроведения", ПолноеИмяОбъекта);
	КонецЕсли; 
		
КонецПроцедуры

Процедура тм_ПриУдаленииПроведенияДокументовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	мЭтотОбъект = Источник;
	Если мЭтотОбъект.ОбменДанными.Загрузка Или Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ТипДокумента = ТипЗнч(мЭтотОбъект);
	
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказПокупателя") Тогда		
		ПриУдаленииПроведенииДокументаЗаказПокупателя(мЭтотОбъект, Отказ);							
	КонецЕсли; 
	
КонецПроцедуры

#Область ОприходованиеЗапасов

Процедура ПриПроведенииДокументаОприходованиеЗапасов(ДокументОбъект)

	УстановитьЦеныЗакупкиПродажи(ДокументОбъект);		

КонецПроцедуры
 
#КонецОбласти

#Область РасходнаяНакладная

Процедура ПриПроведенииДокументаРасходнаяНакладная(ДокументОбъект)

	СформироватьДвиженияВРегистры(ДокументОбъект);

КонецПроцедуры

#КонецОбласти

#Область ПриходнаяНакладная

Процедура ПриПроведенииДокументаПриходнаяНакладная(ДокументОбъект)

	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда		
		СписатьБонусы(ДокументОбъект);
	КонецЕсли;
	
	// Установка закупочных цен
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		УстановитьЦеныЗакупкиПродажи(ДокументОбъект);	
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область РасходИзКассы

Процедура ПриПроведенииДокументаРасходИзКассы(ДокументОбъект)

	Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Если ДокументОбъект.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда		
			Если Не ДокументОбъект.тм_СуммаНачисленияБонусов = 0 Тогда
				НачислитьБонусы(ДокументОбъект, ДокументОбъект.тм_СуммаНачисленияБонусов);                              
			КонецЕсли; 			
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти

#Область ЗаказПокупателя

Процедура ПриПроведенииДокументаЗаказПокупателя(ДокументОбъект, Отказ)

	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда

		Если ДокументОбъект.ДополнительныеСвойства.ДокументВСостоянииЗавершен Тогда	
			Отказ = Истина;
			Сообщить("Документ находится в статусе завершен. Необходимо создать новый документ!");
			Возврат;
		КонецЕсли;
		
		ПодготовитьДанныеДляЗаписиДвижения(ДокументОбъект);
		СформироватьДвиженияВРегистры(ДокументОбъект);
		
		Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен И ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно Тогда
			//СформироватьДокументНачисленияЗарплатыПоЗаказНаряду(ДокументОбъект);	
			//Записать актуальный пробег авто
			УстановитьАктуальныйПробег(ДокументОбъект);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУдаленииПроведенииДокументаЗаказПокупателя(ДокументОбъект, Отказ)

	ОчиститьИсториюЗаказНаряда(ДокументОбъект);
	ОтменитьПроведениеДокументаНачислениеЗарплатыПоЗаказНаряду(ДокументОбъект);
	
КонецПроцедуры
 
#КонецОбласти

#Область СписаниеЗапасов

Процедура ПриПроведенииДокументаСписаниеЗапасов(ДокументОбъект, Отказ)

	ЗафиксироватьПроданныеТовары(ДокументОбъект);
	
КонецПроцедуры
 
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьИсториюЗаказНаряда(ДокументОбъект)

	НЗ = РегистрыНакопления.тм_ЗаказНаряды.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	НЗ.Записать();	
	
КонецПроцедуры
 
Процедура УстановитьЦеныЗакупкиПродажи(ДокументОбъект)
	
	ТаблицаЗапасов = ДокументОбъект.Запасы.Выгрузить();
	тм_ОбщегоНазначенияВызовСервера.СформироватьЦеныЗакупкиПродажи(ТаблицаЗапасов, ДокументОбъект.Дата);
	
КонецПроцедуры

Процедура СписатьБонусы(ДокументОбъект)

	НастройкиКонтрагентов = РегистрыСведений.тм_НастройкиКонтрагентов.Получить(Новый Структура("Контрагент", ДокументОбъект.Контрагент));
	
	Если ЗначениеЗаполнено(НастройкиКонтрагентов.БонусныйСчет) Тогда
		РасходнаяНакладная = ДокументОбъект.тм_ДокументОснованиеНачисленияБонусов.ПолучитьОбъект();
		РегистрыНакопления.тм_БонусныеНакопления.СписатьИспользованныеБонусы(РасходнаяНакладная, НастройкиКонтрагентов, ДокументОбъект.Ссылка);	
		//РегистрыНакопления.тм_БонусныеНакопления.ВернутьБонусыКлиенту(ЭтотОбъект, тм_РасходнаяНакладная, НастройкиКонтрагентов);
	Иначе
		Сообщить("Не указан бонусный счет клиента!");
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура НачислитьБонусы(ДокументОбъект, СуммаДляНачисленияБонусов)

	НастройкиКонтрагентов = РегистрыСведений.тм_НастройкиКонтрагентов.Получить(Новый Структура("Контрагент", ДокументОбъект.Контрагент));
	
	Если Не ЗначениеЗаполнено(НастройкиКонтрагентов.БонусныйСчет) Тогда
		Сообщить("Не указан бонусный счет контрагента для начисления!");
		Возврат;
	КонецЕсли; 
	
	ДокументОбъект.Движения.тм_БонусныеНакопления.Записывать = Истина;
	
	Движение = ДокументОбъект.Движения.тм_БонусныеНакопления.Добавить();
	Движение.Период = ТекущаяДатаСеанса();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Контрагент = ДокументОбъект.Контрагент;
	Движение.БонусныйСчет = НастройкиКонтрагентов.БонусныйСчет;
	Движение.ПроцентНакопления = НастройкиКонтрагентов.НачисляемыйПроцентБонусов;
	Движение.СуммаНакоплений = СуммаДляНачисленияБонусов;

КонецПроцедуры

Процедура СформироватьДвиженияВРегистры(ДокументОбъект)
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		Если ДокументОбъект.Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			РегистрыНакопления.тм_БонусныеНакопленияПолный.ЗаписатьБонусы(ДокументОбъект);
			РегистрыНакопления.тм_БонусныеНакопления.ЗаписатьБонусы(ДокументОбъект);
		КонецЕсли; 		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		РегистрыНакопления.тм_ЗаказНаряды.ЗаписатьДвижениеДокумента(ДокументОбъект);
		
		Если ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен И ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно Тогда
			
			РегистрыНакопления.тм_ИсторияЗаказНарядовКлиента.ЗаписатьДвижениеДокумента(ДокументОбъект);
			
			Если ДокументОбъект.Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
				РегистрыНакопления.тм_БонусныеНакопленияПолный.ЗаписатьБонусы(ДокументОбъект);
				РегистрыНакопления.тм_БонусныеНакопления.ЗаписатьБонусы(ДокументОбъект);
				УстановитьЦеныРабот(ДокументОбъект);
				УстановитьСпецификациюАвтомобиля(ДокументОбъект);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Проданные товары
	ЗафиксироватьПроданныеТовары(ДокументОбъект);
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляЗаписиДвижения(ДокументОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказНаряд,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.) КАК Сотрудник,
	|	ЗаказПокупателяЗапасы.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	| 	""Запасы"" Как ТабличнаяЧасть
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика,
	|	ЗаказПокупателяРаботы.Количество,
	|	ЗаказПокупателяРаботы.Цена,
	|	ЗаказПокупателяРаботы.Сумма,
	|	ЗаказПокупателяРаботы.Ссылка,
	|	ЗаказПокупателяРаботы.тм_Сотрудник КАК Сотрудник,	
	|	ЗаказПокупателяРаботы.Ссылка.СостояниеЗаказа,
	| 	""Работы"" Как ТабличнаяЧасть
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	ДокументОбъект.ДополнительныеСвойства.Вставить("ДанныеДляЗаписиДвиженияРегистраЗаказНаряды", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура УстановитьЦеныРабот(ДокументОбъект)
	
	Попытка
		ДокументУстановкиЦен = Документы.тм_УстановкаЦенРабот.СоздатьДокумент();
		ДокументУстановкиЦен.Заполнить(ДокументОбъект.Ссылка);		
		ДокументУстановкиЦен.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки; 

КонецПроцедуры

Процедура СформироватьДокументНачисленияЗарплатыПоЗаказНаряду(ДокументОбъект)
	
	Если Не ДокументОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		Возврат;
	КонецЕсли; 

	Если Не ДокументОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно Тогда
		ОтменитьПроведениеДокументаНачислениеЗарплатыПоЗаказНаряду(ДокументОбъект);
		Возврат;	
	КонецЕсли; 
	
	//Перепроведение докуммента
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("Перепроведение") Тогда
		ОтменитьПроведениеДокументаНачислениеЗарплатыПоЗаказНаряду(ДокументОбъект);
	КонецЕсли; 	 
	
	МассивДанных = Новый Массив;
	
	ЗавершенныеРаботы = ДокументОбъект.Работы.Выгрузить();
	ЗавершенныеРаботы.Колонки.Добавить("ПроцентПолучаемыйСотрудником", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3)));
	
	ДозаполнитьТаблицу(ЗавершенныеРаботы);
	
	Для каждого СтрРабота Из ЗавершенныеРаботы Цикл
		Если Не ЗначениеЗаполнено(СтрРабота.тм_Сотрудник) Тогда
			Продолжить;
		КонецЕсли; 
		
		Комментарий = "";
		
		Если СтрРабота.ПроцентПолучаемыйСотрудником = 0 Тогда
			Сумма = 0;
			Комментарий = "Сумма не рассчитана. Не указан процент за выполненные работы!";
		Иначе
			СуммаПред = (СтрРабота.Сумма * СтрРабота.ПроцентПолучаемыйСотрудником)/100;
			Сумма = Окр(СуммаПред);
		КонецЕсли; 
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Организация", ДокументОбъект.Организация);
		ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОбъект.Ссылка);
		ДанныеЗаполнения.Вставить("Сотрудник", СтрРабота.тм_Сотрудник);
		ДанныеЗаполнения.Вставить("Сумма", Сумма);
		ДанныеЗаполнения.Вставить("Комментарий", Комментарий);
		
		МассивДанных.Добавить(ДанныеЗаполнения);
		
	КонецЦикла; 
	
	//Формирование документа
	Для каждого СтруктураЗаполнения Из МассивДанных Цикл
		ДокументНачисления = Документы.тм_НачислениеЗарплатыПоЗаказНаряду.СоздатьДокумент();
		ДокументНачисления.Заполнить(СтруктураЗаполнения);
		
		Попытка
			ДокументНачисления.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);	
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЦикла;  

КонецПроцедуры

Процедура ОтменитьПроведениеДокументаНачислениеЗарплатыПоЗаказНаряду(ДокументОбъект)
	
	ДокументыНаУдаление = ПолучитьДокументНачислениеЗарплатыПоЗаказНаряду(ДокументОбъект);
		
	Попытка
		Для каждого ДокументНачислениеСсылка Из ДокументыНаУдаление Цикл
			ДокументНачисление = ДокументНачислениеСсылка.ПолучитьОбъект();
			ДокументНачисление.Комментарий = ДокументНачисление.Комментарий + 
				Символы.ПС +
				"#Документ " +
				ДокументОбъект.Ссылка.Метаданные().Имя + 
				" : изменен статус на - " + 
				Строка(ДокументОбъект.ВариантЗавершения);
			ДокументНачисление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументНачисление.УстановитьПометкуУдаления(Истина);  
		КонецЦикла;	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 

КонецПроцедуры

Функция ПолучитьДокументНачислениеЗарплатыПоЗаказНаряду(ДокументОбъект)

	ДокументыНаУдаление = Новый Массив;
	//ДокументНачисление = Документы.тм_НачислениеЗарплатыПоЗаказНаряду.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_НачислениеЗарплатыПоЗаказНаряду.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.тм_НачислениеЗарплатыПоЗаказНаряду КАК тм_НачислениеЗарплатыПоЗаказНаряду
		|ГДЕ
		|	тм_НачислениеЗарплатыПоЗаказНаряду.ДокументОснование = &ДокументОснование
		|	И НЕ тм_НачислениеЗарплатыПоЗаказНаряду.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	     ДокументыНаУдаление.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Возврат ДокументыНаУдаление;
	
КонецФункции // ПолучитьДокументНачислениеЗарплатыПоЗаказНаряду()
 
Процедура ДозаполнитьТаблицу(ЗавершенныеРаботы)

	СотрудникиРабот = ЗавершенныеРаботы.ВыгрузитьКолонку("тм_Сотрудник");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_НастройкиСотрудников.ПроцентЗаВыполненнуюРаботуЗаказНаряд КАК ПроцентЗаВыполненнуюРаботуЗаказНаряд,
		|	тм_НастройкиСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.тм_НастройкиСотрудников КАК тм_НастройкиСотрудников
		|ГДЕ
		|	тм_НастройкиСотрудников.Сотрудник В(&Сотрудники)";
	
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИскомыеСтроки = ЗавершенныеРаботы.НайтиСтроки(Новый Структура("тм_Сотрудник", Выборка.Сотрудник)); 
		Для каждого СтрокаТаблицы Из ИскомыеСтроки Цикл
			СтрокаТаблицы.ПроцентПолучаемыйСотрудником = Выборка.ПроцентЗаВыполненнуюРаботуЗаказНаряд;
		КонецЦикла;  		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьАктуальныйПробег(ДокументОбъект)

	Если ЗначениеЗаполнено(ДокументОбъект.тм_Автомобиль) Тогда
		Попытка
			Автомобиль = ДокументОбъект.тм_Автомобиль.ПолучитьОбъект();
			Автомобиль.Заблокировать();
			Автомобиль.Пробег = ДокументОбъект.тм_Пробег;
			Автомобиль.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 	
	КонецЕсли; 

КонецПроцедуры

Процедура УстановитьСпецификациюАвтомобиля(ДокументОбъект)

	Для каждого СтрРабота Из ДокументОбъект.Работы Цикл
		
		Если Не ЗначениеЗаполнено(СтрРабота.Спецификация) Тогда
			Продолжить;	
		КонецЕсли; 
		
		МЗ = РегистрыСведений.тм_СпецификацияРаботАвтомобилей.СоздатьМенеджерЗаписи();
		МЗ.Работа = СтрРабота.Номенклатура;
		МЗ.Автомобиль = ДокументОбъект.тм_Автомобиль.Автомобиль;
		МЗ.Спецификация = СтрРабота.Спецификация;
		МЗ.ДокументЗаписи = ДокументОбъект.Ссылка;
		//МЗ.Прочитать();
		МЗ.Записать();
		
	КонецЦикла;  
	
КонецПроцедуры

Процедура ЗафиксироватьПроданныеТовары(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходнаяНакладная") 
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") 
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеЗапасов") Тогда
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			Если ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд 
				Или ДокументОбъект.СостояниеЗаказа <> Справочники.СостоянияЗаказНарядов.Завершен
				Или ДокументОбъект.ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Успешно Тогда
				Возврат;	
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеЗапасов") Тогда
			// Ничего не делаем	
		ИначеЕсли ДокументОбъект.тм_СостояниеРасходнойНакладной <> Перечисления.тм_СостояниеРасходнойНакладной.Завершен 
			Или ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда // Расходная накладная
			Возврат;
		КонецЕсли; 
		
		ДокументОбъект.Движения.тм_ПроданныеТовары.Записывать = Истина;
		Для каждого Стр Из ДокументОбъект.Запасы Цикл
			Движение = ДокументОбъект.Движения.тм_ПроданныеТовары.Добавить();
			Движение.Период 		= ТекущаяДатаСеанса();
			Движение.Номенклатура 	= Стр.Номенклатура;
			//Движение.Склад 			= ?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя"), ДокументОбъект.СтруктурнаяЕдиницаРезерв, ДокументОбъект.СтруктурнаяЕдиница);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеЗапасов") Тогда
				Движение.Склад = ДокументОбъект.СтруктурнаяЕдиница;
			Иначе
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаРезерв", ДокументОбъект.Метаданные().ТабличныеЧасти.Запасы) Тогда
					Движение.Склад = Стр.СтруктурнаяЕдиницаРезерв;
				Иначе
					Движение.Склад = Стр.СтруктурнаяЕдиница;
				КонецЕсли;  
			КонецЕсли; 
			
			Движение.Количество 	= Стр.Количество;
		КонецЦикла; 	
		
	КонецЕсли; 

КонецПроцедуры
  
#КонецОбласти 
