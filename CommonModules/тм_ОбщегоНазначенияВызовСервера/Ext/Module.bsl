
#Область ДобавлениеИзменениеНаФорме

// Добавляет элемент на форму.
// 
// Параметры:
//  Форма Форма
//  ИмяЭлемента Имя элемента
//  ТипЭлемента Тип элемента
//  ВидЭлемента Вид элемента
//  Родитель Родитель
//  ПутьКДанным Путь к данным
// 
// Возвращаемое значение:
// Элемент Элемент  
Функция ДобавитьЭлементНаФорму(Форма, ИмяЭлемента, ТипЭлемента, ВидЭлемента, Родитель, ПутьКДанным) Экспорт

	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель);
	
	Если Не ПутьКДанным = Неопределено Тогда
		Элемент.ПутьКДанным = ПутьКДанным;	
	КонецЕсли; 
	
	Если Не ВидЭлемента = Неопределено Тогда
		Элемент.Вид = ВидЭлемента;
	КонецЕсли; 
	 	
	Возврат Элемент;

КонецФункции

// Вставляет элемент на форму.
// 
// Параметры:
//  Форма Форма
//  ИмяЭлемента Имя элемента
//  ТипЭлемента Тип элемента
//  ВидЭлемента - Неопределено - Вид элемента
//  Родитель Родитель
//  ПутьКДанным Путь к данным
//  ПередЭлементом Перед элементом
// 
// Возвращаемое значение:
// Элемент Элемент 
Функция ВставитьЭлементНаФорму(Форма, ИмяЭлемента, ТипЭлемента, ВидЭлемента = Неопределено, Родитель, ПутьКДанным, ПередЭлементом) Экспорт

	Элемент = Форма.Элементы.Вставить(ИмяЭлемента, ТипЭлемента, Родитель, ПередЭлементом);
	
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		Элемент.ПутьКДанным = ПутьКДанным;	
	КонецЕсли; 
	
	Если ВидЭлемента <> Неопределено Тогда
		Элемент.Вид = ВидЭлемента;
	КонецЕсли; 
		
	Возврат Элемент;

КонецФункции

Процедура ДобавитьКомандуНаФорму(Форма, ИмяКоманды, ВидКнопки, Заголовок, Действие) Экспорт

	// Добавляем команду заполнить из файла 
	Если ИмяКоманды = "ЗаполнитьИзФайла" Тогда
		КомандаЗаполнитьИзФайла = Форма.Команды.Найти(ИмяКоманды);	
		Если КомандаЗаполнитьИзФайла = Неопределено Тогда
			КомандаЗаполнитьИзФайла = Форма.Команды.Добавить(ИмяКоманды);
			КомандаЗаполнитьИзФайла.Заголовок = "Заполнить из файла";
			КомандаЗаполнитьИзФайла.Действие = "тм_ЗаполнитьИзФайлаВместо";
			
			КомандаЭлемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Форма.Элементы.ГруппаЗапасыКоманднаяПанель);
			КомандаЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			КомандаЭлемент.ИмяКоманды = ИмяКоманды;
			КомандаЭлемент.Заголовок = "Заполнить из файла";
			КомандаЭлемент.Картинка = БиблиотекаКартинок.ФорматExcel;
			КомандаЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаблокироватьРазблокироватьФорму(Форма, Заблокировать = Истина, Успешно = Истина) Экспорт
	
	Если Заблокировать Тогда                                                  
		Если ЗначениеЗаполнено(Форма.Параметры.Ключ) Тогда
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Форма.Параметры.Ключ,, Форма.УникальныйИдентификатор);
				
				ПараметрыЗаписи = Новый Структура;
				ПараметрыЗаписи.Вставить("УникальныйИдентификатор", Форма.Параметры.Ключ.УникальныйИдентификатор());
				ПараметрыЗаписи.Вставить("ДатаОткрытия",			ТекущаяДатаСеанса());
				ПараметрыЗаписи.Вставить("Пользователь", 			Пользователи.ТекущийПользователь());
				
				РегистрыСведений.тм_ИсторияОткрытияДокументы.ЗафиксироватьВремяОткрытия(ПараметрыЗаписи);
			Исключение
				Форма.ТолькоПросмотр = Истина;
				
				ПараметрыЗапроса = Новый Структура;
				ПараметрыЗапроса.Вставить("УникальныйИдентификатор", Форма.Параметры.Ключ.УникальныйИдентификатор());
				
				КтоОткрылДокумент = РегистрыСведений.тм_ИсторияОткрытияДокументы.ПолучитьИнформациюПоДокументу(ПараметрыЗапроса);
				Сообщить("Документ уже открыт другим пользователем [" + КтоОткрылДокумент +"]! Дождитесь закрытия заказа!");
				Успешно = Ложь;
			КонецПопытки; 		
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Форма.Параметры.Ключ) Тогда
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("УникальныйИдентификатор", Форма.Параметры.Ключ.УникальныйИдентификатор());
			
			КтоОткрылДокумент = РегистрыСведений.тм_ИсторияОткрытияДокументы.ПолучитьИнформациюПоДокументу(ПараметрыЗапроса);
			
			Если КтоОткрылДокумент <> Пользователи.ТекущийПользователь() Тогда
				Возврат;			
			КонецЕсли;   
			
			РазблокироватьДанныеДляРедактирования(Форма.Параметры.Ключ, Форма.УникальныйИдентификатор);
			
			ПараметрыУдаления = Новый Структура;
			ПараметрыУдаления.Вставить("УникальныйИдентификатор", Форма.Параметры.Ключ.УникальныйИдентификатор());
			РегистрыСведений.тм_ИсторияОткрытияДокументы.УдалитьЗапись(ПараметрыУдаления);
		КонецЕсли; 		
	КонецЕсли; 
	
КонецПроцедуры // РазблокироватьДокумент()

#КонецОбласти 

#Область БонуснаяСистема	

Функция ПолучитьОстатокБонусов(Контрагент) Экспорт

	СуммаНакопленийОстаток = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_БонусныеНакопленияОстатки.СуммаНакопленийОстаток КАК СуммаНакопленийОстаток
		|ИЗ
		|	РегистрНакопления.тм_БонусныеНакопления.Остатки(
		|			&Дата,
		|			Контрагент = &Контрагент
		|				И БонусныйСчет В
		|					(ВЫБРАТЬ
		|						тм_НастройкиКонтрагентов.БонусныйСчет КАК БонусныйСчет
		|					ИЗ
		|						РегистрСведений.тм_НастройкиКонтрагентов КАК тм_НастройкиКонтрагентов
		|					ГДЕ
		|						тм_НастройкиКонтрагентов.Контрагент = &Контрагент)) КАК тм_БонусныеНакопленияОстатки";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий()  Тогда
		СуммаНакопленийОстаток = Выборка.СуммаНакопленийОстаток;
	КонецЕсли; 
	
	Возврат СуммаНакопленийОстаток;
	
КонецФункции // ПолучитьОстатокБонусов()
 
Функция СоздатьБонусныйСчет(НомерСчета, Владелец, Отказ) Экспорт

	БонусныйСчет = Справочники.тм_БонусныйСчет.СоздатьЭлемент();
	БонусныйСчет.Владелец = Владелец;
	БонусныйСчет.Наименование = НомерСчета;
	
	Попытка
		БонусныйСчет.Записать(); 
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Возврат БонусныйСчет.Ссылка;

КонецФункции // СоздатьБонусныйСчет()

Процедура ОтменитьПроведенияДокументовСписанияБонусов(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_СписаниеБонусов.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.тм_СписаниеБонусов КАК тм_СписаниеБонусов
		|ГДЕ
		|	тм_СписаниеБонусов.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументСписания = Выборка.Ссылка.ПолучитьОбъект();	
			ДокументСписания.Заблокировать();
			ДокументСписания.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось отменить проведение документа'")); 
		КонецПопытки; 	
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеПоБонуснойПрограмме(ДанныеПечати) Экспорт
	
	// TODO: добавить блокировку регистра
	
	СтруктураДанных = Новый Структура("НачисленоБонусов, СписаноБонусов, ОстатокБонусов", 0, 0, 0); 

	Регистратор = ?(ТипЗнч(ДанныеПечати) = Тип("Массив"), ДанныеПечати[0], ДанныеПечати.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_БонусныеНакопления.СуммаНакоплений КАК СуммаНакоплений
		|ИЗ
		|	РегистрНакопления.тм_БонусныеНакопления КАК тм_БонусныеНакопления
		|ГДЕ
		|	тм_БонусныеНакопления.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тм_НастройкиКонтрагентов.БонусныйСчет КАК БонусныйСчет
		|ПОМЕСТИТЬ вт_Настройки
		|ИЗ
		|	РегистрСведений.тм_НастройкиКонтрагентов КАК тм_НастройкиКонтрагентов
		|ГДЕ
		|	тм_НастройкиКонтрагентов.Контрагент = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тм_БонусныеНакопленияОстатки.СуммаНакопленийОстаток КАК СуммаНакопленийОстаток
		|ИЗ
		|	РегистрНакопления.тм_БонусныеНакопления.Остатки(
		|			&Дата,
		|			Контрагент = &Контрагент
		|				И БонусныйСчет В
		|					(ВЫБРАТЬ
		|						вт_Настройки.БонусныйСчет КАК БонусныйСчет
		|					ИЗ
		|						вт_Настройки КАК вт_Настройки)) КАК тм_БонусныеНакопленияОстатки";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Контрагент", Регистратор.Контрагент);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
	РезультатНачислено = РезультатЗапросаПакет[0];
	РезультатОстаток = РезультатЗапросаПакет[2];
		
	ВыборкаНачислено = РезультатНачислено.Выбрать();
	
	Если ВыборкаНачислено.Следующий() Тогда
		СтруктураДанных.НачисленоБонусов = ВыборкаНачислено.СуммаНакоплений;
	КонецЕсли; 
	
	ВыборкаОстаток = РезультатОстаток.Выбрать();
	
	Если ВыборкаОстаток.Следующий() Тогда
		СтруктураДанных.ОстатокБонусов = ВыборкаОстаток.СуммаНакопленийОстаток;
	КонецЕсли; 
	
	СтруктураДанных.СписаноБонусов = Регистратор.тм_ИспользованныеБонусы;
	
	Возврат СтруктураДанных;
		
КонецФункции // ПолучитьДанныеПоБонуснойПрограмме()
  
#КонецОбласти 

#Область РаботаСЦенамиНоменклатуры

Процедура СформироватьЦеныЗакупкиПродажи(ТаблицаЗапасов, ДатаДокумента) Экспорт

	// Исключим позиции 
	ИсключитьПозицииУстановкиЦен(ТаблицаЗапасов);	
	
	ПодготовитьТаблицуЗапасов(ТаблицаЗапасов);
	УстановитьЦеныВРегистр(ТаблицаЗапасов, ДатаДокумента);

КонецПроцедуры

Процедура ПодготовитьТаблицуЗапасов(тЗапасы)
	
	тЗапасы.Колонки.Добавить("ЦенаПродажи", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	
	СпрНастроек = Справочники.тм_НастройкиУстановкиЦенНоменклатуры.НайтиПоКоду("000000001");

	// Исключаем лишние позиции
	МаксИндекс = тЗапасы.Количество()-1;
	Для НомерСтроки = 0 По МаксИндекс Цикл
		Стр = тЗапасы.Получить(МаксИндекс - НомерСтроки);
		//Удаляем строки, где еденица измерения с типом "КлассификаторЕдиницИзмерения"
		Если Не ТипЗнч(Стр.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			тЗапасы.Удалить(Стр);
		Иначе
			// расчитываем цену продажи
			Стр.ЦенаПродажи = РассчитатьЦенуПродажи(СпрНастроек.Настройки, Стр.Цена);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

Функция РассчитатьЦенуПродажи(Настройки, Знач ЦенаПозиции)

	ЦенаПозиции = Окр(ЦенаПозиции,0, РежимОкругления.Окр15как10);
	
	Для каждого Стр Из Настройки Цикл
		Если ЦенаПозиции >= Стр.ПорогС И ЦенаПозиции <= Стр.ПорогПо Тогда
			ЦенаПродажи = Окр(ЦенаПозиции + (ЦенаПозиции * Стр.Процент / 100));
			Возврат ЦенаПродажи;
		КонецЕсли; 			
	КонецЦикла;  
	
	// Если не вошел в порог
	
	Возврат 0;

КонецФункции // РассчитатьЗакупочнуюЦену()

Процедура УстановитьЦеныВРегистр(тЗапасы, Дата)

	Для каждого СтрЗапасы Из тЗапасы Цикл
		
		УстановитьЦенуЗакупки(СтрЗапасы, Дата);
		
		Если СтрЗапасы.ЦенаПродажи = 0 Тогда
			Сообщить("Цена продажи = 0. Цена не вошла в порог!");
			Продолжить;
		КонецЕсли; 

		УстановитьЦенуПродажи(СтрЗапасы, Дата);
		
	КонецЦикла;  

КонецПроцедуры

Процедура УстановитьЦенуЗакупки(СтрЗапасы, Дата) Экспорт

	МЗ = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
	МЗ.Период = Дата;
	МЗ.ВидЦен = Справочники.ВидыЦен.Учетная;
	МЗ.Номенклатура = СтрЗапасы.Номенклатура;
	
	МЗ.Прочитать();
	
	Если МЗ.Выбран() Тогда
		МЗ.Цена = СтрЗапасы.Цена;
		МЗ.ЕдиницаИзмерения = СтрЗапасы.ЕдиницаИзмерения;
	Иначе
		МЗ.Период = Дата;
		МЗ.ВидЦен = Справочники.ВидыЦен.Учетная;
		МЗ.Номенклатура = СтрЗапасы.Номенклатура;
		МЗ.Цена = СтрЗапасы.Цена; //ЗакупочнаяЦена
		МЗ.ЕдиницаИзмерения = СтрЗапасы.ЕдиницаИзмерения;
	КонецЕсли; 
	
	МЗ.Записать();		
	
КонецПроцедуры  

Процедура УстановитьЦенуПродажи(СтрЗапасы, Дата) Экспорт

	МЗ = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
	МЗ.Период = Дата;
	МЗ.ВидЦен = Справочники.ВидыЦен.Оптовая;
	МЗ.Номенклатура = СтрЗапасы.Номенклатура;
	
	МЗ.Прочитать();
	
	Если МЗ.Выбран() Тогда
		МЗ.Цена = СтрЗапасы.ЦенаПродажи;
	Иначе
		МЗ.Период = Дата;
		МЗ.ВидЦен = Справочники.ВидыЦен.Оптовая;
		МЗ.Номенклатура = СтрЗапасы.Номенклатура;
		МЗ.Цена = СтрЗапасы.ЦенаПродажи; // Цена продажи
		МЗ.ЕдиницаИзмерения = СтрЗапасы.ЕдиницаИзмерения;
		МЗ.Актуальность = Истина;
	КонецЕсли; 
	
	МЗ.Записать();		
		
КонецПроцедуры  

Процедура ВывестиЗакупочнуюЦенуПриИзмененииНоменклатуры(ЗакупочнаяЦена, Номенклатура, Характеристика = Неопределено) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("ВидЦен", Справочники.ВидыЦен.Учетная);
	Отбор.Вставить("Характеристика", ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика));
	
	ЦеныНоменклатуры = РегистрыСведений.ЦеныНоменклатуры;
	ЦенаЗакупки = ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(), Отбор);
	Если ТипЗнч(ЦенаЗакупки.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		Коэффициент = ЦенаЗакупки.ЕдиницаИзмерения.Коэффициент;
		ЗакупочнаяЦена = ЦенаЗакупки.Цена / Коэффициент;
	Иначе
		ЗакупочнаяЦена = ЦенаЗакупки.Цена;	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиЗакупочныеЦены(Запасы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ном.Ссылка КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.Номенклатура КАК Ном
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Учетная)
		|					И Номенклатура В (&СписокТоваров)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = Ном.Ссылка)";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СписокТоваров", Запасы.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИскомыеСтроки = Запасы.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Если ТипЗнч(Выборка.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Для каждого Стр Из ИскомыеСтроки Цикл
				Коэффициент = Выборка.ЕдиницаИзмерения.Коэффициент;	
				Стр.тм_ЗакупочнаяЦена = Выборка.Цена / Коэффициент;
			КонецЦикла;  
		Иначе
			Для каждого Стр Из ИскомыеСтроки Цикл
				Стр.тм_ЗакупочнаяЦена = Выборка.Цена;
			КонецЦикла;  			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Удалить цены
Процедура УдалитьЦеныЗакупкиПродажи(ТаблицаЗапасов, ДатаДокумента) Экспорт

	
	

КонецПроцедуры
 
Процедура ИсключитьПозицииУстановкиЦен(ТаблицаЗапасов)

	СпсНоменклатуры = ТаблицаЗапасов.ВыгрузитьКолонку("Номенклатура");
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_ИсключенияНоменулатурыУстановкиЦенСписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	тм_ИсключенияНоменулатурыУстановкиЦенСписокНоменклатуры.ДатаОкончанияОграничения КАК ДатаОкончанияОграничения
		|ИЗ
		|	Справочник.тм_ИсключенияНоменулатурыУстановкиЦен.СписокНоменклатуры КАК тм_ИсключенияНоменулатурыУстановкиЦенСписокНоменклатуры
		|ГДЕ
		|	тм_ИсключенияНоменулатурыУстановкиЦенСписокНоменклатуры.Номенклатура В(&СпсНоменклатуры)
		|	И тм_ИсключенияНоменулатурыУстановкиЦенСписокНоменклатуры.ДатаОкончанияОграничения > &ТекДата";
	
	Запрос.УстановитьПараметр("СпсНоменклатуры", СпсНоменклатуры);
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИскомыеСтроки = ТаблицаЗапасов.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		Для каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
			ТаблицаЗапасов.Удалить(ИскомаяСтрока);
		КонецЦикла;  
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ФоновоеВыполнение

Процедура Тест(Знач Пар1, Знач Пар2) Экспорт

	ТекДата = ТекущаяДата();	
	Пока ТекущаяДата() < ТекДата + 5*60 Цикл 
	КонецЦикла;

КонецПроцедуры
 

#КонецОбласти 

Процедура ВывестиПроизводителя(Запасы, Производитель = Неопределено) Экспорт

	Если ТипЗнч(Запасы) = Тип("ДанныеФормыКоллекция") Тогда
		СпсНоменклатуры = Запасы.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Иначе // Номенклатура
		СпсНоменклатуры = Новый СписокЗначений;
		СпсНоменклатуры.Добавить(Запасы);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение, """") КАК Производитель
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = Номенклатура.Ссылка)
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоПроизводитель)
		|ГДЕ
		|	Номенклатура.Ссылка В(&СписокПозиций)";
	
	Запрос.УстановитьПараметр("СвойствоПроизводитель", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Производитель_DaCar"));
	Запрос.УстановитьПараметр("СписокПозиций", СпсНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если  ТипЗнч(Запасы) = Тип("ДанныеФормыКоллекция") Тогда
			ИскомыеСтроки = Запасы.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Для каждого Стр Из ИскомыеСтроки Цикл
				Стр.тм_Производитель = Выборка.Производитель;
			КонецЦикла;  			
		Иначе
			Производитель = Выборка.Производитель;	
		КонецЕсли; 
				
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиОписаниеХарактеристики(Работы, ОписаниеХарактеристики = Неопределено) Экспорт

	Если ТипЗнч(Работы) = Тип("ДанныеФормыКоллекция") Тогда
		СпсСпецификации = Работы.Выгрузить(, "Спецификация").ВыгрузитьКолонку("Спецификация");
	Иначе // Номенклатура
		СпсСпецификации = Новый СписокЗначений;
		СпсСпецификации.Добавить(Работы);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпецификацииДополнительныеРеквизиты.Значение КАК Описание,
		|	СпецификацииДополнительныеРеквизиты.Ссылка КАК Спецификация
		|ИЗ
		|	Справочник.Спецификации.ДополнительныеРеквизиты КАК СпецификацииДополнительныеРеквизиты
		|ГДЕ
		|	СпецификацииДополнительныеРеквизиты.Ссылка В(&СписокСпецификаций)
		|	И СпецификацииДополнительныеРеквизиты.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "тм_ОписаниеСпецификации"));
	Запрос.УстановитьПараметр("СписокСпецификаций", СпсСпецификации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОписаниеХарактеристики = "";
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Работы) = Тип("ДанныеФормыКоллекция") Тогда
			ИскомыеСтроки = Работы.НайтиСтроки(Новый Структура("Спецификация", Выборка.Спецификация));
			Для каждого Стр Из ИскомыеСтроки Цикл
				Стр.тм_ОписаниеСпецификации = Выборка.Описание;
			КонецЦикла;  			
		Иначе
			ОписаниеХарактеристики = Выборка.Описание;	
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

Функция НайтиНоменклатуруПоАртикулуИПроизводителю(Артикул, стрПроизводитель) Экспорт

	СвойствоПроизводитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Производитель");
	Производитель = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(стрПроизводитель, Истина);

	Ном = Справочники.Номенклатура.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО НоменклатураДополнительныеРеквизиты.Ссылка = Номенклатура.Ссылка
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		|	И НоменклатураДополнительныеРеквизиты.Значение = &Значение
		|	И Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Значение", Производитель);
	Запрос.УстановитьПараметр("Свойство", СвойствоПроизводитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ном = Выборка.Ссылка;	
	КонецЦикла;
	
	Возврат Ном;

КонецФункции // НайтиНоменклатуруПоАртикулуИПроизводителю()

#Область ПроверкаДвойногоВхода

Функция ПолучитьСписокАктивныхПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
    СписокАктивныхПользователей = ПолучитьСеансыИнформационнойБазы();
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	""                                                                   "" КАК Пользователь,
	|	""                                                                   "" КАК ИмяКомпьютера";
	АктивныеПользователи = Запрос.Выполнить().Выгрузить().СкопироватьКолонки();
	для Каждого ЭлементМассива из СписокАктивныхПользователей Цикл
		Если 
			//ЭлементМассива.НомерСоединения = НомерСоединенияИнформационнойБазы()  
			//ИЛИ 
			ЭлементМассива.ИмяПриложения = "Designer" Тогда 
			Продолжить; 
		КонецЕсли; 
		НоваяСтрока=АктивныеПользователи.Добавить();
		НоваяСтрока.Пользователь = ВРег(СокрЛП(ЭлементМассива.Пользователь.ПолноеИмя));
		НоваяСтрока.ИмяКомпьютера = ВРег(СокрЛП(ЭлементМассива.ИмяКомпьютера));
	КонецЦикла;
	
	ПараметрыПрерывания = Новый Структура;
	
	мПользователь = ПолучитьимяТекущегоПользователя();
	КолСеанс = 0;	
	
	Для каждого АктивныйПользователь Из АктивныеПользователи Цикл
		Если АктивныйПользователь.Пользователь=мПользователь Тогда
			КолСеанс=КолСеанс+1;
			Если КолСеанс=2 Тогда				
				ПараметрыПрерывания.Вставить("Пользователь", Строка(АктивныйПользователь.Пользователь));
				ПараметрыПрерывания.Вставить("ИмяКомпьютера", АктивныйПользователь.ИмяКомпьютера);
				ПараметрыПрерывания.Вставить("НеРазрешатьПодключение", ПолучитьРазрешениеПодключения());
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПрерывания;

КонецФункции 

Функция ПолучитьИмяТекущегоПользователя() Экспорт
	
	Возврат ВРег(СокрЛП(ПараметрыСеанса.ТекущийПользователь.Наименование));
	
КонецФункции

Функция ПолучитьРазрешениеПодключения() Экспорт	
	
	НеРазрешатьПодключение = Истина;
	ТЗРазрешениеПодключения = УправлениеСвойствами.ЗначенияСвойств(ПараметрыСеанса.ТекущийПользователь,Ложь,Истина,"_ЗапускатьНесколькоСеансов");
	
	Если ТЗРазрешениеПодключения = Неопределено Тогда
		НеРазрешатьПодключение = Истина;
	Иначе
		Если ТЗРазрешениеПодключения.Количество()>0 Тогда
			НеРазрешатьПодключение = Не ТЗРазрешениеПодключения[0].Значение;
		Иначе	
			НеРазрешатьПодключение = Истина;
		КонецЕсли;	  
	КонецЕсли; 
	
	Возврат НеРазрешатьПодключение;
	
КонецФункции
#КонецОбласти

#Область Доступы

Функция ПроверитьДоступыОткрытияДокумента(Отказ, ИмяОбъекта) Экспорт

	Результат = Новый Структура("Отказ, ПричинаОтказа", Отказ, "");
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если ИмяОбъекта= "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда" Тогда
		// Проверим, есть ли соответствие в сотрудника и пользователя
		Сотрудник = тм_КЭШ.СотрудникПользователя(ТекущийПользователь);
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Результат.Отказ = Истина;
			Результат.ПричинаОтказа = "По текущему пользователю <" + Строка(ТекущийПользователь) + "> не найден сотрудник. Обратитесь к администратору!";
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции 
	
#КонецОбласти 

#Область ОповещениеПользователя

Функция ЕстьНеПрочитанныеПисьма() Экспорт
	
	СтруктураДанных = Новый Структура("ПользовательКому, КоличествоНеПрочитано", Пользователи.ТекущийПользователь(), 0); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПользовательКому", Пользователи.ТекущийПользователь());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тм_СообщенияПользователям.ПользовательКому КАК ПользовательКому,
		|	КОЛИЧЕСТВО(тм_СообщенияПользователям.Прочитано) КАК КоличествоНеПрочитано
		|ИЗ
		|	РегистрСведений.тм_СообщенияПользователям КАК тм_СообщенияПользователям
		|ГДЕ
		|	тм_СообщенияПользователям.ПользовательКому = &ПользовательКому
		|	И НЕ тм_СообщенияПользователям.Прочитано
		|	И НЕ тм_СообщенияПользователям.Архив
		|СГРУППИРОВАТЬ ПО
		|	тм_СообщенияПользователям.ПользовательКому";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанных.КоличествоНеПрочитано = Выборка.КоличествоНеПрочитано;		
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьНеОтправленныеСообщения()
 
#КонецОбласти 

#Область ФункциональныеОпции

Функция ВключенаФункциональнаяОпция(НаименованиеФункциональнойОпции) Экспорт

	Возврат ПолучитьФункциональнуюОпцию(НаименованиеФункциональнойОпции);
	
КонецФункции // ВключенаФункциональнаяОпция()
 	
#КонецОбласти 

#Область ПроверкаПрав

Процедура ЗаполнитьПрава(Права) Экспорт

	Если ТипЗнч(Права) <> Тип("Соответствие") Тогда
		Права = Новый Соответствие;
	КонецЕсли; 
	
	Права.Вставить("ПолныеПрава", ДоступнаРоль("ПолныеПрава"));
	Права.Вставить("ВосстанавливатьРанееОткрытыеВкладки", НастройкиПользователей("Восстанавливать ранее открытые вкладки", Пользователи.ТекущийПользователь(), Ложь));
	
КонецПроцедуры
 
Функция НастройкиПользователей(Право, Пользователь, ЗначениеПоУмолчанию) Экспорт

	Настройка = ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(Право);
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
	
	Значение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|	И НастройкиПользователей.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", Настройка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Значение = Выборка.Значение;
	Иначе
		Значение = ЗначениеПоУмолчанию;	
	КонецЕсли; 

	Возврат Значение;	

КонецФункции // Настройки()

// Функция - Доступна роль
//
// Параметры:
//  Роль - Строка  
// 
// Возвращаемое значение:
//  Булево - Истина, Роль доступна
//
Функция ДоступнаРоль(Роль) Экспорт

	Возврат РольДоступна(Роль);

КонецФункции // РольДоступна()
 
#КонецОбласти 







