
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораОтчетов();
	ЗаполнитьРанееСохраненныеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьИндексКартинкиРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для каждого СтрОтчета Из Объект.Отчеты Цикл
		ИндексСтроки = СтрОтчета.НомерСтроки-1;
		Если ПустаяСтрока(СтрОтчета.ПолучателиПисем) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнено поле <Получатели писем>";
			Сообщение.Поле = "Объект.Отчеты[" + ИндексСтроки + "].ПолучателиПисем";
			Сообщение.Сообщить(); 
			Отказ = Истина;
		ИначеЕсли ПустаяСтрока(СтрОтчета.Отчет) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнено поле <Отчет>";
			Сообщение.Поле = "Объект.Отчеты[" + ИндексСтроки + "].Отчет";
			Сообщение.Сообщить(); 			
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла;  	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//СоздатьРегламентныеЗадания(ТекущийОбъект);
	
	ЗаписатьНастройки(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ОтчетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
		
	//УстановитьИндексКартинкиРасписания(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОтчетПриИзменении(Элемент)
	
	Если Элементы.Отчеты.ТекущиеДанные <> Неопределено
		И Не ПустаяСтрока(Элементы.Отчеты.ТекущиеДанные.Отчет)
		И ПустаяСтрока(Элементы.Отчеты.ТекущиеДанные.Расписание) Тогда
		Элементы.Отчеты.ТекущиеДанные.Расписание = "Создать расписание";
		УстановитьИндексКартинкиРасписания(0);
	Иначе
		УстановитьИндексКартинкиРасписания(1);
	КонецЕсли; 	
	
	// Получим параметры отчета и сохраним
	Если Элементы.Отчеты.ТекущиеДанные <> Неопределено
		И Не ПустаяСтрока(Элементы.Отчеты.ТекущиеДанные.Отчет) Тогда
		
		// Проверим, есть ли настройка
		Отбор = Новый Структура();
		Отбор.Вставить("НаименованиеОтчета", Элементы.Отчеты.ТекущиеДанные.Отчет);	
		
		Настройки =  СохраненныеНастройки.НайтиСтроки(Отбор);
		Если Настройки.Количество() Тогда
			НоваяНастройка = Настройки[0];
		Иначе
			НоваяНастройка = СохраненныеНастройки.Добавить();	
		КонецЕсли; 
		
		НоваяНастройка.НаименованиеОтчета = Элементы.Отчеты.ТекущиеДанные.Отчет; 
		
		ПараметрыОтчета = "";
		Попытка
			ПараметрыОтчета = ПолучитьПараметрыОтчета(Элементы.Отчеты.ТекущиеДанные.Отчет);	
			Элементы.Отчеты.ТекущиеДанные.ПараметрыСтрокой = ПараметрыОтчета;
			НоваяНастройка.Параметры = ПараметрыОтчета; 
		Исключение
			НоваяНастройка.Параметры = ПараметрыОтчета; 
		КонецПопытки; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ОтчетыРасписание" 
		Или  Поле.Имя <> "Параметры" Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Поле.Имя = "ОтчетыРасписание" Тогда
		ПоказатьУказанноеРасписание = Ложь;
		Если Элемент.ТекущиеДанные.Расписание = "Расписание установлено" Тогда
			// TODO: Сделать вопрос если Расписание установлено
			ПоказатьУказанноеРасписание = Истина;		
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ПослеУказанияРасписания", ЭтотОбъект);
		
		Если ПоказатьУказанноеРасписание Тогда
			Расписание = ДесериализоватьЗначение(Элемент.ТекущиеДанные.ЗначениеРасписания);
		Иначе
			Расписание = Новый РасписаниеРегламентногоЗадания;
		КонецЕсли;  
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание); // создаем диалог
		Диалог.Показать(ОписаниеОповещенияОЗакрытии); 		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтчетыПолучателиПисемНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВведенаяСтрока = Ждать ВвестиСтрокуАсинх(Элементы.Отчеты.ТекущиеДанные.ПолучателиПисем, "Получатели");
	Если ВведенаяСтрока <> Неопределено Тогда
		Элементы.Отчеты.ТекущиеДанные.ПолучателиПисем = ВведенаяСтрока;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Отчеты.ТекущиеДанные <> Неопределено
		И Не ПустаяСтрока(Элементы.Отчеты.ТекущиеДанные.Отчет) Тогда
		ВосстановитьНастройки(Элементы.Отчеты.ТекущиеДанные.Отчет);		
	КонецЕсли;  	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОтчетов()

	Спс = Новый СписокЗначений; 
	Для каждого СтрОтчет Из Метаданные.Отчеты Цикл
		Элементы.Отчеты.ПодчиненныеЭлементы.ОтчетыОтчет.СписокВыбора.Добавить(СтрОтчет.Имя, СтрОтчет.Синоним,, БиблиотекаКартинок.Отчет);
	КонецЦикла;  

КонецПроцедуры // ЗаполнитьСписокВыбораОтчетов()
 
&НаКлиенте
Процедура УстановитьИндексКартинкиРасписания(Индекс = Неопределено)
	
	Если Индекс <> Неопределено Тогда
		Элементы.Отчеты.ТекущиеДанные.Индекс = Индекс;
	Иначе
		Для каждого СтрОтчет Из Объект.Отчеты Цикл
			Если ПустаяСтрока(СтрОтчет.Расписание) Тогда
				СтрОтчет.Индекс = 1;	
			Иначе
				СтрОтчет.Индекс = 0;
			КонецЕсли; 
		КонецЦикла;  
	КонецЕсли; 
	
КонецПроцедуры // УстановитьИндексКартинкиРасписания()

&НаКлиенте
Процедура Подключаемый_ПослеУказанияРасписания(Расписание, ДополнительныеПараметры) Экспорт

	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстXDTO = СериализоватьЗначение(Расписание);
	
	Элементы.Отчеты.ТекущиеДанные.Расписание 			= "Расписание установлено";
	Элементы.Отчеты.ТекущиеДанные.ЗначениеРасписания    = ТекстXDTO;
	
КонецПроцедуры // Подключаемый_ПослеУказанияРаспиания()

&НаКлиентеНаСервереБезКонтекста
Функция ДесериализоватьЗначение(ЗначениеДесериализации)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗначениеДесериализации);
	Значение = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Возврат Значение;
	
КонецФункции // ДесериализоватьЗначение()

&НаКлиентеНаСервереБезКонтекста
Функция СериализоватьЗначение(ЗначениеСериализации)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ЗначениеСериализации, НазначениеТипаXML.Явное);
	ТекстXDTO = ЗаписьJSON.Закрыть();

	Возврат ТекстXDTO;
	
КонецФункции // ДесериализоватьЗначение()

&НаСервере
Процедура СоздатьРегламентныеЗадания(ТекущийОбъект)

	// 1. Удалим рег.задания                             
	Для каждого СтрОтчет Из ТекущийОбъект.Отчеты Цикл
		РанееСозданныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ", СтрОтчет.Отчет));
		Для каждого РегЗадание Из РанееСозданныеРегламентныеЗадания Цикл
			РегЗадание.Удалить();	
		КонецЦикла; 
	КонецЦикла; 	 
	
	// 2. Создадим рег. задания                          
	К = 0;
	ИскомыеСтроки = ТекущийОбъект.Отчеты.НайтиСтроки(Новый Структура("Выгружать", Истина)); 
	Для каждого СтрокаНаВыгрузку Из ИскомыеСтроки Цикл                                                                                         
		
		К = К + 1;  // для теста передачи параметров
		РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания["тм_ПроизвольноеРегламентноеЗадание"]);
		РегламентноеЗадание.Ключ = СтрокаНаВыгрузку.Отчет;
		РегламентноеЗадание.Расписание = ДесериализоватьЗначение(СтрокаНаВыгрузку.ЗначениеРасписания); 
		РегламентноеЗадание.ИмяПользователя = "Администратор";
		РегламентноеЗадание.Использование = Истина;   
		РегламентноеЗадание.Наименование = "(тм) Произвольное рег. задание: Выгрузка отчета <" + СтрокаНаВыгрузку.Отчет + ">";
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ИмяОтчета", СтрокаНаВыгрузку.Отчет);
		СтруктураДанных.Вставить("Выполнять", Истина);
		
		Если К < 2 Тогда
			ПараметрыРегЗадания = Новый Массив;
			ПараметрыРегЗадания.Добавить(СтруктураДанных);	
			РегламентноеЗадание.Параметры = ПараметрыРегЗадания;
		КонецЕсли; 
		
		РегламентноеЗадание.Записать(); 
		
	КонецЦикла;  	
	
КонецПроцедуры // СоздатьРегламентныеЗадания()

&НаСервере
Функция ПолучитьПараметрыОтчета(ИмяОтчета)
	
	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ПараметрыКомпоновки.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Если ИмяОтчета = "тм_ПродажаПоМенеджерам" Тогда
		ПараметрыКомпоновки.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.ДетальныеЗаписи.Настройки);
	Иначе
		ПараметрыКомпоновки.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли; 
	
	ПараметрыДанных = Новый Соответствие;
	
	//Значение = СериализоватьЗначение(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы);
	Для каждого Стр Из ПараметрыКомпоновки.Настройки.ПараметрыДанных.Элементы Цикл
		ПараметрыДанных.Вставить(СокрЛП(Стр.Параметр), ТипЗнч(Стр.Значение));
		Стр.Использование = Истина;
	КонецЦикла;  
	
	//ПараметрыКомпоновки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	//Возврат ЗначениеВСтрокуВнутр(ПараметрыДанных);
	//Возврат ПоместитьВСтроку(ПараметрыКомпоновки);
	Возврат СериализоватьЗначение(ПараметрыКомпоновки);
	
КонецФункции // ПолучитьОтчет()

&НаКлиенте
Процедура ПараметрыНастройкиПараметрыДанныхПриИзменении(Элемент)

	// Сохраним параметры
	Отбор = Новый Структура();
	Отбор.Вставить("НаименованиеОтчета", Элементы.Отчеты.ТекущиеДанные.Отчет);
	
	Настройка = СохраненныеНастройки.НайтиСтроки(Отбор);
	Если Настройка.Количество() Тогда
	//	Настройка[0].Параметры = ПоместитьВСтроку(ПараметрыКомпоновки);
		Настройка[0].Параметры = СериализоватьЗначение(ПараметрыКомпоновки);
	Иначе
		Настройка = СохраненныеНастройки.Добавить();
		Настройка.НаименованиеОтчета = Элементы.Отчеты.ТекущиеДанные.Отчет;
	//	Настройка.Параметры			 = ПоместитьВСтроку(ПараметрыКомпоновки);	
		Настройка.Параметры			 = СериализоватьЗначение(ПараметрыКомпоновки);		
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРанееСохраненныеНастройки()

	НЗ = РегистрыСведений.тм_ПараметрыОтчетов.СоздатьНаборЗаписей();	
	НЗ.Прочитать();
	
	СохраненныеНастройки.Загрузить(НЗ.Выгрузить());

КонецПроцедуры // ЗаполнитьРанееСохраненныеНастройки()

&НаКлиенте
Процедура ВосстановитьНастройки(НаименованиеОтчета)

	Попытка
		Отбор = Новый Структура(); 
		Отбор.Вставить("НаименованиеОтчета", НаименованиеОтчета);
		//ПараметрыКомпоновки = ПолучитьИзСтроки(СохраненныеНастройки.НайтиСтроки(Отбор)[0].Параметры);
		ПараметрыКомпоновки = ДесериализоватьЗначение(СохраненныеНастройки.НайтиСтроки(Отбор)[0].Параметры);
	Исключение	
		//Сообщить(ОписаниеОшибки());
		ПараметрыКомпоновки = Неопределено;	
	КонецПопытки; 

КонецПроцедуры // ВосстановитьНастройки()

&НаСервере
Процедура ЗаписатьНастройки(ТекущийОбъект)

	// Удалим личшие настройки
	СтрокиУдаления = Новый Массив;
	
	Для каждого СтрНастройки Из СохраненныеНастройки Цикл
		Отбор = Новый Структура(); 
		Отбор.Вставить("Отчет", СтрНастройки.НаименованиеОтчета);
		Отбор.Вставить("Выгружать", Истина);		
		Отчет = ТекущийОбъект.Отчеты.НайтиСтроки(Отбор);
		Если Не Отчет.Количество() Тогда
			СтрокиУдаления.Добавить(СтрНастройки);			
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрУдаления Из СтрокиУдаления Цикл
		СохраненныеНастройки.Удалить(СтрУдаления);	
	КонецЦикла;
	
	НЗ = РегистрыСведений.тм_ПараметрыОтчетов.СоздатьНаборЗаписей();
	НЗ.Загрузить(СохраненныеНастройки.Выгрузить());
	НЗ.Записать();

КонецПроцедуры // ЗаписатьНастройки()

&НаСервереБезКонтекста
Функция ПоместитьВСтроку(Данные)

	Возврат ЗначениеВСтрокуВнутр(Данные);

КонецФункции // ПоместитьВСтроку()

&НаСервереБезКонтекста
Функция ПолучитьИзСтроки(СтрДанные)

	Возврат ЗначениеИзСтрокиВнутр(СтрДанные);

КонецФункции // ПоместитьВСтроку()
 
//&НаСервереБезКонтекста
//Функция ПоместитьРаписаниеВХранилище(ЗначениеXDTO)

//	Возврат Новый ХранилищеЗначения(СериализаторXDTO.ПрочитатьXDTO(ЗначениеXDTO));	

//КонецФункции // ПоместитьРаписаниеВХранилище()

#КонецОбласти 