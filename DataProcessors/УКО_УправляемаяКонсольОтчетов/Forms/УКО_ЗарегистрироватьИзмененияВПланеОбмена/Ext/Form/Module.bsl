#Область ОписаниеПеременных

&НаКлиенте
Перем ДлительнаяОперация Экспорт; // Служебная переменная для работы длительных операций

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)


	НастройкиОбработки = Новый Структура;
	НастройкиОбработки.Вставить("УведомлениеОЗавершенииДлительныхОпераций");
	НастройкиОбработки.Вставить("ЗвуковойСигналПоОкончанииДлительныхОпераций");
	ОбъектОбработки().УКО_НастройкиПользователя_ОбновитьЗначенияНастроек(НастройкиОбработки);
	
	АдресОбрабатываемыхДанных = Параметры.Адрес;
	
	ОбрабатываемыеДанные = ПолучитьИзВременногоХранилища(АдресОбрабатываемыхДанных);
	КоличествоСтрок = ОбрабатываемыеДанные.Количество();
	
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, СтрШаблон(НСтр("ru = 'Зарегистрировать изменения в плане обмена %1'; en = 'Register changes in exchange plan %1'"),
							УКО_СтрокиКлиентСервер_ТекстНекотороеКоличествоСтрок(КоличествоСтрок)));
		
	ПланОбменаСписокВыбора = Элементы.ПланОбмена.СписокВыбора;
	Для Каждого МетаданныеПланОбмена Из Метаданные.ПланыОбмена Цикл 
		
		ДобавлятьПланОбмена = Ложь;
		
		Выборка = ПланыОбмена[МетаданныеПланОбмена.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если Не Выборка.ЭтотУзел Тогда
				ДобавлятьПланОбмена = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ДобавлятьПланОбмена Тогда
			ПланОбменаСписокВыбора.Добавить(МетаданныеПланОбмена.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПланОбменаСписокВыбора) Тогда
		
		ПланОбмена = ПланОбменаСписокВыбора[0].Значение;
		
		ЗаполнитьУзлыПланаОбмена();
		ЗаполнитьРегистры();
		
	КонецЕсли;
	
	СписокВыбора = Элементы.Поле.СписокВыбора;
	
	ТЗОбрабатываемыеДанные = ПолучитьИзВременногоХранилища(АдресОбрабатываемыхДанных);
	Для Каждого Колонка Из ТЗОбрабатываемыеДанные.Колонки Цикл 
		
		Если УКО_ОбщегоНазначенияКлиентСервер_ЕстьСсылочныеТипы(Колонка.ТипЗначения, Истина) Тогда
			СписокВыбора.Добавить(Колонка.Имя, , , УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(Колонка.ТипЗначения));
		КонецЕсли;

	КонецЦикла;
	
	СписокВыбора = Элементы.ТипРегистрируемыхДанных.СписокВыбора;
	СписокВыбора.Добавить("Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.Ссылка", НСтр("ru = 'Ссылка'; en = 'Ref'"));
	
	Если ЗначениеЗаполнено(Элементы.Регистр.СписокВыбора) Тогда
		СписокВыбора.Добавить("Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.НаборЗаписей", НСтр("ru = 'Набор записей'; en = 'Recordset'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокВыбора) Тогда
		ТипРегистрируемыхДанных = СписокВыбора[0].Значение
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УКО_ДлительныеОперацииКлиент_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПланОбменаПриИзменении(Элемент)
	
	ЗаполнитьУзлыПланаОбмена();
	ЗаполнитьРегистры();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрируемыхДанныхПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();

КонецПроцедуры

&НаКлиенте
Процедура РегистрПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура УзлыПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЖурнал

&НаКлиенте
Процедура ЖурналПриАктивизацииСтроки(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Расшифровать(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Зарегистрировать(Команда)

	ВыполнитьОбработкуДанных(АдресОбрабатываемыхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	УКО_ОбработкаРезультатаКлиент_ОбработатьКомандуРасшифровать(ЭтаФорма, Элементы.Журнал.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПовторно(Команда)
	
	ВыполнитьОбработкуДанных(АдресОбрабатываемыхДанных, УКО_ОбработкаРезультатаКлиент_ДанныеВыделенныхСтрок(ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьЭлементыУправления()
	
	ТипРегистрируемыхДанныхСсылка = (ТипРегистрируемыхДанных = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.Ссылка");
	ТипРегистрируемыхДанныхНаборЗаписей = (ТипРегистрируемыхДанных = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.НаборЗаписей");
	
	Элементы.Поле.Видимость = ТипРегистрируемыхДанныхСсылка;
	Элементы.Регистр.Видимость = ТипРегистрируемыхДанныхНаборЗаписей;
	
	ЕстьОтмеченныеУзлы = Ложь;
	Для Каждого Узел Из Узлы Цикл 
		
		Если Узел.Пометка Тогда
			ЕстьОтмеченныеУзлы = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеУказаны = Ложь;
	Если ТипРегистрируемыхДанных = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.Ссылка" И ЗначениеЗаполнено(Поле) Тогда
		ДанныеУказаны = Истина;
	ИначеЕсли ТипРегистрируемыхДанных = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.НаборЗаписей" И ЗначениеЗаполнено(Регистр) Тогда
		ДанныеУказаны = Истина;
	КонецЕсли;
	
	Элементы.ФормаЗарегистрировать.Доступность = КоличествоСтрок > 0 И ЕстьОтмеченныеУзлы И ДанныеУказаны;
	
	ВыделенныеСтрокиЖурнала = ЗначениеЗаполнено(Элементы.Журнал.ВыделенныеСтроки);
	ТекущиеДанные = Элементы.Журнал.ТекущиеДанные;
	
	Элементы.ЖурналКонтекстноеМенюОбработатьПовторно.Доступность = ВыделенныеСтрокиЖурнала;
	Элементы.ЖурналКонтекстноеМенюРасшифровать.Доступность = ВыделенныеСтрокиЖурнала И ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзлыПланаОбмена()
	
	Узлы.Очистить();
	
	Выборка = ПланыОбмена[ПланОбмена].Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.ЭтотУзел Тогда
			Продолжить;
		КонецЕсли;
		
		Узлы.Добавить(Выборка.Ссылка,СтрШаблон("(%1) %2", СокрЛП(Выборка.Код), СокрЛП(Выборка.Наименование)), Истина);
		
	КонецЦикла;
	Узлы.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистры()
	
	СписокВыбора = Элементы.Регистр.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена[ПланОбмена].Состав Цикл 
		
		ОбъектМетаданных = ЭлементСостава.Метаданные;
		ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		
		ИмяОбъектаКоллекцииМетаданных = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(ПолноеИмяМетаданных);
		Если ИмяОбъектаКоллекцииМетаданных = "РегистрСведений"
				ИЛИ ИмяОбъектаКоллекцииМетаданных = "РегистрНакопления"
				ИЛИ ИмяОбъектаКоллекцииМетаданных = "РегистрБухгалтерии"
				ИЛИ ИмяОбъектаКоллекцииМетаданных = "РегистрРасчета" Тогда
				
			СписокВыбора.Добавить(ПолноеИмяМетаданных, ОбъектМетаданных.Имя,, БиблиотекаКартинок[ИмяОбъектаКоллекцииМетаданных]);
				
		КонецЕсли;
		
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенаРегистрацияИзменений(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		ОбновитьРезультатНаФорме(Результат);
	КонецЕсли;
	
	ЖурналКоличество = 0;
	УКО_ОбработкаРезультатаКлиент_ОбновитьДанныеЖурнала(Журнал, ЖурналКоличество);
	ОбработатьДанныеЖурналаНаСервере();
	
	// Развернуть все строки дерева
	Для Каждого Строка Из Журнал.ПолучитьЭлементы() Цикл 
		Элементы.Журнал.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ТекущийЭлемент = Элементы.СтраницаЖурнал;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРегистрациюИзменений(АдресДанных, ОбрабатываемыеСтроки)
	
	Если ОбрабатываемыеСтроки = Неопределено Тогда
		ОбщееКоличествоСтрок = КоличествоСтрок;
	Иначе
		ОбщееКоличествоСтрок = ОбрабатываемыеСтроки.Количество();
	КонецЕсли;
	
	ОбработаноСтрок = 0;
	ИндексНачалаПакета = 0;
	КоличествоСтрокВПакете = 1;
	
	ИмяПроцедурыОбработкиПрерыванияПользователем = "ОбработкаПрерыванияПользователем";
	ПодключитьОбработчикОжидания(ИмяПроцедурыОбработкиПрерыванияПользователем, 0.1, Истина);
	
	НачалоВыполнения = ТекущаяДата();
	ИнтервалОбновления = УКО_ДлительныеОперацииКлиентСервер_НачальныйИнтервалОжидания();
	Ошибок = 0;
	Пока Истина Цикл 
		
		// Отображение прогресса
		ПрогрессСостояния = Цел((ОбработаноСтрок * 100) / ОбщееКоличествоСтрок);
		ПрошлоВремени = ТекущаяДата() - НачалоВыполнения;
		ПояснениеСостояния = УКО_ОбработкаРезультатаКлиентСервер_ПояснениеСостояния(ОбработаноСтрок, ОбщееКоличествоСтрок, Ошибок, НачалоВыполнения, ПрошлоВремени);

		Состояние(НСтр("ru = 'Регистрация изменений в плане обмена (Ctrl + Break - прервать)'; en = 'Registration of changes in terms of exchange (Ctrl + Break - break)'"), ПрогрессСостояния, ПояснениеСостояния);
		ОбработкаПрерыванияПользователя();
		
		Если ОбработаноСтрок >= ОбщееКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
		// Подготавливаем пакет обрабатываемых строк
		ПакетОбрабатываемых = Новый Массив;
		Для ИндексСтроки = ИндексНачалаПакета По (ИндексНачалаПакета + КоличествоСтрокВПакете - 1) Цикл
			
			Если ОбрабатываемыеСтроки = Неопределено Тогда
				ПакетОбрабатываемых.Добавить(ИндексСтроки + 1);
			Иначе
				ПакетОбрабатываемых.Добавить(ОбрабатываемыеСтроки[ИндексСтроки]);
			КонецЕсли;

		КонецЦикла;
		
		РезультатОбработкиПакета = РегистрацияИзмененийОбновитьРезультатСервер(ПакетОбрабатываемых);
		Ошибок = Ошибок + РезультатОбработкиПакета.Ошибок;
		ВремяОбработкиСтроки = РезультатОбработкиПакета.ВремяОбработки / КоличествоСтрокВПакете;
		
		ИндексНачалаПакета = ИндексНачалаПакета + КоличествоСтрокВПакете;
		ОбработаноСтрок = ОбработаноСтрок + КоличествоСтрокВПакете;
		
		// Рассчитываем размер следующего пакета
		РасчетноеКоличествоСтрокВДиапазоне = Макс(Цел(ИнтервалОбновления / ВремяОбработкиСтроки), 1);
		ИнтервалОбновления = УКО_ДлительныеОперацииКлиентСервер_СледующийШагИнтервалаОжидания(ИнтервалОбновления);
		КоличествоСтрокВПакете = Мин(РасчетноеКоличествоСтрокВДиапазоне, ОбщееКоличествоСтрок - ИндексНачалаПакета);
		
	КонецЦикла;
	
	ОтключитьОбработчикОжидания(ИмяПроцедурыОбработкиПрерыванияПользователем);
	
КонецПроцедуры

&НаСервере
Функция РегистрацияИзмененийОбновитьРезультатСервер(ПакетОбрабатываемых)
	
	НачалоОбработки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатОбработки = ОбъектОбработки().УКО_ПланыОбмена_ЗарегистрироватьИзменения(ПолучитьИзВременногоХранилища(АдресОбрабатываемыхДанных), ПакетОбрабатываемых, ОтмеченныеУзлы(), РегистрируемыеДанные());
	ВремяОбработки = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОбработки);
	
	Возврат ОбъектОбработки().УКО_ОбработкаРезультата_ОбновитьРезультатНаФорме(ЭтаФорма, РезультатОбработки, ВремяОбработки);
	
КонецФункции

&НаСервере
Функция ЗапуститьРегистрациюИзмененийНаСервере(АдресДанных, ОбрабатываемыеСтроки, ФоновоеВыполнение = Истина)

	АдресРезультатаВыполнения = ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор);
	
	ПараметрыВыполнения = Новый Массив;
	
	ПараметрыВыполнения.Добавить(ПолучитьИзВременногоХранилища(АдресДанных));
	ПараметрыВыполнения.Добавить(ОбрабатываемыеСтроки);
	ПараметрыВыполнения.Добавить(ОтмеченныеУзлы());
	ПараметрыВыполнения.Добавить(РегистрируемыеДанные());

	Возврат ОбъектОбработки().УКО_ДлительныеОперации_Запустить("УКО_ПланыОбмена_ЗарегистрироватьИзменения", ПараметрыВыполнения, УникальныйИдентификатор, АдресРезультатаВыполнения, ФоновоеВыполнение);
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации() Экспорт
	
	ОписаниеСостояния = УКО_ДлительныеОперацииВызовСервера_ДанныеСостояния(ДлительнаяОперация.Идентификатор, ДлительнаяОперация.АдресРезультатаВыполнения);
	
	УКО_ДлительныеОперацииКлиент_СтандартныйОбработчикОжиданияДлительнойОперации(ЭтаФорма, ДлительнаяОперация,	ОписаниеСостояния);
		
	Если ОписаниеСостояния <> Неопределено И ОписаниеСостояния.Свойство("Результат") Тогда
		ОбновитьРезультатНаФорме(ОписаниеСостояния.Результат.Результат);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультатНаФорме(РезультатыОбработки) Экспорт
	
	ОбъектОбработки().УКО_ОбработкаРезультата_ОбновитьРезультатНаФорме(ЭтаФорма, РезультатыОбработки);
	
КонецПроцедуры

&НаСервере
Функция ОтмеченныеУзлы()
	
	Результат = Новый Массив;
	
	Для Каждого Узел Из Узлы Цикл 
		
		Если Узел.Пометка Тогда
			Результат.Добавить(Узел.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РегистрируемыеДанные()
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", ТипРегистрируемыхДанных);
	
	Если ТипРегистрируемыхДанных = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.Ссылка" Тогда
		РегистрируемыеЗначения = Поле;
	Иначе
		РегистрируемыеЗначения = Регистр;
	КонецЕсли;
	
	Результат.Вставить("Значение", РегистрируемыеЗначения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПрерыванияПользователем() Экспорт
	
	ЗавершенаРегистрацияИзменений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуДанных(АдресДанных, ОбрабатываемыеСтроки = Неопределено)
	
	ФоновоеВыполнение = УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне();
								
	УКО_ДлительныеОперацииКлиент_НачатьВыполнение(ЭтаФорма, НСтр("ru = 'Регистрация изменений в плане обмена'; en = 'Registration of changes in terms of exchange'"),
								"ЗавершенаРегистрацияИзменений", ДлительнаяОперация, ФоновоеВыполнение);
	
	Журнал.ПолучитьЭлементы().Очистить();
	АдресРезультатовОбработки = УКО_ВременноеХранилищеВызовСервера_Поместить(Новый Соответствие, УникальныйИдентификатор, УникальныйИдентификатор);
	
	Если ФоновоеВыполнение Тогда
		
		Результат = ЗапуститьРегистрациюИзмененийНаСервере(АдресДанных, ОбрабатываемыеСтроки);
		ЗаполнитьЗначенияСвойств(ДлительнаяОперация, Результат, "Идентификатор, АдресРезультатаВыполнения");
		
	Иначе
		
		ЗапуститьРегистрациюИзменений(АдресДанных, ОбрабатываемыеСтроки);
		ЗавершенаРегистрацияИзменений();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеЖурналаНаСервере()
	
	ДеревоЖурнала = РеквизитФормыВЗначение("Журнал");
	ОбъектОбработки().УКО_ОбработкаРезультата_ОбработатьДанныеЖурнала(ДеревоЖурнала);
	ЗначениеВРеквизитФормы(ДеревоЖурнала, "Журнал");
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов, ИсключатьNull = Истина) Экспорт
	
	Результат = ОписаниеТипов.Типы().Количество();
	Если ИсключатьNull Тогда
		
		Если ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
			Результат = Результат - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Получает состояние фонового задания длительной операции
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания
//  АдресРезультатаВыполнения - Строка - Адрес результата выполнения
//
// Возвращаемое значение:
//   Структура	- Результат структурой
//		* Статус - УКО_ДлительныеОперацииКлиентСервер - Статус длительной операции
//
Функция УКО_ДлительныеОперацииВызовСервера_ДанныеСостояния(Идентификатор, АдресРезультатаВыполнения) Экспорт
	
	Возврат ОбъектОбработки().УКО_ДлительныеОперации_ДанныеСостояния(Идентификатор, АдресРезультатаВыполнения);
	
КонецФункции
&НаКлиенте
// Инициализация структуры данных длительной операции
//
// Возвращаемое значение:
//   Структура - Данные длительной операции
//
Функция УКО_ДлительныеОперацииКлиент_ИнициализироватьДанные() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование");
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Состояние");
	Результат.Вставить("ДополнительныеПараметры");
	Результат.Вставить("Прогресс");
	Результат.Вставить("АдресРезультатаВыполнения");
	Результат.Вставить("ИнтервалОжидания");
	Результат.Вставить("Начало");
	Результат.Вставить("ИмяОбработчика");
	Результат.Вставить("УведомлениеОЗавершении");
	Результат.Вставить("ЗвуковойСигналПоОкончании");
	Возврат Результат;
	
КонецФункции
&НаСервере
// Помещает значение во временное хранилище
//
// Параметры:
//  Значение  - Произвольный - Произвольное значение
//  Адрес  - Строка - Адрес во временном хранилище
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Строка - Адрес во временном хранилище
//
Функция УКО_ВременноеХранилищеВызовСервера_Поместить(Значение, Адрес = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	Возврат ОбъектОбработки().УКО_ВременноеХранилище_Поместить(Значение, Адрес, УникальныйИдентификатор);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет есть ли в описании ссылочные типы
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, есть ссылочные типы
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЕстьСсылочныеТипы(ОписаниеТипов, ИсключаяПеречисления = Ложь) Экспорт
	
	Результат = Ложь;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл 
		
		Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип, ИсключаяПеречисления) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Обработка команды расшифровать
//
// Параметры:
//   Форма - Форма - Форма
//   ТекущиеДанные - ТекущиеДанные - Текущие данные
//   АктивнаяСтраница - Неопределено, Строка - Активная страница при открытии
//   ОбработкаЗавершения - Булево - Обрабатывается завершение
//
Процедура УКО_ОбработкаРезультатаКлиент_ОбработатьКомандуРасшифровать(Форма, ТекущиеДанные, АктивнаяСтраница = Неопределено, ОбработкаЗавершения = Ложь) Экспорт
	
	НомерСтроки = ТекущиеДанные.НомерСтроки;
		
	ОписаниеОповещенияЗавершение = Неопределено;
	Если ОбработкаЗавершения Тогда
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ЗавершенПросмотрДанных", Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСтроки) Тогда
		УКО_ФормыКлиент_ОткрытьРасшифровкуДанныхСтроки(УКО_ОбработкаРезультатаВызовСервера_ДанныеСтроки(Форма.АдресОбрабатываемыхДанных, НомерСтроки),
														Форма.АдресРезультатовОбработки, НомерСтроки, Форма, ОбработкаЗавершения, АктивнаяСтраница, ОписаниеОповещенияЗавершение);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает сокращенный идентификатор расширения
// Возвращаемое значение:
//   Строка	- Сокращенный идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширенияСокращенный() Экспорт 
	
	Возврат "УКО";
	
КонецФункции
&НаКлиенте
// Начать выполнение длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   Наименование - Строка - Имя операции
//   ИмяОбработчика - Строка - Имя обработчика
//   ДлительнаяОперация - ДанныеДлительнойОперации - Данные операции
//   ФоновоеВыполнение - Булево - Выполнять в фоне
//   ДополнительныеПараметры - Структура - Дополнительные параметры
//
Процедура УКО_ДлительныеОперацииКлиент_НачатьВыполнение(Форма, Наименование, ИмяОбработчика, ДлительнаяОперация, ФоновоеВыполнение = Истина, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДлительнаяОперация = Неопределено Тогда
		ДлительнаяОперация = УКО_ДлительныеОперацииКлиент_ИнициализироватьДанные();
	КонецЕсли;
	
	ДлительнаяОперация.Наименование = Наименование;
	ДлительнаяОперация.ИмяОбработчика = ИмяОбработчика;
	ДлительнаяОперация.Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительнаяОперация.ДополнительныеПараметры = ДополнительныеПараметры;
	
	ДлительнаяОперация.УведомлениеОЗавершении = Форма.НастройкиОбработки.УведомлениеОЗавершенииДлительныхОпераций;
	ДлительнаяОперация.ЗвуковойСигналПоОкончании = Форма.НастройкиОбработки.ЗвуковойСигналПоОкончанииДлительныхОпераций;
	
	Если ФоновоеВыполнение Тогда
		
		Форма.Доступность = Ложь;
		ДлительнаяОперация.ИнтервалОжидания = УКО_ДлительныеОперацииКлиентСервер_НачальныйИнтервалОжидания();
		Форма.ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", ДлительнаяОперация.ИнтервалОжидания, Истина);
		
	Иначе
		
		Состояние(ДлительнаяОперация.Наименование,,,Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст состояния обработки результата
//
// Параметры:
//   Обработано - Число - Количество обработанных строк
//   Количество - Число - Общее количество строк
//   КоличествоОшибок - Число - Количество ошибок
//   НачалоВыполнения - Дата - Дата, время начала выполнения
//   Прошло - Число - Количество секунд прошедшее с момента начала
//   Кратко - Булево - Краткое или полное пояснение (полное для отдельной формы, краткое для функции Состояние)
//
// Возвращаемое значение:
//   Строка - Пояснение состояния обработки результата
Функция УКО_ОбработкаРезультатаКлиентСервер_ПояснениеСостояния(Обработано, Количество, КоличествоОшибок, НачалоВыполнения, Прошло, Кратко = Истина) Экспорт
	
	Прошло = Цел(Прошло);
	ОцениваетсяТекст = НСтр("ru = 'оценивается...'; en = 'estimates...'");
	
	Если Обработано = 0 
			ИЛИ Прошло = 0 Тогда
		Осталось = Неопределено;
		СредняяСкорость = ОцениваетсяТекст;
		Если Обработано = 0 Тогда
			ПреставлениеОсталось = ОцениваетсяТекст;
		Иначе
			ПреставлениеОсталось = УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(0);
		КонецЕсли;
		ДатаОкончания = Неопределено;
	Иначе
		Осталось = ((Количество - Обработано) * Прошло)/Обработано;
		СредняяСкорость = Окр(Обработано / Прошло, 1);
		ПреставлениеОсталось = УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(Осталось);
		ДатаОкончания = НачалоВыполнения + Осталось;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата();
	Если ДатаОкончания = Неопределено Тогда	
		ПредставлениеОкончания = ОцениваетсяТекст;
	ИначеЕсли НачалоДня(ТекущаяДата) = НачалоДня(ДатаОкончания) Тогда
		ПредставлениеОкончания = Формат(ДатаОкончания,"ДЛФ=T");
	ИначеЕсли НачалоДня(ТекущаяДата + 24*60*60) = НачалоДня(ДатаОкончания) Тогда
		ПредставлениеОкончания = СтрШаблон(НСтр("ru = 'завтра %1'; en = 'tomorrow %1'"), Формат(ДатаОкончания,"ДЛФ=T"));
	Иначе
		ПредставлениеОкончания = Формат(ДатаОкончания, "ДЛФ=DT");
	КонецЕсли;

	Результат = СтрШаблон(НСтр("ru = 'Обработано: %1/%2, осталось: %3'; en = 'Processed: %1/%2, %3 left'"),	Обработано,	Количество,	ПреставлениеОсталось);
	
	Если ЗначениеЗаполнено(КоличествоОшибок) Тогда
		Результат = Результат + СтрШаблон(НСтр("ru = ', ошибок: %1'; en = ', errors: %1'"), КоличествоОшибок);
	КонецЕсли;
		
	Если Не Кратко Тогда
		Результат = Результат + Символы.ПС + СтрШаблон(НСтр("ru = 'Прошло: %1, Окончание: %2
			|Скорость (средняя) строк/сек: %3'; en = 'Elapsed: %1, Ending: %2
			|Speed (average) of rows/sec: %3'"), УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(Прошло), ПредставлениеОкончания, СредняяСкорость);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение строки до символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Символ - Строка - Стоп символ
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка до стоп символа
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(Строка, Символ, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = Неопределено Тогда
		Индекс = СтрНайти(Строка, Символ, , НачальныйИндекс);
	Иначе
		Индекс = СтрНайти(Строка, Символ, Направление, НачальныйИндекс);
	КонецЕсли;
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает начальный интервал ожидания
//
// Возвращаемое значение:
//   Число	- Начальный интервал ожидания
//
Функция УКО_ДлительныеОперацииКлиентСервер_НачальныйИнтервалОжидания() Экспорт
	
	Возврат 0.4;
	
КонецФункции
&НаКлиенте
// Обработчик ожидания длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   ДлительнаяОперация - ДанныеДлительнойОперации - Данные операции
//   СостояниеВыполнения - Структура - Состояние выполнения
//
Процедура УКО_ДлительныеОперацииКлиент_СтандартныйОбработчикОжиданияДлительнойОперации(Форма, ДлительнаяОперация, СостояниеВыполнения) Экспорт
	
	ОткрытаДополнительнаяФорма = (СтрНайти(Форма.ИмяФормы, "ДлительнаяОперация"));
	ЗаданиеЗавершено = Ложь;
	
	Если СостояниеВыполнения.Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Активно" Тогда
		
		ОписаниеСостоянииВыполнения = СостояниеВыполнения.Состояние;
		
		Если ОписаниеСостоянииВыполнения <> Неопределено Тогда
			
			Если ОписаниеСостоянииВыполнения.Свойство("Состояние") Тогда
				ДлительнаяОперация.Состояние = ОписаниеСостоянииВыполнения.Состояние;
			КонецЕсли;
			
			Если ОписаниеСостоянииВыполнения.Свойство("Индикатор") Тогда
				ДлительнаяОперация.Прогресс = ОписаниеСостоянииВыполнения.Индикатор;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстСостояния = ДлительнаяОперация.Состояние;
		// Обновление информации о выполнении
		Если ОткрытаДополнительнаяФорма Тогда
			
			ЭлементСостояние = Форма.Элементы.ДекорацияСостояние;
			ЭлементСостояние.Заголовок = ТекстСостояния;
			
			ТребуемаяВысота = СтрЧислоСтрок(ТекстСостояния);
			Если ЭлементСостояние.Высота <> ТребуемаяВысота Тогда
				ЭлементСостояние.Высота = ТребуемаяВысота;
			КонецЕсли;
			
			Форма.Индикатор = ДлительнаяОперация.Прогресс;
			
		Иначе
			
			ТекстСостояния = СтрПолучитьСтроку(ТекстСостояния, 1);
			Состояние(ДлительнаяОперация.Наименование, ДлительнаяОперация.Прогресс, ТекстСостояния, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
			
		КонецЕсли;
			
		ПрошлоСекунд = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДлительнаяОперация.Начало)/1000;
		Если ПрошлоСекунд > 5 И Не ОткрытаДополнительнаяФорма Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДлительнаяОперация", ДлительнаяОперация);
			ПараметрыФормы.Вставить("Прогресс", ДлительнаяОперация.Прогресс);
			
			Форма.Доступность = Истина;
			УКО_ФормыКлиент_ОткрытьДополнительную("ДлительнаяОперация", ПараметрыФормы, Форма);
			
		Иначе
			
			ДлительнаяОперация.ИнтервалОжидания = УКО_ДлительныеОперацииКлиентСервер_СледующийШагИнтервалаОжидания(ДлительнаяОперация.ИнтервалОжидания);
			Форма.ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", ДлительнаяОперация.ИнтервалОжидания, Истина);
			
		КонецЕсли;
		
	ИначеЕсли СостояниеВыполнения.Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Завершено" Тогда
		
		ЗаданиеЗавершено = Истина;
		
		Если ОткрытаДополнительнаяФорма Тогда
			ФормаИсточник = Форма.ВладелецФормы;
		Иначе
			ФормаИсточник = Форма;
		КонецЕсли;

		УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(ФормаИсточник, ФормаИсточник.ДлительнаяОперация, СостояниеВыполнения.Результат);
		
	ИначеЕсли СостояниеВыполнения.Статус = "Перечисление.УКО_СтатусФоновогоЗадания.АварийноЗавершено" Тогда
		
		ЗаданиеЗавершено = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка в фоновом задании'; en = 'Error in background job'"),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	КонецЕсли;
	
	Если ЗаданиеЗавершено Тогда
		
		Если ОткрытаДополнительнаяФорма Тогда
			Форма.Закрыть();
		Иначе
			Форма.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработчик завершения длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   ДлительнаяОперация - ДанныеДлительнойОперации - Данные операции
//   Результат - Структура - Результат выполнения
//
Процедура УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(Форма, ДлительнаяОперация, Результат) Экспорт
	
	Результат = Результат.Результат;
	
	// Оповещения (если окно неактивно)
	Если АктивноеОкно() <> Форма.Окно Тогда
		
		Если ДлительнаяОперация.ЗвуковойСигналПоОкончании Тогда
			#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент Тогда
				Сигнал();
			#КонецЕсли
		КонецЕсли;
		
		Если ДлительнаяОперация.УведомлениеОЗавершении Тогда
			Пояснение = СтрШаблон(НСтр("ru = 'Завершена длительная операция:
			|%1'; en = 'Completed a long-running operation:
			|%1'"), ДлительнаяОперация.Наименование);
			
			ПоказатьОповещениеПользователя(УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(), Форма.Окно.ПолучитьНавигационнуюСсылку(), Пояснение, Элементы.БиблиотекаКартинокУКО_Логотип32.Картинка, , Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ДлительнаяОперация.ИмяОбработчика, Форма, ДлительнаяОперация.ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиенте
// Открывает форму расшифровки данных строки
//
// Параметры:
//	Данные - Структура - Данные строки
//	АдресРезультатов - Строка - Адрес результатов обработки во временном хранилище
//	НомерСтроки - Число - Номер строки
//	ФормаВладелец - Форма - Форма владелец
//	ОбработкаЗавершения - Булево - Обработка завершения
//	АктивнаяСтраница - Строка - Идентификатор активной страницы (при запуске)
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРасшифровкуДанныхСтроки(Данные, АдресРезультатов, НомерСтроки, ФормаВладелец, ОбработкаЗавершения, АктивнаяСтраница = Неопределено, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", Данные);
	ПараметрыФормы.Вставить("АдресРезультатов", АдресРезультатов);
	ПараметрыФормы.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыФормы.Вставить("АктивнаяСтраница", АктивнаяСтраница);
	ПараметрыФормы.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);

	УКО_ФормыКлиент_ОткрытьДополнительную("РасшифровкаДанныхСтроки", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Получает следующий интервал ожидания
//
// Параметры:
//   ТекущийИнтервал - Число - Текущий интервал
//
// Возвращаемое значение:
//   Число	- Следующий интервал ожидания
//
Функция УКО_ДлительныеОперацииКлиентСервер_СледующийШагИнтервалаОжидания(ТекущийИнтервал) Экспорт
	
	Возврат Мин(ТекущийИнтервал * 1.5, 15);
	
КонецФункции
&НаСервереБезКонтекста
// Получает картинку по типу
//
// Параметры:
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип) Экспорт
	
	Если Тип = Тип("ТаблицаЗначений") Тогда 
		Результат = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъектаКоллекцииМетаданных = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(ОбъектМетаданных.ПолноеИмя());
			Результат = БиблиотекаКартинок[ИмяОбъектаКоллекцииМетаданных];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Открывает дополнительную/вспомогательную форму
//
// Параметры:
//	Имя - Строка - Имя формы
//	Параметры - Структура - Параметры формы (необязательный)
//	Владелец - Форма - Форма владелец
//	Уникальность - Произвольный - Уникальность (необязательный)
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии (необязательный)
//
Процедура УКО_ФормыКлиент_ОткрытьДополнительную(Имя, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Тогда
		ОбъектФорм = СтрШаблон("ВнешняяОбработка.%1%2.Форма.", УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения());
	Иначе
		ОбъектФорм = "ОбщаяФорма";
	КонецЕсли;
	
	ПолноеИмяФормы = СтрШаблон("%1.%2%3", ОбъектФорм, УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), Имя);
	
	Если Владелец = Неопределено Тогда
		РежимОткрытия = Неопределено;
	Иначе 
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, Параметры, Владелец, Уникальность,,,ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Сокращает текст до N символов
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   ВсегдаДобавлятьЗавершение - Булево - Всегда добавлять завершающий символы ...
//
// Возвращаемое значение:
//   Строка - Сокращенная строка
//
Функция УКО_СтрокиКлиентСервер_Сократить(Текст, Количество, ВсегдаДобавлятьЗавершение = Ложь) Экспорт
	
	Завершение = "...";
	НормальнаяДлина = Количество - СтрДлина(Завершение);
	
	Длина = СтрДлина(Текст);
	Если Длина > НормальнаяДлина Тогда
		
		Результат = Лев(Текст, НормальнаяДлина) + Завершение;
		
	Иначе
		
		Результат = Текст;
		Если ВсегдаДобавлятьЗавершение Тогда
			Результат = Результат + Завершение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает префикс объектов расширения
// Возвращаемое значение:
//   Строка	- Префикс объектов расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения() Экспорт 
	
	Возврат "УКО_";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, это режим запуска программы
//
// Возвращаемое значение:
//   Булево	- Истина, Режим запуска внешняя обработка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Экспорт
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
// Обработчик оповещений формы для длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   ИмяСобытия - Строка - Имя события
//   Параметр - Произвольный - Параметр оповещения
//   Источник - Форма - Источник оповещения
//
Процедура УКО_ДлительныеОперацииКлиент_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИзмененыНастройки" Тогда 
			
		УКО_НастройкиПользователяВызовСервера_ОбновитьЗначенияНастроек(Форма.НастройкиОбработки);
			
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
// Обновляет значение настроек
//
// Параметры:
//  Настройки  - Структура - Настройки
//
Процедура УКО_НастройкиПользователяВызовСервера_ОбновитьЗначенияНастроек(Настройки) Экспорт
	
	ОбъектОбработки().УКО_НастройкиПользователя_ОбновитьЗначенияНастроек(Настройки);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов, ИсключатьNull = Истина)
	
	Результат = Неопределено;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ИсключатьNull И Тип = Тип("Null") Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = Тип;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает значение свойства структуры
// Параметры:
//   Структура - Структура - Структура
//   Имя - Строка - Имя свойства
//   ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию, когда в данной структуре нет этого свойства
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры
Функция УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Структура = Неопределено, Имя = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	
	Если (ТипЗнч(Структура) = Тип("Структура")
				ИЛИ ТипЗнч(Структура) = Тип("ДанныеФормыСтруктура"))
			И Структура.Свойство(Имя) Тогда
		
		Значение = Структура[Имя];
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
&НаСервере
// Получает данные строки
//
// Параметры:
//  АдресДанных  - Строка - Адрес данных во временном хранилище
//  НомерСтроки  - Число - Номер строки
//
// Возвращаемое значение:
//   Структура - Данные строки
//
Функция УКО_ОбработкаРезультатаВызовСервера_ДанныеСтроки(АдресДанных, НомерСтроки) Экспорт
	
	ОбрабатываемыеДанные = ПолучитьИзВременногоХранилища(АдресДанных);
	СтрокаДанных = ОбрабатываемыеДанные[НомерСтроки - 1];
	
	Результат = Новый Структура;
	Для Каждого Колонка Из ОбрабатываемыеДанные.Колонки Цикл 
		Результат.Вставить(Колонка.Имя, СтрокаДанных[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Данные выделенных строк
//
// Параметры:
//   Форма - Форма - Форма
//
// Возвращаемое значение:
//   Массив - Выделенные строки
//
Функция УКО_ОбработкаРезультатаКлиент_ДанныеВыделенныхСтрок(Форма) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из Форма.Элементы.Журнал.ВыделенныеСтроки Цикл 
		ВыделеннаяСтрока = Форма.Журнал.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		УКО_ОбработкаРезультатаКлиент_ДобавлениеВыделенныхСтрок(Результат, ВыделеннаяСтрока);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиенте

Процедура УКО_ОбработкаРезультатаКлиент_ДобавлениеВыделенныхСтрок(ВыделенныеСтроки, Строка)
	
	Если Строка.ЭтоГруппа Тогда
		
		Для Каждого ВложеннаяСтрока Из Строка.ПолучитьЭлементы() Цикл 
			УКО_ОбработкаРезультатаКлиент_ДобавлениеВыделенныхСтрок(ВыделенныеСтроки, ВложеннаяСтрока);
		КонецЦикла;
		
	Иначе
		
		Если ВыделенныеСтроки.Найти(Строка.НомерСтроки) = Неопределено Тогда
			ВыделенныеСтроки.Добавить(Строка.НомерСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обновление данных журнала
//
// Параметры:
//   Родитель - СтрокаДерева - Строка дерева (родитель)
//   Количество - Число - Количество
//
Процедура УКО_ОбработкаРезультатаКлиент_ОбновитьДанныеЖурнала(Родитель, Количество) Экспорт
	
	Для Каждого СтрокаЖурнала Из Родитель.ПолучитьЭлементы() Цикл 
		
		Если СтрокаЖурнала.ЭтоГруппа Тогда
			
			КоличествоПодчиненныхСтрок = СтрокаЖурнала.ПолучитьЭлементы().Количество();
			Если ЗначениеЗаполнено(КоличествоПодчиненныхСтрок) Тогда
				СтрокаЖурнала.Представление = СтрШаблон("%1 (%2)", СтрокаЖурнала.Текст, КоличествоПодчиненныхСтрок);
			Иначе
				СтрокаЖурнала.Представление = СтрокаЖурнала.Текст;
			КонецЕсли;
			
			УКО_ОбработкаРезультатаКлиент_ОбновитьДанныеЖурнала(СтрокаЖурнала, Количество);
			
		Иначе 
			
			Количество = Количество + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает краткое представление интервала времени (в секундах)
//
// Параметры:
//   КоличествоСекунд - Число - Количество секунд в интервале
//
// Возвращаемое значение:
//   Строка - Представление интервала
//
Функция УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(КоличествоСекунд) Экспорт
	
	КоличествоСекунд = Цел(КоличествоСекунд);
	
	Если КоличествоСекунд = 0 Тогда
		Возврат НСтр("ru = 'меньше секунды'; en = 'less than a second'");
	КонецЕсли;
	
	СекундВМинуте = 60;
	СекундВЧасе = 60 * СекундВМинуте;
	СекундВДне = 24 * СекундВЧасе;
	СекундВНеделе = 7 * СекундВДне;
	СекундМесяце = 30 * СекундВНеделе;
	
	Результат = Новый Массив;
	ОстатокИнтервала = КоличествоСекунд;
	
	Месяцев = Цел(ОстатокИнтервала/СекундМесяце);
	ОстатокИнтервала = ОстатокИнтервала % СекундМесяце;
	Если ЗначениеЗаполнено(Месяцев) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 мес.'; en = '%1 m.'"), Месяцев));
	КонецЕсли;
	
	Недель = Цел(ОстатокИнтервала/СекундВНеделе);
	ОстатокИнтервала = ОстатокИнтервала % СекундВНеделе;
	Если ЗначениеЗаполнено(Недель) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 нед.'; en = '%1 w.'"), Недель));
	КонецЕсли;
	
	Дней = Цел(ОстатокИнтервала/СекундВДне);
	ОстатокИнтервала = ОстатокИнтервала % СекундВДне;
	Если ЗначениеЗаполнено(Дней) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 дн.'; en = '%1 d.'"), Дней));
	КонецЕсли;
	
	Часов = Цел(ОстатокИнтервала/СекундВЧасе);
	ОстатокИнтервала = ОстатокИнтервала % СекундВЧасе;
	Если ЗначениеЗаполнено(Часов) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 ч.'; en = '%1 h.'"), Часов));
	КонецЕсли;
	
	Минут = Цел(ОстатокИнтервала/СекундВМинуте);
	ОстатокИнтервала = ОстатокИнтервала % СекундВМинуте;
	Если ЗначениеЗаполнено(Минут) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 мин.'; en = '%1 min.'"), Минут));
	КонецЕсли;
	
	Если КоличествоСекунд < 15 * 60 Тогда
	
		Если Минут > 1 Тогда
			ОстатокИнтервала = Цел(ОстатокИнтервала / 15) * 15; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОстатокИнтервала) Тогда
			Результат.Добавить(СтрШаблон(НСтр("ru = '%1 сек.'; en = '%1 sec.'"), ОстатокИнтервала));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, производится ли выполнение длительных операций в фоне
//
// Возвращаемое значение:
//   Булево	- Истина, длительные операции выполняются в фоне
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне() Экспорт
	
	Возврат Ложь;
	//Возврат Не УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка();
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает картинку типа
//
// Параметры:
//  Тип  - Тип - Тип
//  ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(Тип, ОписаниеТипов = Неопределено) Экспорт
	
	Если Тип = Тип("Неопределено") Тогда 
		Картинка = Новый Картинка;
	ИначеЕсли Тип = Тип("Тип")
			ИЛИ Тип = Тип("ОписаниеТипов") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAABoSURBVDhPY/j//z8DJZgizSCLB6EB" + Символы.ВК + Символы.ПС + "mpqa/52dHLFikBx6eGF4wczMFKTZG6QwNjbyPwiD2CAxkBxBA2Ca0Q2AGULQAGQF" + Символы.ВК + Символы.ПС + "yC7AFdV4Y2EkGwCKiYryov+geAdhEBs5dpADdBAmZVKzNgDOWtNtpSsLpgAAAABJ" + Символы.ВК + Символы.ПС + "RU5ErkJggg=="));
	ИначеЕсли Тип = Тип("Число") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB+SURBVDhPY2AYBVhDwKFr538QdmnbAsbO7Vv/" + Символы.ВК + Символы.ПС + "EwoqkIIGmCKQJmQNaHyQHIp6mFq4JpgGm779YDEsBoCEMVyFYgDIC86tm8GuQncR" + Символы.ВК + Символы.ПС + "1Eb8BsA0gQzBYgBhLyDbTpYLQM4EGQKLDaRAhTkdvxfIiQW4HlC8w9IAsemAUDoZ" + Символы.ВК + Символы.ПС + "xPIAH+BkJrGgRacAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Строка") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB1SURBVDhPY2AYLOA/0CEg3ECpg0CGgIFD1044" + Символы.ВК + Символы.ПС + "m5ChIFthLoBrcmnbQrQByAqpawDIGyBs37kTb9ggewHkXbArkL1ASnjAwwvZAFLC" + Символы.ВК + Символы.ПС + "A6sBSC5Adi3+KAf5G2QzWhhgDXBC0YwsT3TU4jKUqgaQZRjxgUhswAAA9DFDYfgs" + Символы.ВК + Символы.ПС + "T48AAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Булево") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAFPSURBVDhPY2CgBvCfqN8QvsjwPwiHLTD47zhZ" + Символы.ВК + Символы.ПС + "/L/zFKn/QbP1/7tPUv7vPUn9v32X1P+AiQb/QWox7ARpJBZ4Nxv8p8gA4zwxTJc4" + Символы.ВК + Символы.ПС + "TZXA64CA7bL//bfJgtUYZoqBaRSXOEwSBwsG7ZX7H7xPDsUwkGan6RL/rVpFweL6" + Символы.ВК + Символы.ПС + "KRDasxrJKzADQIrcl8r+B2kCAeu9ImDN+rlC/09ePgIxIBliAMgl8LBwmAhxAUgR" + Символы.ВК + Символы.ПС + "yBC3JTJgQ9A1g9ToJSFcAjcgdK4B3NkgQ0A2YtMMUuRarA93CdyAoBkIA2AuUfcT" + Символы.ВК + Символы.ПС + "gTsbOVCcciAGgFwCNyAQmECIBQ7pemClIJfADfDtJN4A+0SIASCXwA0AJU/PKgNg" + Символы.ВК + Символы.ПС + "yEr8d8nT+68TLfJfL1b8v32G9n/jGPn/FrGq/3WCgXyg5tqpRWADQC7BSJGkugTD" + Символы.ВК + Символы.ПС + "AM9KiEtcS/UJusQ+URczU5GTswEMEielMbjVjwAAAABJRU5ErkJggg=="));
	ИначеЕсли Тип = Тип("ВидДвиженияНакопления") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAz0lEQVQ4T2P4//8/RRirICkYQyB4" + Символы.ВК + Символы.ПС + "n/x/EEYXx4UxBAJ3yP33WSMDZKKKw/C6dev+gzCMD5cAafTbJPsfRDvPkAQbYlIm" + Символы.ВК + Символы.ПС + "ClcIwiCNiYmJKGJwhtcKGbBGEDarFvlvkCeEYgA2zSCMwgFhx6kSYM3IYrg0gzCG" + Символы.ВК + Символы.ПС + "gIa/6H/dZGEgE8LHpxmEsQrCMCHNIIxVEISJ0QzCWAWJ1QzCGALYND9Ldvt/014N" + Символы.ВК + Символы.ПС + "ju84acDl4YpAGJfNIE2HxBjgeIYoL1wNikKQAch8YjBWQVIwVkHi8X8GAOxy2Avy" + Символы.ВК + Символы.ПС + "wzimAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("ВидДвиженияБухгалтерии")
			ИЛИ Тип = Тип("ВидСчета") Тогда 
		Картинка = БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли Тип = Тип("Дата") Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAGPSURBVDhPrZPLSwJRFMb7k3rRH1GuWrRrHbQO" + Символы.ВК + Символы.ПС + "bNIcpUarTdSqx6akkoxCQkMqyBatIoJIIyeK6F2Olho6z69zb1hN2gNq4Mc55zvn" + Символы.ВК + Символы.ПС + "fPfCcOvq/uPTk2Ne3MbAOFmXcL0zCuQPeV1LY/O2c3c3p0Eix9fRAHnNAyt/8qUW" + Символы.ВК + Символы.ПС + "X/DBbrAxAXmp69fE50W7wfxqDHJqH/LRD9BMNnMLaWSg2sAsXsEsXMFisQLVFf2t" + Символы.ВК + Символы.ПС + "rxZqGxjZNIxcGk/9XVAcLZznmRGY2WOU4rO8NqlvlZTvDbgRLTH4EsWK6fcGd3sw" + Символы.ВК + Символы.ПС + "PqBTrjiawSLTK7lVvKl9A/0yAY3QL7fxJHRCaWtCccpN9avGau0iATN/XsMgEoF2" + Символы.ВК + Символы.ПС + "GiOi7/EsSkuN0M6YHuO5SrmZkyENeT/9hZVlqMdhqGk7mdYG0pegUe81D8NQjiAF" + Символы.ВК + Символы.ПС + "PHaDueVFqKkgyqlZPPa003A9Jz/ejXIy+KaxnvFwgEG/y24wFQrx6+sXWzDu93+k" + Символы.ВК + Символы.ПС + "TxTsBpOhkFcY8MI/LBJu+AMuQqhC8jvRKzohiIL9Mf3lRb8A8+FJK+/UducAAAAA" + Символы.ВК + Символы.ПС + "SUVORK5CYII="));
		Если ОписаниеТипов <> Неопределено Тогда
			Если ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC42/Ixj3wAAAcNJREFUOE+NU9suQ0EUPf/iDyTiI0g8eheJROIbCK8IEW2K" + Символы.ВК + Символы.ПС + "JkhoXB4qxKWkfdC4tklzSvUitIi6t6Vu1Vq6hjk9cwgeTiYzZ9Zlr71Ha2/VNPPX" + Символы.ВК + Символы.ПС + "2T/YPDM/h16HE119g2LlnufWu9wr4PnVJTinZqEfxHGXu8dToYCrTAZBfR9Drmnw" + Символы.ВК + Символы.ПС + "v5XEICgrYCekowTgrfSO12IRVU19yD+/IPf4hLv7PHwb23SikAgC9/IiguF9BUx1" + Символы.ВК + Символы.ПС + "EkjwdSaH9E0G3o1d8L50orE2p2vmG5jKJKCyBJ9d3iJ1fgXb2KSRicaA9GjcsE1l" + Символы.ВК + Символы.ПС + "aZsEB6m0UJbgo9MLrPl3RLAixG77MLIPeVGzGUxlElS32RFKnAplghOpc4QiCfQ4" + Символы.ВК + Символы.ПС + "Rj4JOnoHBDhXX6sE5gnG0DAcxsJmRAFftzRiL54ULTYc3GSzKjgQE8p0YFaOHp0h" + Символы.ВК + Символы.ПС + "cniCQDhaccBa2GeZtucLTGUSSNsSvJdIYtHrr2TALnBIWHMkmRbKVttmsB47xsDo" + Символы.ВК + Символы.ПС + "RKULrIMT5i0PCdO2BmYFu1d8ykQqk7i6vqXUnK2rETXTNpXdHh86v8IzBsk823Ri" + Символы.ВК + Символы.ПС + "G3eJPrNVTJuBsWba/vUtSCL5Gtlntorrv1/jT8/1r7MPBZCljqnY77MAAAAASUVO" + Символы.ВК + Символы.ПС + "RK5CYII="));
			ИначеЕсли ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAIuSURBVDhPrZPbTxNREMb5Y3xXo/HZZ9TE8GB8" + Символы.ВК + Символы.ПС + "8UFNaGJMrHcboNuKULsGGxUTKTWxSm2slhDTJVVMhBB80BgKQu1l2ULbZQu90QK9" + Символы.ВК + Символы.ПС + "bbef52yhTSOoD57kl8nMOfPNZCanre1/HHnxkQEJDhT+Yx9WZyxAfkH194rR9y11" + Символы.ВК + Символы.ПС + "v30aBgmqGM8cRnhcj1qe3zfmfW1Eq8DEM4Tfav4Zr4NpFXC85xD2zyL88y+QN5lU" + Символы.ВК + Символы.ПС + "An1s7+8CypYIZVNEjdpdiL8bb9yXN/cWqGZCqGZDyPVokD55TGX7BQslE0TRa1d9" + Символы.ВК + Символы.ПС + "hdzXiuk/C6hCJIlCkwJ8BBarHc+dbthcHgy9csEw8BRahu1uDJLOoLr2vQWZ+FTA" + Символы.ВК + Символы.ПС + "PGhDKp1FYVlAIJrARjik2tMXtU0RKiDHJ1EhyPEp5HTnkD5xBD3sEyTTGZRW4yhK" + Символы.ВК + Символы.ПС + "Ig5csCAhRCEEI+BjCXR2mevDdIyNoSJwBE/TRjywjrhAj1zYRrGi4LhxFOO+KOYi" + Символы.ВК + Символы.ПС + "KaxkS7hlerwjMOpGOehCOdQKNzGFZZZBsSQjKOVxtKMT3gUJ00tZTOru4Bqz08GI" + Символы.ВК + Символы.ПС + "+w3K/pco+e3YuNGBVPshlWHHOxRkBQev2BpMCzl4fCJ+SFu4rGfrHVidTrV9OfYZ" + Символы.ВК + Символы.ПС + "1fXZBvoHg1gS1xEJCpib59XK3JcAPsz4sSIlcUqjqwsMOZ0GXa8B/WaG0I1+UxdB" + Символы.ВК + Символы.ПС + "p1qyLohrSfC+RdL2bfi+ziNGktvPX8XZm/ebq9zvV9N9X2IGcP2eBVq9Cdq7D2li" + Символы.ВК + Символы.ПС + "I/kXf1WIeuufWvwAAAAASUVORK5CYII="));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAABFSURBVDhPY2AYPiA7O/s/CMN8BOMj0Q14fYvL" + Символы.ВК + Символы.ПС + "ADQDcRtCyACQQVA12A0hwQC4N1G8NKQMIC8M8AYgUgiTnw6GT5Yg2ScAOrt7BzPC" + Символы.ВК + Символы.ПС + "tocAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAH5SURBVDhPrZPfT1JhGMf507qQOaVaxpRumZCQ" + Символы.ВК + Символы.ПС + "5fLGiyhlaxEGGmvFKjEhRTaXsxyWDLDjRpScZjWYVMOSOQMn1Fi1fuqn8542Fp20" + Символы.ВК + Символы.ПС + "G8/2XJy9z/t93u/387463X5+r5LnnCtxLxH3UZYiNrX+/Bfre857nexnpyaxGLGy" + Символы.ВК + Символы.ПС + "szHI90IfP8p3WLjVzsflU2TCnewpICa+L4RITR2nmhuglD5JadlDMtBOMW5hfvjg" + Символы.ВК + Символы.ПС + "/wVyD1xMnDcg3TCRvGZEnnYQPKsnpmzeVUB4E9MzSv0s3UYKdfA130NN7uZTYZSY" + Символы.ВК + Символы.ПС + "30hZsjHnNfDPHIR3Nq+SuNJGJetBCnawsWjlzXwnxUcuVeDlXTPjA81MDZm0NlTv" + Символы.ВК + Символы.ПС + "eaXRd5gva2MkAkaqj+28SypZZEeI+o7wNmohcEavliZIIfBkskv1Kc8OEuzXM+Nu" + Символы.ВК + Символы.ПС + "UZsTkxfw9R7A39fEyG4Cwvt20UEudZlxbxu5xAlycRvZmJUX9y08f6iIXjyEPGNW" + Символы.ВК + Символы.ПС + "c9CcIB0yU33azYe8l9TEMSoZO5UlO5tpG6VUF+Vnl+oo77lbtQLSdRPbhd4GAp+z" + Символы.ВК + Символы.ПС + "Perl+ZvEtKtFKyDS31Imbq3crBNYX7CyplweQWJd9jeQ0FgQ6YuJ30pzdQKVlF1l" + Символы.ВК + Символы.ПС + "L0jUVmcbSGgFhgxOQWA1HWbM0UTU04o4atjZzKhDjxwPMXz6N4mY0rufD1j3C7vu" + Символы.ВК + Символы.ПС + "vw0TxEc9AAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("МоментВремени") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADuSURBVDhPY/j//z9FGIXjbmHBEaqlZQaikcXxYTjDxdqa" + Символы.ВК + Символы.ПС + "N0lW9k4BH9/vZBmZ2/4GBjzICnFhBgcHh/8gDDTgfz4///8SLq7/QEP+u1pZgcUJ" + Символы.ВК + Символы.ПС + "YbhJIBeAbC7k5f2dIi19O1BPjxvZJlwYhROvoMAWpapqCqKRxfFhrIKkYKyCMKyS" + Символы.ВК + Символы.ПС + "1N+gXT0ZyMSUcwKKg+QxJJCxcd5EIIVdDoRB8lglYBhoA5DCLgfCIHmsEjAMUgDE" + Символы.ВК + Символы.ПС + "NhHVq8DOhYo1QPk2IHmsGmEYpADkV4a0mRgYGgbYNcIwSAHIJopcgC6GjAkaQI1Y" + Символы.ВК + Символы.ПС + "aAD5FV0chCFh0N8AAGaTn8a00cVlAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("Граница") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADzSURBVDhPY/j//z8KdnBwAFKoYvgwCidMQ4Pbxcrqf5CO" + Символы.ВК + Символы.ПС + "DheyOD4MZ8QrKIilSkndz+fn/58oJ3fTzdKSKEPATnawt//vYW7+v4CP738JF9f/" + Символы.ВК + Символы.ПС + "XCGh/y7W1v/BcgQw3KQYJSWxFCmpu3kCAiAXXHe3sOBEtgkXRuFEqqmxgmz2NzBg" + Символы.ВК + Символы.ПС + "QRbHhzEEQM5CF8OHMQSQDVBJ6m/Qrp4M5yNjJ6A4SB5DAtkA47yJcDY2DJLHEERz" + Символы.ВК + Символы.ПС + "AZyNDYPkMQTRDQBim4jqVWDnQsUaoHwbkDxBA0B+ZUibiYGhYUDYAJBNFLkAxsaG" + Символы.ВК + Символы.ПС + "CRpAjVhoAPkVxkfGkDDobwAAFxmTw3vLbs8AAAAASUVORK5CYII="));
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это ссылочный тип
//
// Параметры:
//  Тип  - Тип - Тип
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, ссылочный тип
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип, ИсключаяПеречисления = Ложь) Экспорт
	
	ПростойТип = УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип);
	Результат = Не ПростойТип;
	Если ИсключаяПеречисления Тогда 
		
		#Если Сервер Тогда
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Результат = Ложь;  
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это простой тип
//
// Параметры:
//   Тип - Тип - Тип
//
// Возвращаемое значение:
//   Булево - Если тип простой
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип)
	
	Результат = Тип = Тип("Null") ИЛИ Тип = Тип("Неопределено") ИЛИ Тип = Тип("Число") ИЛИ Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") 
				ИЛИ Тип = Тип("УникальныйИдентификатор") ИЛИ Тип = Тип("ХранилищеЗначения") ИЛИ Тип = Тип("Тип") ИЛИ Тип = Тип("МоментВремени") 
				ИЛИ Тип = Тип("Структура") ИЛИ Тип = Тип("ОписаниеТипов") ИЛИ Тип = Тип("ВидДвиженияБухгалтерии") ИЛИ Тип = Тип("ВидДвиженияНакопления")
				ИЛИ Тип = Тип("ВидСчета") ИЛИ Строка(Тип) = "НеизвестныйОбъект";
				
	#Если Сервер Тогда
		Результат = Результат ИЛИ Тип = Тип("РезультатЗапроса");
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает картинку по описание типов
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка описания типов
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(ОписаниеТипов) Экспорт
	
	Если ОписаниеТипов = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	КонецЕсли;
	
	КоличествоТипов = УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов);
	
	Если КоличествоТипов = 0 Тогда 
		
		Картинка = Новый Картинка;
		
	ИначеЕсли КоличествоТипов > 1 Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAWUlEQVQ4T92OQQrAQAgD85o+pp/y" + Символы.ВК + Символы.ПС + "6WkVBFlCSdlDoYfJIeogSG5REYDNowBnUDEPVipcQe8l3dmCe85JdsnfBF2+oUIJ" + Символы.ВК + Символы.ПС + "jgBX5rypcAXqy4rvBYptgYssfYgLqgc0Wk0lF3MAAAAASUVORK5CYII="));
		
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов), ОписаниеТипов);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение набора символов
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НаборСимволов - Строка - Набор символов
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка
//
Функция УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Строка, НаборСимволов, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = "";
	
	Для Индекс = 1 По СтрДлина(НаборСимволов) Цикл 
		Результат = Результат + УКО_СтрокиКлиентСервер_РазборПропуститьСимвол (Строка, Сред(НаборСимволов, Индекс, 1), НачальныйИндекс, СмещатьИндекс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_РазборПропуститьСимвол(Строка, Символ, НачальныйИндекс, СмещатьИндекс = Истина)
	
	Результат = "";
	
	Если Сред(Строка, НачальныйИндекс, 1) = Символ Тогда
		
		Результат = Символ;
		
		Если СмещатьИндекс Тогда
			НачальныйИндекс = НачальныйИндекс + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст "n строк" с верным окончанием
//
// Параметры:
//   Количество - Число - Количество строк
//
// Возвращаемое значение:
//   Строка - Текст "n строк" с верным окончанием
//
Функция УКО_СтрокиКлиентСервер_ТекстНекотороеКоличествоСтрок(Количество) Экспорт
	
	Возврат СтрокаСЧислом(НСтр("ru = '%1 строк; %1 строка; %1 строки; %1 строки; %1 строк; %1 строк';
								|en = '%1 rows; %1 row; %1 rows; %1 rows; %1 rows; %1 rows'"),	Количество, ВидЧисловогоЗначения.Количественное);
	
КонецФункции
