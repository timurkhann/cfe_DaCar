#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ГруппаИнформацияКартинка.Картинка = Элементы.БиблиотекаКартинокУКО_Информация.Картинка;
	Элементы.УбратьКомментарииВТексте.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьКомментарииВТексте.Картинка;
	Элементы.ВыражениеКонтекстноеМенюУбратьКомментарииВТексте.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьКомментарииВТексте.Картинка;
	Элементы.ЗакомментироватьТекст.Картинка = Элементы.БиблиотекаКартинокУКО_ЗакомментироватьТекст.Картинка;
	Элементы.ВыражениеКонтекстноеМенюЗакомментироватьТекст.Картинка = Элементы.БиблиотекаКартинокУКО_ЗакомментироватьТекст.Картинка;
	
	Режим = Параметры.Режим;
	КодЯзыкаПрограммирования = ОбъектОбработки().УКО_ОбщегоНазначения_КодЯзыкаПрограммирования();
	
	ИмяПеременной = УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения (КодЯзыкаПрограммирования);
	
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, СтрШаблон(НСтр("ru = 'Редактирование выражения %1'; en = 'Edit expression %1)'"), Параметры.Заголовок));
	
	Выражение = Параметры.Выражение;
	
	Элементы.ГруппаИнформацияТекст.Заголовок = СтрШаблон(Элементы.ГруппаИнформацияТекст.Заголовок, ИмяПеременной);
	Элементы.ПоказатьШаблоны.Пометка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблоныНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Код;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакомментироватьТекст(Команда)
	
	УКО_ОбщегоНазначенияКлиент_ОбработкаВыделенногоТекстаПоАлгоритму(Элементы.Выражение, Выражение,
						"Перечисление.УКО_АлгоритмыОбработкиТекста.Закомментировать");
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьКомментарииВТексте(Команда)
	
	УКО_ОбщегоНазначенияКлиент_ОбработкаВыделенногоТекстаПоАлгоритму(Элементы.Выражение, Выражение,
						"Перечисление.УКО_АлгоритмыОбработкиТекста.УбратьКомментарии");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьИЗакрыть(Команда)
	
	Закрыть(Выражение);
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблоны(Команда)
	
	ЭлементКнопка = Элементы.ПоказатьШаблоны;
	ЭлементКнопка.Пометка = Не ЭлементКнопка.Пометка;
	
	Элементы.Шаблоны.Видимость = ЭлементКнопка.Пометка;
	
	Если Шаблоны.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьДеревоШаблонов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВставкаСсылкиНаОбъектБД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВставкаСсылкиНаОбъектЗакончена", ЭтотОбъект);
	УКО_ФормыКлиент_ОткрытьВставкуСсылкиНаОбъектБД(ЭтаФорма, Оповещение, Элементы.Выражение.ВыделенныйТекст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоШаблонов()

	Если Режим = "Перечисление.УКО_РежимРедактированияВыражения.Параметр" Тогда
		ИмяМакета = "УКО_ШаблоныРедактированияВыраженияПараметр";
	ИначеЕсли Режим = "Перечисление.УКО_РежимРедактированияВыражения.ВнешнийИсточник" Тогда
		ИмяМакета = "УКО_ШаблоныРедактированияВыраженияВнешнегоИсточника";
	КонецЕсли;
	
	Макет = ОбъектОбработки().ПолучитьМакет(ИмяМакета);
	
	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл 
		
		Если КодЯзыкаПрограммирования = УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() Тогда
			НомерКолонки = 2;
		ИначеЕсли КодЯзыкаПрограммирования = УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Тогда
			НомерКолонки = 3;
		КонецЕсли;
		
		НоваяСтрока = Шаблоны.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Имя = Макет.Область(НомерСтроки, 1).Текст;
		НоваяСтрока.Код = СтрШаблон(Макет.Область(НомерСтроки, НомерКолонки).Текст, УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения (КодЯзыкаПрограммирования));
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВставкаСсылкиНаОбъектЗакончена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Выражение.ВыделенныйТекст = Результат;
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код русского языка
// Возвращаемое значение:
//   Строка	- Код русского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() Экспорт
	Возврат "ru";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код английского языка
// Возвращаемое значение:
//   Строка	- Код английского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Экспорт
	Возврат "en";
КонецФункции
&НаКлиенте
// Обработка выделенного текста по алгоритму комментировать и др.
//
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы содержащий текст
//   Текст - Строка - Текст
//   ТипАлгоритма - ТипАлгоритма - Тип алгоритма
//
Процедура УКО_ОбщегоНазначенияКлиент_ОбработкаВыделенногоТекстаПоАлгоритму(Элемент, Текст, ТипАлгоритма) Экспорт 
	
	ГраницыВыделения = УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элемент);
	
	Если ГраницыВыделения.КонецКолонки = 1 И ГраницыВыделения.НачалоСтроки <> ГраницыВыделения.КонецСтроки Тогда
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки - 1;
	КонецЕсли;
	
	ВыделенныйТекст = "";
	Для НомерСтроки = ГраницыВыделения.НачалоСтроки По ГраницыВыделения.КонецСтроки Цикл 
		
		ВыделенныйТекст = ВыделенныйТекст + СтрПолучитьСтроку(Текст, НомерСтроки);
		Если НомерСтроки <> ГраницыВыделения.КонецСтроки Тогда
			ВыделенныйТекст = ВыделенныйТекст + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйВыделенныйФрагмент = УКО_ОбщегоНазначенияКлиент_ОбработкаТекстаПоАлгоритму(ВыделенныйТекст, ТипАлгоритма);
	
	ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(Текст, ГраницыВыделения.КонецСтроки));
	Элемент.УстановитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, 1, ГраницыВыделения.КонецСтроки, ДлинаПоследнейСтроки + 1);
	
	Элемент.ВыделенныйТекст = НовыйВыделенныйФрагмент;
	
	ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(НовыйВыделенныйФрагмент, СтрЧислоСтрок(НовыйВыделенныйФрагмент)));
	Элемент.УстановитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, 1, ГраницыВыделения.КонецСтроки, ДлинаПоследнейСтроки + 1);
	
КонецПроцедуры
&НаКлиенте
// Получает границы выделения текстового документа
//
// Параметры:
//	Элемент - Элемент - Элемент текстовый документ
//
// Возвращаемое значение:
//   Структура - Описание границы выделения
//
Функция УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элемент) Экспорт
	
	Результат = Новый Структура("НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки");
	Элемент.ПолучитьГраницыВыделения (Результат.НачалоСтроки, Результат.НачалоКолонки, Результат.КонецСтроки, Результат.КонецКолонки);
	
	Возврат Результат;

КонецФункции
&НаКлиенте

Функция УКО_ОбщегоНазначенияКлиент_ОбработкаТекстаПоАлгоритму(Текст, ТипАлгоритма)
	
	НовыйТекст = "";
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	
	Если ТипАлгоритма = "Перечисление.УКО_АлгоритмыОбработкиТекста.Закомментировать" Тогда
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			НовыйТекст = НовыйТекст + "//" + СтрПолучитьСтроку(Текст, НомерСтроки);
			Если НомерСтроки <> КоличествоСтрок Тогда
				НовыйТекст = НовыйТекст + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипАлгоритма = "Перечисление.УКО_АлгоритмыОбработкиТекста.УбратьКомментарии" Тогда
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			
			Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
			// Ищем //
			ЗаменятьБлок = Истина;
			ПозицияСимволовКомментария = СтрНайти(Строка, "//");
			Если ПозицияСимволовКомментария <> 0 Тогда
				// Проверим есть ли другие значимые символы перед // может быть строка "Поле1 КАК Поле1, //Поле1"
				Для Сч = 1 По ПозицияСимволовКомментария - 1 Цикл 
					Если СтрНайти(" " + Символы.Таб, Сред(Строка,Сч, 1)) = 0 Тогда
						ЗаменятьБлок = Ложь;
					КонецЕсли;
				КонецЦикла;
			Иначе 
				ЗаменятьБлок = Ложь;
			КонецЕсли;
			
			Если ЗаменятьБлок Тогда
				НовыйТекст = НовыйТекст + Лев(Строка, ПозицияСимволовКомментария - 1) + Сред(Строка, ПозицияСимволовКомментария + 2);
			Иначе 
				НовыйТекст = НовыйТекст + Строка;
			КонецЕсли;
			
			Если НомерСтроки <> КоличествоСтрок Тогда
				НовыйТекст = НовыйТекст + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйТекст;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя переменной для возврата значений редактирование выражения
// Параметры:
//   КодЯзыка - Строка - Код языка
// Возвращаемое значение:
//   Строка	- Имя переменной
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения(КодЯзыка) Экспорт
	Возврат НСтр("ru = 'Результат'; en = 'Result'", КодЯзыка);
КонецФункции
&НаКлиенте
// Открывает форму вставки ссылки на объект БД
//
// Параметры:
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	ВыделенныйТекст - Строка - Выделенный текст
//
Процедура УКО_ФормыКлиент_ОткрытьВставкуСсылкиНаОбъектБД(ФормаВладелец, ОписаниеОповещенияЗавершение, ВыделенныйТекст) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыделенныйТекст", ВыделенныйТекст);
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ВставкаСсылкиНаОбъектБД", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиенте
// Открывает дополнительную/вспомогательную форму
//
// Параметры:
//	Имя - Строка - Имя формы
//	Параметры - Структура - Параметры формы (необязательный)
//	Владелец - Форма - Форма владелец
//	Уникальность - Произвольный - Уникальность (необязательный)
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии (необязательный)
//
Процедура УКО_ФормыКлиент_ОткрытьДополнительную(Имя, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Тогда
		ОбъектФорм = СтрШаблон("ВнешняяОбработка.%1%2.Форма.", УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения());
	Иначе
		ОбъектФорм = "ОбщаяФорма";
	КонецЕсли;
	
	ПолноеИмяФормы = СтрШаблон("%1.%2%3", ОбъектФорм, УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), Имя);
	
	Если Владелец = Неопределено Тогда
		РежимОткрытия = Неопределено;
	Иначе 
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, Параметры, Владелец, Уникальность,,,ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает префикс объектов расширения
// Возвращаемое значение:
//   Строка	- Префикс объектов расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения() Экспорт 
	
	Возврат "УКО_";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, это режим запуска программы
//
// Возвращаемое значение:
//   Булево	- Истина, Режим запуска внешняя обработка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Экспорт
	
	Возврат Истина;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
