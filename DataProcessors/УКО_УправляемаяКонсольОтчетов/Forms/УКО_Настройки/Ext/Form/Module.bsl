#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РабочиеДанные = Параметры.РабочиеДанные;
	
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, НСтр("ru = 'Настройки'; en = 'Settings'"));
	ОбъектОбработки().УКО_Формы_ЗаполнитьСписокВыбораЯзыкПрограммирования (Элементы.ЯзыкПрограммирования, Истина);
	ОбъектОбработки().УКО_Формы_ЗаполнитьСписокВыбораМаксимальноеКоличествоВыводимыхСтрок (Элементы.МаксимальноеКоличествоВыводимыхСтрок);
	ОбъектОбработки().УКО_Формы_ЗаполнитьСписокВыбораРасшифровкаТаблицЗначений (Элементы.РасшифровкаТаблицЗначений);
	
	СписокВыбора = Элементы.ДанныеПриЗапуске.СписокВыбора;
	СписокВыбора.Добавить("Перечисление.УКО_ТипыХраненияДанных.ПустаяСсылка", НСтр("ru = 'Пустые'; en = 'Empty'"));
	СписокВыбора.Добавить("Перечисление.УКО_ТипыХраненияДанных.Файл", НСтр("ru = 'Файл'; en = 'File'"));
	СписокВыбора.Добавить("Перечисление.УКО_ТипыХраненияДанных.Настройка", НСтр("ru = 'Настройка'; en = 'Settings'"));
	
	ИменаНастроек.Добавить("СокращенныйЗаголовокОсновногоОкна");
	ИменаНастроек.Добавить("ИспользоватьКонструкторЗапросаТолстогоКлиента");
	ИменаНастроек.Добавить("ВыделятьОсобыеЗначенияВРезультате");
	ИменаНастроек.Добавить("ЧередованиеЦветовСтрокВРезультате");
	ИменаНастроек.Добавить("СокращатьИменаПоследнихРабочихФайлов");
	ИменаНастроек.Добавить("МаксимальноеКоличествоВыводимыхСтрок");
	ИменаНастроек.Добавить("ЯзыкПрограммирования");
	ИменаНастроек.Добавить("ДанныеПриЗапуске");
	ИменаНастроек.Добавить("ДанныеПриЗапускеИмяФайла");
	ИменаНастроек.Добавить("ДанныеПриЗапускеИмяНастройки");
	ИменаНастроек.Добавить("РасшифровкаТаблицЗначений");
	ИменаНастроек.Добавить("ВопросТекстЗапросаБудетПотерянБольшеНеПоказывать");
	ИменаНастроек.Добавить("ВопросПередУдалениемСтрокДанныхБольшеНеПоказывать");
	ИменаНастроек.Добавить("ВопросПередУдалениемВнешнихИсточниковБольшеНеПоказывать");
	ИменаНастроек.Добавить("УведомлениеОЗавершенииДлительныхОпераций");
	ИменаНастроек.Добавить("ЗвуковойСигналПоОкончанииДлительныхОпераций");
	ИменаНастроек.Добавить("РазбиратьСтруктуруЗапроса");
	ИменаНастроек.Добавить("АнализироватьПланЗапроса");
	ИменаНастроек.Добавить("КаталогЛоговТехнологическогоЖурнала");
	ИменаНастроек.Добавить("ОбратныйПорядокРезультатовПакетногоЗапроса");
	
	// Загружаем значения настроек
	Для Каждого ЭлементИмяНастройки Из ИменаНастроек Цикл 
		
		ИмяНастройки = ЭлементИмяНастройки.Значение;
		ЭтаФорма[ИмяНастройки] = ОбъектОбработки().УКО_НастройкиПользователя_Значение(ИмяНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДанных

&НаКлиенте
Процедура ДанныеПриЗапускеПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы();
	
	Если ЗначениеЗаполнено(РабочиеДанные.Имя) Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеПриЗапускеИмяФайла) 
				И РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Файл"
				И ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
			ДанныеПриЗапускеИмяФайла = РабочиеДанные.Имя;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеПриЗапускеИмяНастройки) 
				И РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка"
					И ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
			ДанныеПриЗапускеИмяНастройки = РабочиеДанные.Имя;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриЗапускеИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог = ДанныеПриЗапускеИмяФайла;
	ДиалогВыбораФайла.ПолноеИмяФайла = ДанныеПриЗапускеИмяФайла;
	ДиалогВыбораФайла.Фильтр = УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайловДанных();
	ДиалогВыбораФайла.Расширение = УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных();
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор файла данных'; en = 'Select file data'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОткрытиеФайлаЗакончено", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриЗапускеИмяНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборНастройкиДанныхЗавершен", ЭтотОбъект);
	УКО_ФормыКлиент_ОткрытьДиалогВыбораНастроекДанных("Перечисление.УКО_РежимДиалогаУправлениеДаннымиВНастройках.Выбор", ЭтаФорма, РабочиеДанные, ОписаниеОповещенияОЗакрытии);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНастройкиНаСервере();
	Оповестить("ИзмененыНастройки");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФайлаНастройкиТехнологическогоЖурнала(Команда)
	
	ПолучитьФайл(ПримерФайлаНастройкиТехнологическогоЖурналаСервер(), "logcfg.xml");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	Для Каждого ЭлементИмяНастройки Из ИменаНастроек Цикл 
		
		ИмяНастройки = ЭлементИмяНастройки.Значение;
		ОбъектОбработки().УКО_НастройкиПользователя_ЗаписатьЗначение(ИмяНастройки, ЭтаФорма[ИмяНастройки]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	
	Элементы.ДанныеПриЗапускеИмяФайла.Видимость = (ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.Файл");
	Элементы.ДанныеПриЗапускеИмяНастройки.Видимость = (ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.Настройка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаЗакончено(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Модифицированность = Истина;
		ДанныеПриЗапускеИмяФайла = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНастройкиДанныхЗавершен(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Истина;
	ДанныеПриЗапускеИмяНастройки = Результат;
	
КонецПроцедуры

&НаСервере
Функция ПримерФайлаНастройкиТехнологическогоЖурналаСервер()
	
	Возврат ОбъектОбработки().УКО_АнализПланаЗапроса_ПримерФайлаНастройкиТехнологическогоЖурнала(КаталогЛоговТехнологическогоЖурнала);
	
КонецФункции

#КонецОбласти


&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает версию расширения
// Возвращаемое значение:
//   Строка	- версию расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения() Экспорт
	
	Возврат "3.8.9";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя расширения
//
// Возвращаемое значение:
//   Строка	- полное имя расширения
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения() Экспорт
	
	Возврат СтрШаблон("%1 %2", УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения());
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код английского языка
// Возвращаемое значение:
//   Строка	- Код английского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Экспорт
	Возврат "en";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код русского языка
// Возвращаемое значение:
//   Строка	- Код русского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() Экспорт
	Возврат "ru";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает основное расширение файлов данных, которое используется для сохранения
// Возвращаемое значение:
//   Строка - Основное расширение файлов данных
Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных() Экспорт
	Возврат "mcr";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает строку фильтра для диалога выбора файла
//
// Параметры:
//   ВключаяВсеФайлы - Булево - Включать все файлы
//   ВключатьИмпортируемыеФорматы - Булево - Включать импортируемые форматы
//
// Возвращаемое значение:
//   Строку - Фильтр для диалога выбора файла
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайловДанных(ВключаяВсеФайлы = Ложь, ВключатьИмпортируемыеФорматы = Ложь) Экспорт
	
	ПоддерживаемыеФорматы = Новый СписокЗначений;
	ПоддерживаемыеФорматы.Добавить(СтрШаблон("*.%1", УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных()), НСтр("ru = 'Файлы данных'; en = 'Data files'"));
	Если ВключатьИмпортируемыеФорматы Тогда
		ПоддерживаемыеФорматы.Добавить("*.q1c", НСтр("ru = 'Файлы запросов от 1С'; en = 'Query files from 1C'"));
		ПоддерживаемыеФорматы.Добавить("*.dcr", НСтр("ru = 'Файлы СКД от 1С'; en = 'DCS files from 1C'"));
		ПоддерживаемыеФорматы.Добавить("*.erf", НСтр("ru = 'Файлы внешних отчетов (СКД)'; en = 'External report files (DCS)'"));
	КонецЕсли;
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы, ВключаяВсеФайлы);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает строку фильтра для диалога выбора файла
//
// Параметры:
//   ПоддерживаемыеФорматы - СписокЗначений - Формат (Представление..., Значение - Расширение)
//   ВключаяВсеФайлы - Булево - Включать все файлы
//
// Возвращаемое значение:
//   Строку - Фильтр для диалога выбора файла
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы, ВключаяВсеФайлы = Истина) Экспорт
	
	Фильтры = Новый Массив;
	
	Если ПоддерживаемыеФорматы.Количество() > 1 Тогда
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(НСтр("ru = 'Все поддерживаемые форматы'; en = 'All supported format'"), СтрСоединить(ПоддерживаемыеФорматы.ВыгрузитьЗначения(), ";")));
	КонецЕсли;
	
	Для Каждого ПоддерживаемыйФормат Из ПоддерживаемыеФорматы Цикл 
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(ПоддерживаемыйФормат.Представление, ПоддерживаемыйФормат.Значение));
	КонецЦикла;

	Если ВключаяВсеФайлы Тогда
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(НСтр("ru = 'Все файлы'; en = 'All files'"), ПолучитьМаскуВсеФайлы()));
	КонецЕсли;
	
	Возврат СтрСоединить(Фильтры, "|");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(Представление, Расширение)
	
	Возврат СтрШаблон("%1 (%2)|%2", Представление, Расширение);
	
КонецФункции
&НаКлиенте
// Открыть диалог выбора настроек данных
//
// Параметры:
//	Режим - РежимДиалогаВыбораНастроек - Режим диалога
//	ФормаВладелец - Форма - Форма владелец
//	РабочиеДанные - РабочиеДанные - Текущие рабочие данные обработки
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии
//
Процедура УКО_ФормыКлиент_ОткрытьДиалогВыбораНастроекДанных(Режим, ФормаВладелец, РабочиеДанные, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", Режим);
	
	Если РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
		ПараметрыФормы.Вставить("РабочиеДанныеИмя", РабочиеДанные.Имя);
	КонецЕсли;
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ДиалогВыбораНастроек", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры
&НаКлиенте
// Открывает дополнительную/вспомогательную форму
//
// Параметры:
//	Имя - Строка - Имя формы
//	Параметры - Структура - Параметры формы (необязательный)
//	Владелец - Форма - Форма владелец
//	Уникальность - Произвольный - Уникальность (необязательный)
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии (необязательный)
//
Процедура УКО_ФормыКлиент_ОткрытьДополнительную(Имя, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Тогда
		ОбъектФорм = СтрШаблон("ВнешняяОбработка.%1%2.Форма.", УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения());
	Иначе
		ОбъектФорм = "ОбщаяФорма";
	КонецЕсли;
	
	ПолноеИмяФормы = СтрШаблон("%1.%2%3", ОбъектФорм, УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), Имя);
	
	Если Владелец = Неопределено Тогда
		РежимОткрытия = Неопределено;
	Иначе 
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, Параметры, Владелец, Уникальность,,,ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает префикс объектов расширения
// Возвращаемое значение:
//   Строка	- Префикс объектов расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения() Экспорт 
	
	Возврат "УКО_";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, это режим запуска программы
//
// Возвращаемое значение:
//   Булево	- Истина, Режим запуска внешняя обработка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Экспорт
	
	Возврат Истина;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
