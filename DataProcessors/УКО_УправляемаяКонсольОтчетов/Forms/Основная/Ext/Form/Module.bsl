#Область ОписаниеПеременных

&НаКлиенте
Перем ВсеДанные Экспорт; //Для хранения всех данных

&НаКлиенте
Перем ТекущиеДанные Экспорт; //Структура текущих данных

&НаКлиенте
Перем ТекущаяСтрока Экспорт; //Данные текущей строки (Элементы.ДеревоДанных.ТекущиеДанные, ДанныеФормыЭлементДерева) 

&НаКлиенте
Перем ТекущийРезультат Экспорт; //Структура текущего результата

&НаКлиенте
Перем РабочиеДанные;

&НаКлиенте
Перем ПоследняяАктивнаяОбласть; //Для функции выделение активной строки

&НаКлиенте
Перем ИдентификаторПоследнейВыделеннойСтроки Экспорт; //Идентификатор последней выделенной строки

&НаКлиенте
Перем ПоследнийТипПараметра; //При изменении типа параметра запроса эта переменная содержит последний тип активной строки

&НаКлиенте
Перем ПоследнийТипВнешнегоИсточника; //При изменении типа внешнего источника эта переменная содержит последний тип активной строки

&НаКлиенте
Перем ЗакрытиеРазрешено;

&НаКлиенте
Перем ДлительнаяОперация Экспорт; // Служебная для выполнения длительных операций

&НаКлиенте
Перем ПодключенаОбработкаПоискаСсылок Экспорт; // Подключена обработка поиска ссылок

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ТекстЗапросаКонтекстноеМенюГруппаДополнительныеУбратьПереносы.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьПереносыСтрок.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюГруппаДополнительныеУбратьКомментарииВТекстеЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьКомментарииВТексте.Картинка;
	Элементы.ПараметрыЗапросаКартинка.КартинкаШапки = Элементы.БиблиотекаКартинокУКО_ТипТип.Картинка;
	Элементы.ДобавитьСхемуКомпоновкиДанных1.Картинка = Элементы.БиблиотекаКартинокУКО_СхемаКомпоновкиДанных.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюВставкаПредопределенного.Картинка = Элементы.БиблиотекаКартинокУКО_ПредопределенныйЭлемент.Картинка;
	Элементы.СтраницаПараметрыЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_Параметры.Картинка;
	Элементы.ПараметрыРедактируютсяВГлавномЗапросеКартинка.Картинка = Элементы.БиблиотекаКартинокУКО_Информация.Картинка;
	Элементы.ПараметрыГруппаИнформацияПараметровНеПолученыОшибкаВТекстеКартинка.Картинка = Элементы.БиблиотекаКартинокУКО_Информация.Картинка;
	Элементы.ПараметрыГруппаНеПолученыТребуетсяПроверкаКартинка.Картинка = Элементы.БиблиотекаКартинокУКО_Информация.Картинка;
	Элементы.ДобавитьЗапрос1.Картинка = Элементы.БиблиотекаКартинокУКО_Запрос.Картинка;
	Элементы.ДобавитьЗапрос.Картинка = Элементы.БиблиотекаКартинокУКО_Запрос.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюГруппаДополнительныеЗакомментироватьТекстЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_ЗакомментироватьТекст.Картинка;
	Элементы.ВыделитьСтроку1.Картинка = Элементы.БиблиотекаКартинокУКО_Выделенный.Картинка;
	Элементы.ВыделитьСтроку.Картинка = Элементы.БиблиотекаКартинокУКО_Выделенный.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюГруппаДополнительныеУбратьПереносы.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьПереносыСтрок.Картинка;
	Элементы.КоманднаяПанельТекстаЗапросаУбратьПереносы.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьПереносыСтрок.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюГруппаДополнительныеУбратьКомментарииВТекстеЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьКомментарииВТексте.Картинка;
	Элементы.УбратьКомментарииВТекстеЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_УбратьКомментарииВТексте.Картинка;
	Элементы.ПараметрыЗапросаКонтекстноеМенюИзменитьТипПараметра.Картинка = Элементы.БиблиотекаКартинокУКО_ТипТип.Картинка;
	Элементы.ПараметрыЗапросаИзменитьТипПараметра.Картинка = Элементы.БиблиотекаКартинокУКО_ТипТип.Картинка;
	Элементы.ДобавитьСхемуКомпоновкиДанных1.Картинка = Элементы.БиблиотекаКартинокУКО_СхемаКомпоновкиДанных.Картинка;
	Элементы.ДобавитьСхемуКомпоновкиДанных.Картинка = Элементы.БиблиотекаКартинокУКО_СхемаКомпоновкиДанных.Картинка;
	Элементы.НастройкиДанных.Картинка = Элементы.БиблиотекаКартинокУКО_СкрыватьПоказыватьНастройкиДанных.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюВставкаПредопределенного.Картинка = Элементы.БиблиотекаКартинокУКО_ПредопределенныйЭлемент.Картинка;
	Элементы.ВставкаПредопределенного.Картинка = Элементы.БиблиотекаКартинокУКО_ПредопределенныйЭлемент.Картинка;
	Элементы.ДобавитьПользовательскуюНастройкуСКД1.Картинка = Элементы.БиблиотекаКартинокУКО_ПользовательскаяНастройкаСКД.Картинка;
	Элементы.ДеревоДанныхДобавитьПользовательскуюНастройкуСКД.Картинка = Элементы.БиблиотекаКартинокУКО_ПользовательскаяНастройкаСКД.Картинка;
	Элементы.ФормаОтправитьПисьмоВПоддержку.Картинка = Элементы.БиблиотекаКартинокУКО_Письмо.Картинка;
	Элементы.ФормаОткрытьПапкуСодержащуюФайл.Картинка = Элементы.БиблиотекаКартинокУКО_ОткрытьПапку.Картинка;
	Элементы.ФормаНастройки.Картинка = Элементы.БиблиотекаКартинокУКО_Настройки.Картинка;
	Элементы.ОбновитьЗамер.Картинка = Элементы.БиблиотекаКартинокУКО_ЗамерВремени.Картинка;
	Элементы.ТекстЗапросаКонтекстноеМенюГруппаДополнительныеЗакомментироватьТекстЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_ЗакомментироватьТекст.Картинка;
	Элементы.ЗакомментироватьТекстЗапроса.Картинка = Элементы.БиблиотекаКартинокУКО_ЗакомментироватьТекст.Картинка;
	Элементы.ФормаПерейтиНаСтраницуРасширения.Картинка = Элементы.БиблиотекаКартинокУКО_Гиперссылка.Картинка;
	Элементы.ФормаПерейтиВYouTubeКанал.Картинка = Элементы.БиблиотекаКартинокУКО_Гиперссылка.Картинка;
	Элементы.ВыполнитьЗапросСВременнымиТаблицами.Картинка = Элементы.БиблиотекаКартинокУКО_ВыполнитьЗапросСВременнымиТаблицами.Картинка;
	Элементы.ДобавитьВариантОтчетаСКД1.Картинка = Элементы.БиблиотекаКартинокУКО_ВариантОтчетаСКД.Картинка;
	Элементы.ДеревоДанныхДобавитьВариантОтчетаСКД.Картинка = Элементы.БиблиотекаКартинокУКО_ВариантОтчетаСКД.Картинка;
	
	ПроверкаОбновленияИнициализация = Новый Структура;
	ПроверкаОбновленияИнициализация.Вставить("АктуальнаяВерсия");
	ПроверкаОбновленияИнициализация.Вставить("ДатаПроверкиОбновления");
	
	ПроверкаОбновления = ПроверкаОбновленияИнициализация;
	
	ОбъектОбработки().УКО_Данные_Инициализировать(ЭтаФорма);
	ОбъектОбработки().УКО_ТабличныйДокумент_ИнициализироватьФорму(ЭтаФорма);
	ОбъектОбработки().УКО_Формы_ЗаполнитьСписокВыбораМаксимальноеКоличествоВыводимыхСтрок(Элементы.МаксимумСтрок);
	ОбъектОбработки().УКО_ПроверкаОбновлений_Инициализировать(ЭтаФорма, Элементы.ФормаГруппаДоступноОбновление);
	
	УстановитьУсловноеОформление();
	Элементы.ВнешниеИсточникиИмя.ЦветТекста = УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаГиперссылки();
	Элементы.ВнешниеИсточникиПредставление.ЦветТекста = УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаГиперссылки();
	
	СписокВыбора = Элементы.ВнешниеИсточникиТип.СписокВыбора;
	СписокВыбора.Добавить(НСтр("ru = 'Значение'; en = 'Value'"), НСтр("ru = 'Значение'; en = 'Value'"));
	СписокВыбора.Добавить(НСтр("ru = 'Выражение'; en = 'Expression'"), НСтр("ru = 'Выражение'; en = 'Expression'"));
	
	// Обновление списка выбора типа
	СписокВыбора = Элементы.ВыводВременныхТаблицВывод.СписокВыбора;
	СписокВыбора.Добавить(НСтр("ru = 'Выводить'; en = 'Output'"), НСтр("ru = 'Выводить'; en = 'Output'"));
	СписокВыбора.Добавить(НСтр("ru = 'Не выводить'; en = 'Do not output'"), НСтр("ru = 'Не выводить'; en = 'Do not output'"));
	СписокВыбора.Добавить(НСтр("ru = 'Свернуто'; en = 'Minimized'"), НСтр("ru = 'Свернуто'; en = 'Minimized'"));

	НастройкиОбработки = Новый Структура;
	НастройкиОбработки.Вставить("ИспользоватьКонструкторЗапросаТолстогоКлиента");
	НастройкиОбработки.Вставить("СокращенныйЗаголовокОсновногоОкна");
	НастройкиОбработки.Вставить("СокращатьИменаПоследнихРабочихФайлов");
	НастройкиОбработки.Вставить("ЯзыкПрограммирования");
	НастройкиОбработки.Вставить("МаксимальноеКоличествоВыводимыхСтрок");
	НастройкиОбработки.Вставить("ДанныеПриЗапуске");
	НастройкиОбработки.Вставить("ДанныеПриЗапускеИмяФайла");
	НастройкиОбработки.Вставить("ДанныеПриЗапускеИмяНастройки");
	НастройкиОбработки.Вставить("ВопросТекстЗапросаБудетПотерянБольшеНеПоказывать");
	НастройкиОбработки.Вставить("ВопросПередУдалениемСтрокДанныхБольшеНеПоказывать");
	НастройкиОбработки.Вставить("ВопросПередУдалениемВнешнихИсточниковБольшеНеПоказывать");
	НастройкиОбработки.Вставить("РазбиратьСтруктуруЗапроса");
	НастройкиОбработки.Вставить("АнализироватьПланЗапроса");
	НастройкиОбработки.Вставить("КаталогЛоговТехнологическогоЖурнала");
	НастройкиОбработки.Вставить("УведомлениеОЗавершенииДлительныхОпераций");
	НастройкиОбработки.Вставить("ЗвуковойСигналПоОкончанииДлительныхОпераций");
	
	ОбъектОбработки().УКО_НастройкиПользователя_ОбновитьЗначенияНастроек(НастройкиОбработки);
	ОбновитьЭлементыПоследниеРабочиеДанные();

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СохраненнаяПроверкаОбновления = Настройки.Получить("ПроверкаОбновления");
	Если ЗначениеЗаполнено(СохраненнаяПроверкаОбновления) Тогда
		ЗаполнитьЗначенияСвойств(ПроверкаОбновления, СохраненнаяПроверкаОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НовыйТекущийРезультат(ТекущийРезультат);
	
	РабочиеДанные = Новый Структура("Тип, Имя");
	
	// Инициализация данных
	Если НастройкиОбработки.ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.ПустаяСсылка" Тогда
		НовыеДанные();
	ИначеЕсли НастройкиОбработки.ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.Файл"
			И ЗначениеЗаполнено(НастройкиОбработки.ДанныеПриЗапускеИмяФайла) Тогда
		ЗагрузитьДанныеИзФайла(НастройкиОбработки.ДанныеПриЗапускеИмяФайла);
	ИначеЕсли НастройкиОбработки.ДанныеПриЗапуске = "Перечисление.УКО_ТипыХраненияДанных.Настройка"
			И ЗначениеЗаполнено(НастройкиОбработки.ДанныеПриЗапускеИмяНастройки) Тогда
		ЗагрузитьДанныеИзНастроек(НастройкиОбработки.ДанныеПриЗапускеИмяНастройки);
	КонецЕсли;
	
	УКО_ПроверкаОбновленийКлиент_Инициализация(ЭтаФорма);
	
	ОбновитьЭлементыФормы(); 
	
	// ++тм  
	//ТекстЗапроса = ТекущиеДанные.Текст;
	Если ЭтаФорма.ВладелецФормы <> Неопределено 
		И ЭтаФорма.ВладелецФормы.ИмяФормы = "Справочник.тм_ДинамическиеПодписки.Форма.ФормаЭлемента"  Тогда
			ТекстЗапросаПриИзменении(Неопределено);
	КонецЕсли; 
	// --тм

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	УКО_ДлительныеОперацииКлиент_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзмененыНастройки" Тогда
		
		ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Файл");
		
		Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда // Проблема когда строка удаляется
			Элементы.ДеревоДанных.ТекущаяСтрока = ПолучитьГлавныйЗапрос(ТекущаяСтрока).ПолучитьИдентификатор();
		КонецЕсли;
		ОбновитьСтруктуруЗапросов(ПолучитьСтрокиДереваДанных(ДеревоДанных, "Перечисление.УКО_ЭлементыДанных.Запрос"));
		
		ОбновитьЗаголовок();
		ОбновитьЭлементыФормы();
		
	ИначеЕсли ИмяСобытия = "ИзмененыПоследниеОткрытыеДанные" Тогда
		
		ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Настройка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
		
		УКО_ДанныеКлиент_ИзменитьПоле(ЭтаФорма, ТекущаяСтрока, "Текст", УКО_СКДВызовСервера_XMLТекст(ВыбранноеЗначение));
		ПроверитьСхемуКомпоновкиДанных (ТекущиеДанные);
		
		ОбновитьЭлементыФормы();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы = Истина Тогда
		
		Если Модифицированность Тогда
			
			ТекстПредупреждения = НСтр("ru = 'В консоли имеются несохраненные данные, они будут потеряны.
			|Для сохранения изменений нажмите ""Продолжить работу"", сохраните данные, а потом завершите работу.'; en = 'The console has unsaved data, it will be lost.
			|To save your changes, click Continue, save the data, and then exit.'");
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗакрытиеРазрешено = Неопределено Тогда
			Отказ = Истина;
			ЗапуститьОбработчикСПроверкойНаСохранностьДанных(Новый ОписаниеОповещения("ОбработчикЗакрытиеРазрешеноЗакрыть", ЭтотОбъект));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Текст", ТекстЗапроса);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	УКО_ДанныеКлиент_ИзменитьПоля(ЭтаФорма, ТекущаяСтрока, ИзменяемыеПоля);
	
	ОбновитьСтруктуруЗапросов(ТекущаяСтрока, Ложь);
	
	ПодключитьОбработчикОжидания("ОбновлениеЭлементовФормыПослеОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпоновкиДанныхXMLПриИзменении(Элемент)
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Текст", СхемаКомпоновкиДанныхXML);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	УКО_ДанныеКлиент_ИзменитьПоля(ЭтаФорма, ТекущаяСтрока, ИзменяемыеПоля);
	
	ПодключитьОбработчикОжидания("ОбновлениеЭлементовФормыПослеОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаТекстНажатие(Элемент)
	
	ПоказатьОшибку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПриИзменении(Элемент)
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.Имя = Представление;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеВнешнихФункцийПриИзменении(Элемент)
	
	УКО_ДанныеКлиент_ИзменитьПоле(ЭтаФорма, ТекущаяСтрока, "ИспользованиеВнешнихФункций", ИспользованиеВнешнихФункций);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументРезультатПриАктивизацииОбласти(Элемент)
	
	УКО_ТабличныйДокументКлиент_ОбработчикПриАктивизацииОбласти(Элемент, ТабличныйДокументРезультат, ПоследняяАктивнаяОбласть, ТекущийРезультат.АдресДанныхРасшифровки);
	
	Если ТипЗнч(ТабличныйДокументРезультат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		
		Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
			ИнтервалОжидания = 1;
		Иначе
			ИнтервалОжидания = 0.2;
		КонецЕсли;

		ПодключитьОбработчикОжидания("РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументРезультатВыбор(Элемент, Область, СтандартнаяОбработка)

	УКО_ТабличныйДокументКлиент_ОбработчикВыбор(ЭтаФорма, ТекущийРезультат.АдресДанныхРасшифровки, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальноСтрокПриИзменении(Элемент)
	
	УКО_ДанныеКлиент_ИзменитьПоле(ЭтаФорма, ТекущаяСтрока, "МаксимумСтрок", МаксимумСтрок);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекСКД(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СКДПерейтиКОтчету(Элемент)
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
	НастройкиЭлемента =  КомпоновщикНастроек.Настройки.НастройкиЭлемента(ЭлементСтруктуры);
	Элементы.СКДСтруктура.ТекущаяСтрока = КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(НастройкиЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура СКДЛокальныеВыбранныеПоляПриИзменении(Элемент)
	
	Если СКДЛокальныеВыбранныеПоля Тогда
		
		Элементы.СтраницыСКДПоляВыбора.ТекущаяСтраница = Элементы.СКДНастройкиВыбранныхПолей;
			
	Иначе
		
		Элементы.СтраницыСКДПоляВыбора.ТекущаяСтраница = Элементы.СКДОтключенныеНастройкиВыбранныхПолей;

		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьВыборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СКДЛокальныйОтборПриИзменении(Элемент)
	
	Если СКДЛокальныйОтбор Тогда
		
		Элементы.СКДСтраницыОтбора.ТекущаяСтраница = Элементы.СКДНастройкиОтбора;
			
	Иначе
		
		Элементы.СКДСтраницыОтбора.ТекущаяСтраница = Элементы.СКДОтключенныеНастройкиОтбора;

		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьОтборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СКДЛокальныйПорядокПриИзменении(Элемент)
	
	Если СКДЛокальныйПорядок Тогда
		
		Элементы.СтраницыСКДПорядок.ТекущаяСтраница = Элементы.СКДНастройкиПорядка;
					
	Иначе
		
		Элементы.СтраницыСКДПорядок.ТекущаяСтраница = Элементы.СКДОтключенныеНастройкиПорядка;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьПорядокЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СКДЛокальноеУсловноеОформлениеПриИзменении(Элемент)
	
	Если СКДЛокальноеУсловноеОформление Тогда
		
		Элементы.СтраницыСКДУсловногоОформления.ТекущаяСтраница = Элементы.СКДНастройкиУсловногоОформления;
					
	Иначе
		
		Элементы.СтраницыСКДУсловногоОформления.ТекущаяСтраница = Элементы.СКДОтключенныеНастройкиУсловногоОформления;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьУсловноеОформлениеЭлемента(ЭлементСтруктуры);
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СКДЛокальныеПараметрыВыводаПриИзменении(Элемент)
	
	Если СКДЛокальныеПараметрыВывода Тогда
		
		Элементы.СтраницыСКДПараметрыВывода.ТекущаяСтраница = Элементы.СКДНастройкиПараметровВывода;
					
	Иначе
		
		Элементы.СтраницыСКДПараметрыВывода.ТекущаяСтраница = Элементы.СКДОтключенныеНастройкиПараметровВывода;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьПараметрыВыводаЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущиеДанные.Страница = ТекущаяСтраница.Имя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДанных

&НаКлиенте
Процедура ДеревоДанныхПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПриАктивизацииСтроки(Элемент)
	
	ИдентификаторТекущейСтроки = Элементы.ДеревоДанных.ТекущаяСтрока;
	
	// При новом получении формы если выделена одна та же самая строка ничего не делаем http://partners.v8.1c.ru/forum/thread.jsp?id=808386#808386
	Если ИдентификаторПоследнейВыделеннойСтроки <> ИдентификаторТекущейСтроки Тогда 
		
		СохранитьИзмененныеДанныеСтроки();
		
		ТекущаяСтрока = Элементы.ДеревоДанных.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			ТекущиеДанные = УКО_ДанныеКлиент_Получить(ЭтаФорма, ТекущаяСтрока);
			
			// Активация страница которая была последней
			Если ЗначениеЗаполнено(ТекущиеДанные.Страница) Тогда
				ТекущийЭлемент = Элементы[ТекущиеДанные.Страница];
			КонецЕсли;
			
		КонецЕсли;
		
		ИдентификаторПоследнейВыделеннойСтроки = ИдентификаторТекущейСтроки;
		
		ПодключитьОбработчикОжидания("ОбновлениеЭлементовФормыПослеОжидания", 0.1, Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверим есть ли строки для которых доступно перетаскивание
	ПриемникПеретаскивания = ПолучитьСтрокуПриемникПеретаскиванияДереваДанных (Строка);
	СтрокиКоторыеМожноПеренести = ПолучитьСтрокиКоторыеМожноПеренести (Элемент.ВыделенныеСтроки, ПараметрыПеретаскивания, ПриемникПеретаскивания);
	ЕстьСтрокиДляПереноса = СтрокиКоторыеМожноПеренести.Количество();
	
	Если СтрокиКоторыеМожноПеренести.Количество() = 0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Обработка стандартного события добавления строки в Дерево (Insert)
	
	Отказ = Истина;
	
	Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
		
		Возврат;
		
	ИначеЕсли Копирование Тогда //Добавлено копированием
		
		РодительТекущейСтроки = УКО_ДанныеКлиент_ПолучитьРодителяСтроки(ЭтаФорма, ТекущаяСтрока);
		
		// Скопируем строку
		ПереместитьСтрокуДереваДанных(ТекущаяСтрока, РодительТекущейСтроки, Истина, Истина)
		
	Иначе
		
		ДобавитьСтрокуВДеревоДанных(НСтр("ru = 'Запрос'; en = 'Query'"), "Перечисление.УКО_ЭлементыДанных.Запрос");
		ПослеДобавленияНовогоЭлементаВДерево();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущийЭлемент = Элементы.Представление;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПриемникПеретаскивания = ПолучитьСтрокуПриемникПеретаскиванияДереваДанных (Строка);
	СтрокиКоторыеМожноПеренести = ПолучитьСтрокиКоторыеМожноПеренести (Элемент.ВыделенныеСтроки, ПараметрыПеретаскивания, СтрокаПриемникПеретаскивания);
	
	Если ТипЗнч(СтрокаПриемникПеретаскивания) = Тип("ДанныеФормыДерево") 
			ИЛИ УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(СтрокаПриемникПеретаскивания.Тип) Тогда
		ИндексВставки = Неопределено;
	Иначе
		СтрокаПриемникПеретаскиванияРодитель = УКО_ДанныеКлиент_ПолучитьРодителяСтроки(ЭтаФорма, СтрокаПриемникПеретаскивания);
		ИндексВставки = СтрокаПриемникПеретаскиванияРодитель.ПолучитьЭлементы().Индекс(СтрокаПриемникПеретаскивания);
		СтрокаПриемникПеретаскивания = СтрокаПриемникПеретаскиванияРодитель;
	КонецЕсли;
	
	Копирование = (ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование);
	Для Каждого ИдентификаторСтроки Из СтрокиКоторыеМожноПеренести Цикл
		
		ПереносимаяСтрока = ДеревоДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
		АктивироватьСтроку = (Элемент.ТекущаяСтрока = ИдентификаторСтроки);
		
		ПереместитьСтрокуДереваДанных(ПереносимаяСтрока, СтрокаПриемникПеретаскивания, Копирование, АктивироватьСтроку, ИндексВставки);
		
		// Удалим перемещенную строку (Мы сделали копию строки на новом месте и нужно удалить старую)
		Если Не Копирование Тогда
			
			РодительПереносимойСтроки = УКО_ДанныеКлиент_ПолучитьРодителяСтроки(ЭтаФорма, ПереносимаяСтрока);
			
			Если ПереносимаяСтрока <> Неопределено Тогда // возможно уже была удалена
				РодительПереносимойСтроки.ПолучитьЭлементы().Удалить(ПереносимаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(СтрокаПриемникПеретаскивания) <> Тип("ДанныеФормыДерево") Тогда //НЕ перенос в корень дерева
		Элементы.ДеревоДанных.Развернуть(СтрокаПриемникПеретаскивания.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьСтроку(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДанных = ДеревоДанных.НайтиПоИдентификатору(Строка);
	СтрокаДанных.Развернуто = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередСворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДанных = ДеревоДанных.НайтиПоИдентификатору(Строка);
	Если СтрокаДанных <> Неопределено Тогда
		СтрокаДанных.Развернуто = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ЗаголовокВопроса = НСтр("ru = 'Удаление строк'; en = 'Deleting rows'");
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Выделено: %1
	|Данные будут потеряны. Продолжить?'; en = 'Lines selected: %1
	|Data will be lost. Continue?'"), Элемент.ВыделенныеСтроки.Количество());

	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Продолжить'; en = 'Continue'"));
	КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПередУдалениемСтрокДанныхЗавершение", ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяНастройкиБольшеНеПоказывать", "ВопросПередУдалениемСтрокДанныхБольшеНеПоказывать");
	ДополнительныеПараметры.Вставить("БольшеНеПоказывать", НастройкиОбработки.ВопросПередУдалениемСтрокДанныхБольшеНеПоказывать);
	
	УКО_ФормыКлиент_ЗадатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, КнопкиВопроса, Истина, ЗаголовокВопроса, ЭтаФорма, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса

&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
	
	СтрокаПараметр = Элемент.ТекущиеДанные;
	Если СтрокаПараметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяИзменяемойКолонки = Элемент.ТекущийЭлемент.Имя;
	ИмяПараметра = СтрокаПараметр.Имя;
	
	ЗначениеПараметра = УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(ТекущиеДанные, ИмяПараметра, СтрокаПараметр.ТипЗначения);
	ТипЗначения = ТекущиеДанные.Параметры[ИмяПараметра];
	НовыйТип = СтрокаПараметр.Тип;
	
	Если ИмяИзменяемойКолонки = "ПараметрыЗапросаТип" Тогда
		
		Если ПоследнийТипПараметра <> НовыйТип Тогда //Изменен тип
			ПреобразованноеЗначение = ПреобразоватьЗначениеПараметраКТипу(ЗначениеПараметра, ТипЗначения, ПоследнийТипПараметра, НовыйТип);
			ПоследнийТипПараметра = НовыйТип;
			
			УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ИмяПараметра, ПреобразованноеЗначение);
			ОбновитьСтрокуПараметра(СтрокаПараметр, ИмяПараметра, СтрокаПараметр.ТипЗначения, ПреобразованноеЗначение);
		КонецЕсли;
		
	Иначе
		
		НовоеЗначениеПараметра = СтрокаПараметр.Представление;
		
		Если НовоеЗначениеПараметра <> ЗначениеПараметра Тогда 
			УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ИмяПараметра, НовоеЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЭлементыУправленияПараметровЗапроса();
	
	Если ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПараметр = Элемент.ТекущиеДанные;
	
	Если СтрокаПараметр <> Неопределено Тогда 
		
		ПоследнийТипПараметра = СтрокаПараметр.Тип;
		
		ЗначениеПараметра = УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(ТекущиеДанные, СтрокаПараметр.Имя, СтрокаПараметр.ТипЗначения);
		
		УКО_ФормыКлиент_АктивизацияСтрокиЗначенияПараметраВФорме(Элементы.ПараметрыЗапросаЗначение, ЗначениеПараметра, СтрокаПараметр.ТипЗначения);
		
		ЭлементЗначение = Элементы.ПараметрыЗапросаЗначение;
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			
			ОписаниеТиповСтрока = УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока();
			Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа = ОписаниеТиповСтрока;
			ЭлементЗначение.РедактированиеТекста = Ложь;
			ЭлементЗначение.КнопкаВыпадающегоСписка = Ложь;
			ЭлементЗначение.КнопкаВыбора = Истина;
			
			СтрокаПараметр.Представление = ОписаниеТиповСтрока.ПривестиЗначение(ЗначениеПараметра); 
			
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
			
			Элементы.ПараметрыЗапросаЗначение.ОграничениеТипа = УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока();
			ЭлементЗначение.РедактированиеТекста = Ложь;				
			ЭлементЗначение.КнопкаОчистки = Ложь;
			ЭлементЗначение.КнопкаВыбора = Истина;
			ЭлементЗначение.КнопкаВыпадающегоСписка = Ложь;
			
			СтрокаПараметр.Представление = ЗначениеПараметра.Представление;
			
		КонецЕсли;
		
		// Обновление списка выбора типа
		СписокВыбора = Элементы.ПараметрыЗапросаТип.СписокВыбора;
		СписокВыбора.Очистить();
		
		СписокВыбора.Добавить(НСтр("ru = 'Значение'; en = 'Value'"), НСтр("ru = 'Значение'; en = 'Value'"));
		
		Если СписокДоступенДляПараметра(ЗначениеПараметра, ТекущиеДанные.Параметры[СтрокаПараметр.Имя]) Тогда
			СписокВыбора.Добавить(НСтр("ru = 'Список'; en = 'List'"), НСтр("ru = 'Список'; en = 'List'"));
		КонецЕсли;
		
		СписокВыбора.Добавить(НСтр("ru = 'Выражение'; en = 'Expression'"), НСтр("ru = 'Выражение'; en = 'Expression'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПараметрыЗапросаИмя
			И ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			
		ПереименоватьПараметр(Неопределено);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаПараметр = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ИмяПараметра = СтрокаПараметр.Имя;
	ТипПараметра = ТекущиеДанные.Параметры[ИмяПараметра];
	
	ЗначениеПараметра = УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(ТекущиеДанные, ИмяПараметра, СтрокаПараметр.ТипЗначения);
	ЗаголовокПараметр = СтрШаблон(НСтр("ru = 'Параметр ""%1""'; en = 'Parameter ""%1""'"), ИмяПараметра);

	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВводЗначенияПараметраЗавершен", ЭтотОбъект, ДополнительныеПараметры);
	УКО_ФормыКлиент_ВводЗначенияПараметраВФорме(ЗаголовокПараметр, Элемент, ЗначениеПараметра, СтрокаПараметр.ТипЗначения, СтандартнаяОбработка, ОписаниеОповещенияЗавершение);
	
	ДополнительныеПараметры = Новый Структура("Имя", ИмяПараметра);
	Если СтрокаПараметр.Тип = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры.Вставить("ВидСложногоПараметра", "Перечисление.УКО_СложныйПараметрЗапроса.Выражение");
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеСложногоПараметраЗавершено", ЭтотОбъект, ДополнительныеПараметры);
		
		ДополнениеЗаголовка = СтрШаблон("(%1): %2", УКО_СтрокиКлиентСервер_ТекстПараметр(), ИмяПараметра);
		УКО_ФормыКлиент_ОткрытьРедактированиеВыражения(ДополнениеЗаголовка, "Перечисление.УКО_РежимРедактированияВыражения.Параметр", ЗначениеПараметра.Значение, ЭтаФорма, ОписаниеОповещенияЗавершение);
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры.Вставить("ВидСложногоПараметра", ЗначениеПараметра.Вид);
 		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеСложногоПараметраЗавершено", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
			
			ДополнительныеПараметрыОткрытия = Новый Структура;
			ДополнительныеПараметрыОткрытия.Вставить("ДополнениеЗаголовка", СтрШаблон("(%1): %2", УКО_СтрокиКлиентСервер_ТекстПараметр(), ИмяПараметра));
			ДополнительныеПараметрыОткрытия.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияЗавершение);
			
			УКО_ФормыКлиент_ОткрытьТаблицуЗначений(ЗначениеПараметра.Значение, ЭтаФорма,, ДополнительныеПараметрыОткрытия);
			
		ИначеЕсли ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
			
			УКО_ФормыКлиент_ОткрытьРедактированиеГраницы(ЗаголовокПараметр, ЗначениеПараметра.Значение, ЭтаФорма, ОписаниеОповещенияЗавершение);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("МоментВремени") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеЗначенияПараметраЗавершено", ЭтотОбъект, ДополнительныеПараметры);
		УКО_ФормыКлиент_ОткрытьРедактированиеМоментаВремени(ЗаголовокПараметр, ЗначениеПараметра, ЭтаФорма, ОписаниеОповещенияЗавершение);
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеЗначенияПараметраЗавершено", ЭтотОбъект, ДополнительныеПараметры);
		УКО_ФормыКлиент_ОткрытьРедактированиеСпискаЗначений(ЗаголовокПараметр, ЗначениеПараметра, СтрокаПараметр.ТипЗначения, ЭтаФорма, ОписаниеОповещенияЗавершение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	УКО_ФормыКлиент_ОчисткаЗначенияПараметраВФорме(Элемент, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПараметр = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	НовоеЗначение = СтрокаПараметр.ТипЗначения.ПривестиЗначение (Неопределено);
	
	Если СтрокаПараметр.Тип = НСтр("ru = 'Список'; en = 'List'") Тогда
		НовоеЗначение = УКО_ОбщегоНазначенияКлиентСервер_НовыйСписокЗначений(НовоеЗначение);
	КонецЕсли;
	
	УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, СтрокаПараметр.Имя, НовоеЗначение);
	ОбновитьСтрокуПараметра(СтрокаПараметр, СтрокаПараметр.Имя, СтрокаПараметр.ТипЗначения, НовоеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УКО_ФормыКлиент_ОбработкаВыбораЗначенияПараметраВФорме(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаПараметр = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	УКО_ФормыКлиент_АвтоПодборЗначенияВФорме(Текст, СтрокаПараметр.ТипЗначения, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнешниеИсточники

&НаКлиенте
Процедура ВнешниеИсточникиПриАктивизацииСтроки(Элемент)

	ВнешниеИсточникиТекущиеДанные = Элементы.ВнешниеИсточники.ТекущиеДанные;
	
	Если ВнешниеИсточникиТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПоследнийТипВнешнегоИсточника = ВнешниеИсточникиТекущиеДанные.Тип;
	
	ОбновитьСтрокуВнешнийИсточник(ВнешниеИсточникиТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеИсточникиПриИзменении(Элемент)
	
	ВнешниеИсточникиТекущиеДанные = Элементы.ВнешниеИсточники.ТекущиеДанные;
	НовыйТип = ВнешниеИсточникиТекущиеДанные.Тип;
	
	Если Элемент.ТекущийЭлемент = Элементы.ВнешниеИсточникиТип Тогда
		
		Если ПоследнийТипВнешнегоИсточника <> НовыйТип Тогда
			
			ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, ВнешниеИсточникиТекущиеДанные.UID);
			Если ЗначениеЗаполнено(ОписаниеВнешнегоИсточника) Тогда
				ОписаниеВнешнегоИсточника.Значение = ПреобразоватьЗначениеВнешнегоИсточникаКТипу(ОписаниеВнешнегоИсточника.Значение, ПоследнийТипВнешнегоИсточника, НовыйТип);
			Иначе
				ОписаниеВнешнегоИсточника = УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(ВнешниеИсточникиТекущиеДанные.Имя, НовыйТип, 
													ПреобразоватьЗначениеВнешнегоИсточникаКТипу(Неопределено, ПоследнийТипВнешнегоИсточника, НовыйТип));
				УКО_ДанныеКлиент_ВставитьВнешнийИсточник(ЭтаФорма, ТекущаяСтрока, ВнешниеИсточникиТекущиеДанные.UID, ОписаниеВнешнегоИсточника);
			КонецЕсли;
			
			ПоследнийТипВнешнегоИсточника = НовыйТип;
			ОбновитьСтрокуВнешнийИсточник(ВнешниеИсточникиТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбновитьКоличествоВнешнихИсточников();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеИсточникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ВнешниеИсточникиТекущиеДанные = Элементы.ВнешниеИсточники.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ИмяВнешнегоИсточника = УКО_СтрокиКлиентСервер_НовыйИдентификатор(НСтр("ru = 'Таблица'; en = 'Table'"), УКО_ФормыКлиент_ВыгрузитьКолонкуКоллекции(ВнешниеИсточники, "Имя"));
		
		ВнешниеИсточникиТекущиеДанные.Имя = ИмяВнешнегоИсточника;
		ВнешниеИсточникиТекущиеДанные.Тип = НСтр("ru = 'Значение'; en = 'Value'");
		ВнешниеИсточникиТекущиеДанные.UID = Новый УникальныйИдентификатор;
		
		ПоследнийТипВнешнегоИсточника = ВнешниеИсточникиТекущиеДанные.Тип;
		
		ВнешниеИсточники.Сортировать("Имя");
		
		ОбновитьСтрокуВнешнийИсточник(ВнешниеИсточникиТекущиеДанные);
		
	Иначе
		
		ТекущаяКолонка = Элемент.ТекущийЭлемент;
		
		Если СтрНайти(ТекущаяКолонка.Имя, "Имя") Тогда
			
			ЗанятыеИдентификаторы = УКО_ФормыКлиент_ВыгрузитьКолонкуКоллекции(ВнешниеИсточники, "Имя", ВнешниеИсточникиТекущиеДанные.Имя);
			УКО_ФормыКлиент_ОткрытьРедактированиеИдентификатора(НСтр("ru = 'Имя внешнего источника'; en = 'External source name'"),
								"Перечисление.УКО_РежимРедактированияИдентификатора.Идентификатор", ЭтаФорма,
								Новый ОписаниеОповещения("ВводИдентификатораВнешнегоИсточникаЗавершен", ЭтотОбъект), ВнешниеИсточникиТекущиеДанные.Имя, ЗанятыеИдентификаторы);
			
		ИначеЕсли СтрНайти(ТекущаяКолонка.Имя, "Представление") Тогда
			
			ДополнительныеПараметры = Новый Структура("UID", ВнешниеИсточникиТекущиеДанные.UID);
			ИмяВнешнегоИсточника = ВнешниеИсточникиТекущиеДанные.Имя;
			ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, ВнешниеИсточникиТекущиеДанные.UID);
			Если ОписаниеВнешнегоИсточника = Неопределено Тогда
				ЗначениеВнешнегоИсточника = Неопределено;
			Иначе
				ЗначениеВнешнегоИсточника = ОписаниеВнешнегоИсточника.Значение;
			КонецЕсли;
			ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеЗначенияВнешнегоИсточникаЗавершено", ЭтотОбъект, ДополнительныеПараметры);
			
			Если ВнешниеИсточникиТекущиеДанные.Тип = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
				
				ДополнениеЗаголовка = СтрШаблон("(%1): %2", УКО_СтрокиКлиентСервер_ИмяВнешнегоИсточника(), ИмяВнешнегоИсточника);
				УКО_ФормыКлиент_ОткрытьРедактированиеВыражения (ДополнениеЗаголовка, "Перечисление.УКО_РежимРедактированияВыражения.ВнешнийИсточник",
																					ЗначениеВнешнегоИсточника, ЭтаФорма, ОписаниеОповещенияЗавершение)
				
			ИначеЕсли ВнешниеИсточникиТекущиеДанные.Тип = НСтр("ru = 'Значение'; en = 'Value'") Тогда
				
				ДополнительныеПараметрыОткрытия = Новый Структура;
				ДополнительныеПараметрыОткрытия.Вставить("ДополнениеЗаголовка", СтрШаблон("(%1): %2", УКО_СтрокиКлиентСервер_ИмяВнешнегоИсточника(), ИмяВнешнегоИсточника));
				ДополнительныеПараметрыОткрытия.Вставить("НастройкаИндексацииКолонок", Истина);
				ДополнительныеПараметрыОткрытия.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияЗавершение);
				
				УКО_ФормыКлиент_ОткрытьТаблицуЗначений(ЗначениеВнешнегоИсточника, ЭтаФорма,, ДополнительныеПараметрыОткрытия);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешниеИсточникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВнешниеИсточникиТекущиеДанные = Элементы.ВнешниеИсточники.ТекущиеДанные;
	
	ИмяТаблицы = ВнешниеИсточникиТекущиеДанные.Имя;
	ТипТаблицы = ВнешниеИсточникиТекущиеДанные.Тип;
	
	ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, ВнешниеИсточникиТекущиеДанные.UID);
	Если ОписаниеВнешнегоИсточника = Неопределено Тогда
		ОписаниеВнешнегоИсточника = УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(ИмяТаблицы, ТипТаблицы);
	Иначе 
		ОписаниеВнешнегоИсточника.Имя = ИмяТаблицы;
		ОписаниеВнешнегоИсточника.Тип = ТипТаблицы;
	КонецЕсли;
	
	УКО_ДанныеКлиент_ВставитьВнешнийИсточник(ЭтаФорма, ТекущаяСтрока, ВнешниеИсточникиТекущиеДанные.UID, ОписаниеВнешнегоИсточника);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеИсточникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВнешниеИсточникиТекущиеДанные = Элементы.ВнешниеИсточники.ТекущиеДанные;
	
	Если ВнешниеИсточникиТекущиеДанные <> Неопределено Тогда
		ПоследнийТипВнешнегоИсточника = ВнешниеИсточникиТекущиеДанные.Тип;
	КонецЕсли;
	
	ОбновитьКоличествоВнешнихИсточников();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеИсточникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ЗаголовокВопроса = НСтр("ru = 'Удаление внешних источников'; en = 'Deleting external sources'");
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Выделено : %1
	|Данные будут потеряны. Продолжить?'; en = 'Selected: %1
	|Data will be lost. Continue?'"), Элемент.ВыделенныеСтроки.Количество());
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Продолжить'; en = 'Continue'"));
	КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПередУдалениемВнешнегоИсточникаЗавершение", ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяНастройкиБольшеНеПоказывать", "ВопросПередУдалениемВнешнихИсточниковБольшеНеПоказывать");
	ДополнительныеПараметры.Вставить("БольшеНеПоказывать", НастройкиОбработки.ВопросПередУдалениемВнешнихИсточниковБольшеНеПоказывать);
	
	УКО_ФормыКлиент_ЗадатьВопрос(ОписаниеОповещенияОЗавершении,ТекстВопроса, КнопкиВопроса, Истина, ЗаголовокВопроса, ЭтаФорма, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеИсточникиТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФункцииЯзыкаЗапросов

&НаКлиенте
Процедура ФункцииЯзыкаЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ВставляемыеДанные = ВставкаФункцииЯзыкаЗапросовВТекст(Элемент);
	Выполнение = ЗначениеЗаполнено(ВставляемыеДанные <> Неопределено);
	
	Если Выполнение Тогда
		ПараметрыПеретаскивания.Значение = ВставляемыеДанные.ВставляемыйТекст;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФункцииЯзыкаЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВставляемыеДанные = ВставкаФункцииЯзыкаЗапросовВТекст(Элемент);

	Если ВставляемыеДанные <> Неопределено Тогда
		
		Элементы.ТекстЗапроса.ВыделенныйТекст = ВставляемыеДанные.ВставляемыйТекст;
		
		ДельтаСмещенияКурсора = ВставляемыеДанные.СмещениеКурсора;
		Если ЗначениеЗаполнено(ДельтаСмещенияКурсора) Тогда
			
			ГраницыВыделения = УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элементы.ТекстЗапроса);
			ГраницыВыделения.НачалоКолонки = ГраницыВыделения.НачалоКолонки + ДельтаСмещенияКурсора;
			ГраницыВыделения.КонецКолонки = ГраницыВыделения.КонецКолонки + ДельтаСмещенияКурсора;
			
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, ГраницыВыделения.НачалоКолонки, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);
			
		КонецЕсли;
		
		ТекущийЭлемент = Элементы.ТекстЗапроса;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураСКД

&НаКлиенте
Процедура СтруктураСКДПриАктивизацииПоля(Элемент)
	
	ВыбраннаяСтраница = Неопределено;
	ИмяПоля = Элемент.ТекущийЭлемент.Имя;
	
	Если СтрНайти(ИмяПоля, "СтруктураНаличиеВыбора") Тогда
		ВыбраннаяСтраница = Элементы.СтраницаСКДПоляВыбора;
	ИначеЕсли СтрНайти(ИмяПоля, "СтруктураНаличиеОтбора") Тогда
		ВыбраннаяСтраница = Элементы.СтраницаСКДОтбор;
	ИначеЕсли СтрНайти(ИмяПоля, "СтруктураНаличиеПорядка") Тогда
		ВыбраннаяСтраница = Элементы.СтраницаСКДПорядок;
	ИначеЕсли СтрНайти(ИмяПоля, "СтруктураНаличиеУсловногоОформления") Тогда
		ВыбраннаяСтраница = Элементы.СтраницаСКДУсловноеОформление;
	ИначеЕсли СтрНайти(ИмяПоля, "СтруктураНаличиеПараметровВывода") Тогда
		ВыбраннаяСтраница = Элементы.СтраницаСКДПараметрыДанных;
	КонецЕсли;
	
	Если ВыбраннаяСтраница <> Неопределено Тогда
		ТекущийЭлемент = Элементы.СтраницыНастройкиСКД;
		Элементы.СтраницыНастройкиСКД.ТекущаяСтраница = ВыбраннаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураСКДПриАктивизацииСтроки(Элемент)
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.СКДСтруктура.ТекущаяСтрока);
	ТипЭлемента = ТипЗнч(ЭлементСтруктуры); 
	
	ЭтоКоллекция	= ТипЭлемента = Неопределено  
						ИЛИ ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
						ИЛИ ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных");
	ЭтоНастройка	= ТипЭлемента = Тип("НастройкиКомпоновкиДанных") 
						ИЛИ ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных");
	ЭтоГруппировка	= ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
						ИЛИ ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
						ИЛИ ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных");								
	ЭтаТаблицаДиаграмма = ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") 
						ИЛИ ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных");
						
	ТекущаяСтраница	= Неопределено;
	
	// Поля группировки
	Если ЭтоГруппировка Тогда
		Элементы.СтраницыСКДПолейГруппировки.ТекущаяСтраница = Элементы.НастройкиСКДПолейГруппировки;
	КонецЕсли;
	
	// Выбранные поля
	НаличиеВыбораУЭлемента = КомпоновщикНастроек.Настройки.НаличиеВыбораУЭлемента(ЭлементСтруктуры)
								ИЛИ ЭтоНастройка;
	СКДЛокальныеВыбранныеПоля = НаличиеВыбораУЭлемента;
	Элементы.СКДЛокальныеВыбранныеПоля.ТолькоПросмотр = ЭтоКоллекция ИЛИ ЭтоНастройка;
	Если ЭтоКоллекция Тогда
		ТекущаяСтраницаПоляВыбора = Элементы.СКДНедоступныеНастройкиВыбранныхПолей;
	ИначеЕсли НаличиеВыбораУЭлемента Тогда
		ТекущаяСтраницаПоляВыбора = Элементы.СКДНастройкиВыбранныхПолей;
	Иначе
		ТекущаяСтраницаПоляВыбора = Элементы.СКДОтключенныеНастройкиВыбранныхПолей;
	КонецЕсли;
	Элементы.СтраницыСКДПоляВыбора.ТекущаяСтраница = ТекущаяСтраницаПоляВыбора;
	
	// Отбор
	НаличиеОтбораУЭлемента = КомпоновщикНастроек.Настройки.НаличиеОтбораУЭлемента(ЭлементСтруктуры)
								ИЛИ ЭтоНастройка;
	СКДЛокальныйОтбор = НаличиеОтбораУЭлемента;
	Элементы.СКДЛокальныйОтбор.ТолькоПросмотр = ЭтоНастройка ИЛИ ЭтаТаблицаДиаграмма;
	Если ЭтоКоллекция ИЛИ ЭтаТаблицаДиаграмма Тогда
		ТекущаяСтраницаОтбор = Элементы.СКДНедоступныеНастройкиОтбора;
	ИначеЕсли НаличиеОтбораУЭлемента Тогда
		ТекущаяСтраницаОтбор = Элементы.СКДНастройкиОтбора;
	Иначе	
		ТекущаяСтраницаОтбор = Элементы.СКДОтключенныеНастройкиОтбора;
	КонецЕсли;
	Элементы.СКДСтраницыОтбора.ТекущаяСтраница = ТекущаяСтраницаОтбор;
	
	// Порядок
	НаличиеПорядкаУЭлемента = КомпоновщикНастроек.Настройки.НаличиеПорядкаУЭлемента(ЭлементСтруктуры)
								ИЛИ ЭтоНастройка;
	СКДЛокальныйПорядок = НаличиеПорядкаУЭлемента;
	Элементы.СКДЛокальныйПорядок.ТолькоПросмотр = ЭтоНастройка ИЛИ ЭтаТаблицаДиаграмма;
	Если ЭтоКоллекция ИЛИ ЭтаТаблицаДиаграмма Тогда
		ТекущаяСтраницаПорядок = Элементы.СКДНедоступныеНастройкиПорядка;
	ИначеЕсли СКДЛокальныйПорядок Тогда
		ТекущаяСтраницаПорядок = Элементы.СКДНастройкиПорядка;
	Иначе
		ТекущаяСтраницаПорядок = Элементы.СКДОтключенныеНастройкиПорядка;
	КонецЕсли;
	Элементы.СтраницыСКДПорядок.ТекущаяСтраница = ТекущаяСтраницаПорядок;
	
	// Условное оформление
	НаличиеУсловногоОформленияУЭлемента = КомпоновщикНастроек.Настройки.НаличиеУсловногоОформленияУЭлемента(ЭлементСтруктуры);
	СКДЛокальноеУсловноеОформление = НаличиеУсловногоОформленияУЭлемента;
	Элементы.СКДЛокальноеУсловноеОформление.ТолькоПросмотр = ЭтоКоллекция;
	Если ЭтоКоллекция Тогда
		ТекущаяСтраницаУсловноеОформление = Элементы.СКДНедоступныеНастройкиУсловногоОформления;
	ИначеЕсли СКДЛокальноеУсловноеОформление Тогда
		ТекущаяСтраницаУсловноеОформление = Элементы.СКДНастройкиУсловногоОформления;
	Иначе
		ТекущаяСтраницаУсловноеОформление = Элементы.СКДОтключенныеНастройкиУсловногоОформления;
	КонецЕсли;
	Элементы.СтраницыСКДУсловногоОформления.ТекущаяСтраница = ТекущаяСтраницаУсловноеОформление;
	
	// Параметры вывода
	НаличиеПараметровВыводаУЭлемента = КомпоновщикНастроек.Настройки.НаличиеПараметровВыводаУЭлемента(ЭлементСтруктуры);
	СКДЛокальныеПараметрыВывода = НаличиеПараметровВыводаУЭлемента;
	Элементы.СКДЛокальныеПараметрыВывода.ТолькоПросмотр = ЭтоКоллекция;
	Если ЭтоКоллекция Тогда
		ТекущаяСтраницаПараметрыВывода = Элементы.СКДНедоступныеНастройкиПараметровВывода;
	ИначеЕсли НаличиеПараметровВыводаУЭлемента Тогда
		ТекущаяСтраницаПараметрыВывода = Элементы.СКДНастройкиПараметровВывода;
	Иначе
		ТекущаяСтраницаПараметрыВывода = Элементы.СКДОтключенныеНастройкиПараметровВывода;
	КонецЕсли;
	Элементы.СтраницыСКДПараметрыВывода.ТекущаяСтраница = ТекущаяСтраницаПараметрыВывода;
						
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыводВременныхТаблиц

&НаКлиенте
Процедура ВыводВременныхТаблицВыводПриИзменении(Элемент)
	
	ТекущиеДанныеВыводВременныхТаблиц = Элементы.ВыводВременныхТаблиц.ТекущиеДанные;
	УстановитьДляСтрокиВыводВременныхТаблиц(ТекущиеДанныеВыводВременныхТаблиц, ТекущиеДанныеВыводВременныхТаблиц.Вывод);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапросСВременнымиТаблицами(Команда)

	ВыполнитьОперацию("Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц");
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьПереносы(Команда)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "|", "");
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """;", "");                                    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """ВЫБРАТЬ", "ВЫБРАТЬ");                    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символ(34) + Символ(34), Символ(34));        
	
	ТекстЗапросаПриИзменении(Элементы.ТекстЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакомментироватьТекстЗапроса(Команда)
	
	УКО_ОбщегоНазначенияКлиент_ОбработкаВыделенногоТекстаПоАлгоритму(Элементы.ТекстЗапроса, ТекстЗапроса,
						"Перечисление.УКО_АлгоритмыОбработкиТекста.Закомментировать");
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьКомментарииВТекстеЗапроса(Команда)
	
	УКО_ОбщегоНазначенияКлиент_ОбработкаВыделенногоТекстаПоАлгоритму(Элементы.ТекстЗапроса, ТекстЗапроса,
						"Перечисление.УКО_АлгоритмыОбработкиТекста.УбратьКомментарии");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗамер(Команда)
	
	ВыполнитьОперацию("Замер");
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииВТекстеЗапроса(Команда)
	
	ЭлементКнопкаФункции = Элементы.ФункцииВТекстеЗапроса;
	ЭлементКнопкаФункции.Пометка = Не ЭлементКнопкаФункции.Пометка;
	
	Элементы.ФункцииЯзыкаЗапросов.Видимость = ЭлементКнопкаФункции.Пометка;
	
	Если ФункцииЯзыкаЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьДеревоФункцийЯзыкаЗапросов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Конструктор(Команда)
	
	Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(ТекущаяСтрока.Тип) Тогда
		ОткрытьКонструкторЗапроса(ТекстЗапроса);
	ИначеЕсли ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		ОткрытьКонструкторСхемыКомпоновкиДанных();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗапрос(Команда)
	
	ПроверитьПоказатьОшибку(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ДобавитьСтрокуВДеревоДанных(НСтр("ru = 'Группа'; en = 'Group'"), "Перечисление.УКО_ЭлементыДанных.Группа");
	ПослеДобавленияНовогоЭлементаВДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыеДанные(Команда)
	
	ЗапуститьОбработчикСПроверкойНаСохранностьДанных(Новый ОписаниеОповещения("ОбработчикНовыеДанные", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлКак(Команда)
	
	СохранитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеКоманда(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСтроку(Команда)
	
	ВыполнитьОперацию("Выполнение");

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтроку(Команда)
	
	// Изменяем статус выделения строки на противоположный ; РежимОтметки (по умолчанию) = Неопределено - Инвертирование
	РежимИнвертированиеВыделения = Неопределено;
	УстановитьВыделениеСтрок(Элементы.ДеревоДанных.ВыделенныеСтроки, РежимИнвертированиеВыделения);
	
	Модифицированность = Истина;
	ОбновитьЭлементыВыделенияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлКоманда(Команда)
	
	ЗапуститьОбработчикСПроверкойНаСохранностьДанных(Новый ОписаниеОповещения("ОбработчикОткрытьФайл", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПоследнийФайл(Команда)

	ИндексКоманды = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Команда.Имя,,НаправлениеПоиска.СКонца);
	ОписаниеОбработчика = Новый ОписаниеОповещения("ОбработчикОткрытьПоследнийФайл", ЭтотОбъект, ИндексКоманды);
	
	ЗапуститьОбработчикСПроверкойНаСохранностьДанных(ОписаниеОбработчика);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПоследнююНастройку(Команда)

	ИндексКоманды = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Команда.Имя,,НаправлениеПоиска.СКонца);
	ОписаниеОбработчика = Новый ОписаниеОповещения("ОбработчикОткрытьПоследнююНастройку", ЭтотОбъект, ИндексКоманды);
	
	ЗапуститьОбработчикСПроверкойНаСохранностьДанных(ОписаниеОбработчика);

КонецПроцедуры

&НаКлиенте
Процедура ВставкаПредопределенного(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВставкаПредопределенногоЗакончена", ЭтотОбъект);
	УКО_ФормыКлиент_ОткрытьДополнительную("ВставкаПредопределенногоЭлемента",,ЭтаФорма,,Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ФиксацияШапкиТабличногоДокумента(Команда)

	ПометкаФиксацияШапки = Не Элементы.ФиксацияШапкиТабличногоДокумента.Пометка;
	Элементы.ФиксацияШапкиТабличногоДокумента.Пометка = ПометкаФиксацияШапки;
	
	УКО_ТабличныйДокументКлиентСервер_ЗафиксироватьШапку(ТабличныйДокументРезультат, ПометкаФиксацияШапки);

КонецПроцедуры

&НаКлиенте
Процедура КодНаВстроенномЯзыке(Команда)
	
	ЕстьОшибки = ПроверитьПоказатьОшибку();
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", ТекущиеДанные);
	ПараметрыФормы.Вставить("Тип", ТекущаяСтрока.Тип);
	УКО_ФормыКлиент_ОткрытьДополнительную("КодНаВстроенномЯзыке", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПапкуСодержащуюФайл(Команда)
	
	ФайлДанных = Новый Файл (РабочиеДанные.Имя);
	Команда = СтрШаблон("explorer.exe /select,%1", ФайлДанных.ПолноеИмя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УКО_ОбщегоНазначенияКлиент_ПустойОбработчикОповещенийСтандартный", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, Команда);

КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РабочиеДанные", РабочиеДанные);
	УКО_ФормыКлиент_ОткрытьДополнительную("Настройки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьУровеньГруппировки (Команда)
	
	ТабличныйДокументРезультат.ПоказатьУровеньГруппировокСтрок(УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Команда.Имя,,НаправлениеПоиска.СКонца) - 1);

КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВ(Команда)
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ЭкспортВ",, ЭтаФорма,, Новый ОписаниеОповещения("ЭкспортФайлаЗакончен", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапросаДляВыделенногоТекста(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ТекстЗапросаДляРедактированияКонструктором = Элементы.ТекстЗапроса.ВыделенныйТекст;
	
	Если ПустаяСтрока(ТекстЗапросаДляРедактированияКонструктором) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выделен текст запроса (для редактирования в конструкторе)'; en = 'Query text is not selected (for editing in the designer)'"),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ГраницыВыделения", УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элементы.ТекстЗапроса));
	ОткрытьКонструкторЗапроса (ТекстЗапросаДляРедактированияКонструктором, ДополнительныеПараметры, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСхемуКомпоновкиДанных(Команда)
	
	ДобавитьСтрокуВДеревоДанных(НСтр("ru = 'Схема компоновки данных'; en = 'Data composition scheme'"), "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных");
	ПослеДобавленияНовогоЭлементаВДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВариантОтчетаСКД(Команда)
	
	ДобавитьСтрокуВДеревоДанных(НСтр("ru = 'Вариант отчета'; en = 'Report option'"), "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД");
	ПослеДобавленияНовогоЭлементаВДерево();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользовательскуюНастройкуСКД(Команда)
	
	ДобавитьСтрокуВДеревоДанных(НСтр("ru = 'Пользовательская настройка'; en = 'Custom setting'"), "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД");
	ПослеДобавленияНовогоЭлементаВДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуКомпоновкиДанныхИзФайла(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = УКО_СКДКлиентСервер_ФильтрФайловXML();
	ВыборФайла.Расширение = "xml";
	ВыборФайла.Заголовок = НСтр("ru = 'Загрузка схемы компоновки данных'; en = 'Loading the data layout diagram'");
	ВыборФайла.МножественныйВыбор = Ложь;
	
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ЗагрузитьСхемыКомпоновкиДанныхИзФайлаПослеПомещенияФайлов", ЭтотОбъект), , ВыборФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСхемуКомпоновкиДанныхВФайл(Команда)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Фильтр = УКО_СКДКлиентСервер_ФильтрФайловXML();
	ВыборФайла.Заголовок = НСтр("ru = 'Сохранение схемы компоновки данных'; en = 'Saving the data layout diagram'");
	ВыборФайла.Расширение = "xml";
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("СохранитьСхемуКомпоновкиДанныхВФайлПослеВыбораФайла", ЭтотОбъект, Новый Структура("ВыборФайла", ВыборФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСхемуКомпоновкиДанных(Команда)
	
	ПроверитьПоказатьОшибку(Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СравнитьСхемуКомпоновкиДанных(Команда)
	
	НеизменяемыеПоля = Новый Структура;
	НеизменяемыеПоля.Вставить("ОбъектЭталон");
	НеизменяемыеПоля.Вставить("ТипОбъектов");
	НеизменяемыеПоля.Вставить("ТипСравнения");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипОбъектов", "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных");
	ДополнительныеПараметры.Вставить("ТипСравнения", "Перечисление.УКО_ВариантыСравненияДанных.Тексты");
	ДополнительныеПараметры.Вставить("НеизменяемыеПоля", НеизменяемыеПоля);
	
	ОткрытьФормуСравнения(ТекущаяСтрока, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СравнитьТекстЗапроса(Команда)
	
	НеизменяемыеПоля = Новый Структура;
	НеизменяемыеПоля.Вставить("ОбъектЭталон");
	НеизменяемыеПоля.Вставить("ТипОбъектов");
	НеизменяемыеПоля.Вставить("ТипСравнения");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипОбъектов", "Перечисление.УКО_ЭлементыДанных.Запрос");
	ДополнительныеПараметры.Вставить("ТипСравнения", "Перечисление.УКО_ВариантыСравненияДанных.Тексты");
	ДополнительныеПараметры.Вставить("НеизменяемыеПоля", НеизменяемыеПоля);
	
	ОткрытьФормуСравнения(ТекущаяСтрока, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьРезультаты(Команда)
	
	НеизменяемыеПоля = Новый Структура;
	НеизменяемыеПоля.Вставить("ОбъектЭталон");
	НеизменяемыеПоля.Вставить("ТипОбъектов");
	НеизменяемыеПоля.Вставить("ТипСравнения");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипОбъектов", ТекущаяСтрока.Тип);
	ДополнительныеПараметры.Вставить("ТипСравнения", "Перечисление.УКО_ВариантыСравненияДанных.Результаты");
	ДополнительныеПараметры.Вставить("НеизменяемыеПоля", НеизменяемыеПоля);
	
	ОткрытьФормуСравнения(ТекущаяСтрока, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСтроки(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоДанных.ВыделенныеСтроки;
	
	СписокОшибок = Новый Массив;
	
	// Определим есть ли строки группы и не выделены разные типы строк
	ЕстьСтрокаГруппа = Ложь; НесовместимыеТипыСтрок = Ложь; ПоследнийТипСтроки = Неопределено;
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл 
		
		ВыделеннаяСтрока = ДеревоДанных.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);

		Если ВыделеннаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда
			ЕстьСтрокаГруппа = Истина;
		КонецЕсли;
		
		Если ПоследнийТипСтроки <> Неопределено Тогда 
			
			Если ПоследнийТипСтроки <> ВыделеннаяСтрока.Тип
					И (УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ПоследнийТипСтроки) = Ложь ИЛИ УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ВыделеннаяСтрока.Тип) = Ложь)	Тогда
				НесовместимыеТипыСтрок = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
		ПоследнийТипСтроки = ВыделеннаяСтрока.Тип;
		
	КонецЦикла;
	
	Если ЕстьСтрокаГруппа Тогда
		СписокОшибок.Добавить(НСтр("ru = 'Нельзя выбирать группы'; en = 'You cannot select groups'"));
	КонецЕсли;
	Если ВыделенныеСтроки.Количество() > 2 Тогда
		СписокОшибок.Добавить(НСтр("ru = 'Необходимо выделять не более 2-х строк'; en = 'It is necessary to select no more than 2 lines'"));
	КонецЕсли;
	Если НесовместимыеТипыСтрок Тогда
		СписокОшибок.Добавить(НСтр("ru = 'Несовместимые типы строк'; en = 'Incompatible string types'"));
	КонецЕсли;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		СписокОшибок.Добавить(НСтр("ru = 'Нет выделенных строк'; en = 'No rows selected'"));
	КонецЕсли;
	
	Если СписокОшибок.Количество() > 0 Тогда
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Проблема сравнения: %1'; en = 'Comparison problem: %1'"), СтрСоединить(СписокОшибок, ", ")),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Возврат;
	КонецЕсли;
	
	НеизменяемыеПоля = Новый Структура;
	НеизменяемыеПоля.Вставить("ОбъектЭталон");
	НеизменяемыеПоля.Вставить("ТипОбъектов");
	
	СтрокаЭталон = ДеревоДанных.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	СтрокаНовый = Неопределено;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СтрокаНовый = ДеревоДанных.НайтиПоИдентификатору(ВыделенныеСтроки[1]);
		НеизменяемыеПоля.Вставить("ОбъектНовый");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаНовый", СтрокаНовый);
	ДополнительныеПараметры.Вставить("ТипОбъектов", СтрокаЭталон.Тип);
	ДополнительныеПараметры.Вставить("НеизменяемыеПоля", НеизменяемыеПоля);
	
	ОткрытьФормуСравнения(СтрокаЭталон, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВерсий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроверкаОбновления", ПроверкаОбновления);
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ИсторияВерсий", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоВПоддержку(Команда)
	
	ПерейтиПоНавигационнойСсылке(КомандаОтправкиПисьма());

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	
	ЗапуститьОбработчикСПроверкойНаСохранностьДанных(Новый ОписаниеОповещения("ОбработчикОткрытьДиалогВыбораНастройки", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуКак(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранениеНастройкиЗавершено", ЭтотОбъект);
	УКО_ФормыКлиент_ОткрытьДиалогВыбораНастроекДанных("Перечисление.УКО_РежимДиалогаУправлениеДаннымиВНастройках.Сохранение", ЭтаФорма, РабочиеДанные, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатВОтдельномОкне(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийРезультат.Адрес) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет результата для просмотра в отдельном окне'; en = 'No result to view in separate window'"),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Имя", ТекущаяСтрока.Имя);
	ПараметрыФормы.Вставить("АдресРезультата", ТекущийРезультат.Адрес);
	ПараметрыФормы.Вставить("АдресДанныхРасшифровки", ТекущийРезультат.АдресДанныхРасшифровки);
	ПараметрыФормы.Вставить("ФиксацияШапки", Элементы.ФиксацияШапкиТабличногоДокумента.Пометка);
	ПараметрыФормы.Вставить("ФиксацияШапкиДоступность", Элементы.ФиксацияШапкиТабличногоДокумента.Доступность);
	ПараметрыФормы.Вставить("ВсеСтрокиВыведены", ТекущийРезультат.ВсеСтрокиВыведены);
	
	Если ЗначениеЗаполнено(ТекущийРезультат.АдресСхемыКомпоновкиДанных) Тогда
		ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", ТекущийРезультат.АдресСхемыКомпоновкиДанных);
	КонецЕсли;

	УКО_ФормыКлиент_ОткрытьДополнительную("РезультатВОтдельномОкне", ПараметрыФормы, , Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЯчейки(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаВыделитьЯчейки(ТекущийРезультат.Адрес, ТабличныйДокументРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьUIDСсылки(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаКопироватьСсылку(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылкуКодНаВстроенномЯзыке(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаКопироватьСсылку(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаВСоответствияОбъектовИнформационныхБаз(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаСсылкаВСоответствияОбъектовИнформационныхБаз(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов(Команда)
	
	УКО_ТабличныйДокументКлиент_КомандаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов(ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСсылки(Команда)
	
	УКО_ТабличныйДокументКлиент_НайтиСсылки(ЭтаФорма, ТабличныйДокументРезультат, ТекущийРезультат.АдресДанныхРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуРазработки(Команда)
	
	ПерейтиПоНавигационнойСсылке(УКО_ОбщегоНазначенияКлиентСервер_WebСайтРасширения());

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКГлавномуЗапросу(Команда)
	
	СтрокаГлавныйЗапрос = ПолучитьГлавныйЗапрос(ТекущаяСтрока);
	Элементы.ДеревоДанных.ТекущаяСтрока = СтрокаГлавныйЗапрос.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВоВложенный(Команда)
	
	УКО_ФормыКлиент_ОткрытьРедактированиеИдентификатора(НСтр("ru = 'Введите идентификатор для запроса'; en = 'Enter an ID for the request'"), 
						"Перечисление.УКО_РежимРедактированияИдентификатора.Идентификатор", ЭтаФорма,
						Новый ОписаниеОповещения("ВводИдентификатораВложенногоЗапросаЗавершен", ЭтотОбъект), НСтр("ru = 'ВложенныйЗапрос'; en = 'SubQuery'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВсеСтрокиРезультата(Команда)
	
	Строка = НайтиСтрокуПоUID(ДеревоДанных, ТекущийРезультат.АктуаленПоСтроке);
	
	Если Строка <> Неопределено Тогда
		
		ВыполнитьОперацию(ТекущийРезультат.РежимВыполнения, Истина, Строка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)
	
	ВыделенныеСтроки = Элементы.ПараметрыЗапроса.ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		
		ИменаПараметров = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл 
			
			СтрокаПараметр = ПараметрыЗапроса.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ИменаПараметров.Добавить(СтрокаПараметр.Имя);
			
		КонецЦикла;
		
		ДанныеЗаполнения = ПодготовитьДанныеЗаполненияПараметров(ИменаПараметров, ДеревоДанных);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Имена", ИменаПараметров);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		
		ДополнительныеПараметры = Новый Структура;
		Если ИменаПараметров.Количество() = 1 Тогда
			ДополнительныеПараметры.Вставить("Имя", ИменаПараметров[0]);
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ЗаполнениеПараметровЗакончено", ЭтотОбъект, ДополнительныеПараметры);
		
		УКО_ФормыКлиент_ОткрытьДополнительную("ЗаполнениеПараметров", ПараметрыФормы, ЭтаФорма,, Оповещение);
		
	Иначе 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для заполнения параметров'; en = 'There is no data to populate parameters'"),, УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьПараметр(Команда)
	
	ПараметрЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Имя", ПараметрЗапросаТекущиеДанные.Имя);
	
	ВсеПараметры = Новый СписокЗначений;
	Для Каждого Параметр Из ТекущиеДанные.Параметры Цикл 
		
		Если Параметр.Ключ = ПараметрЗапросаТекущиеДанные.Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПараметры.Добавить(Параметр.Ключ);
		
	КонецЦикла;
	ПараметрыФормы.Вставить("ВсеПараметры", ВсеПараметры);
	
	ДополнительныеПараметры = Новый Структура("Имя", ПараметрЗапросаТекущиеДанные.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереименованиеПараметраЗавершено", ЭтотОбъект, ДополнительныеПараметры);
	УКО_ФормыКлиент_ОткрытьДополнительную("ПереименованиеПараметра", ПараметрыФормы, ЭтаФорма,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипПараметра(Команда)
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ПреобразованиеТипаЗначенияПараметраЗавершено", ЭтотОбъект, Новый Структура);
	
	ПараметрыЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ИмяПараметра = ПараметрыЗапросаТекущиеДанные.Имя;
	ОписаниеТиповПараметра = ТекущиеДанные.Параметры[ИмяПараметра];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Параметр ""%1""'; en = 'Parameter ""%1""'"), ИмяПараметра));
	УКО_ФормыКлиент_ОткрытьРедактированиеТипаЗначения(ЭтаФорма, "Перечисление.УКО_РежимРедактированияТипаЗначения.ВыборТипа",
														ОписаниеТиповПараметра, ОписаниеОповещенияЗавершение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторСтрокиДляОтладки(Команда)
	
	УКО_ФормыКлиент_ОткрытьДополнительную("КонструкторСтрокиДляОтладки", ,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультата(Команда)
	
	ЕстьОшибки = ПроверитьПоказатьОшибку();
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗапускОбработкиРезультата();

КонецПроцедуры

&НаКлиенте
Процедура АнализироватьПланЗапроса(Команда)
	
	// Необходимо подождать т.к. запись в файл технологического журнала иногда не успевает
	Пока ТекущаяДата() < ТекущийРезультат.ОкончаниеВыполненияНаКлиенте + 2 Цикл // +2 секунды
	КонецЦикла;
	
	КаталогЛоговЖурнала = НастройкиОбработки.КаталогЛоговТехнологическогоЖурнала;
	ПолноеИмяФайлаЖурнала = УКО_АнализПланаЗапросаВызовСервера_ПолноеИмяLogФайлаТехнологическогоЖурнала(ТекущийРезультат.IDПроцесса, КаталогЛоговЖурнала, ТекущийРезультат.НачалоВыполнения);
	
	Если ПолноеИмяФайлаЖурнала = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось найти файл логов на сервере (возможно не включен технологический журнал)'; en = 'Log file could not be found on the server (technology log may not be enabled)'"),, УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Имя", ТекущаяСтрока.Имя);
		ПараметрыФормы.Вставить("UID", ТекущийРезультат.UID);
		ПараметрыФормы.Вставить("ОписанияТиповПараметров", ТекущийРезультат.ОписанияТиповПараметров);
		ПараметрыФормы.Вставить("ИмяФайла", ПолноеИмяФайлаЖурнала);
		
		УКО_ФормыКлиент_ОткрытьДополнительную("АнализПланаЗапроса", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВYouTubeКанал(Команда)
	
	ПерейтиПоНавигационнойСсылке(УКО_ОбщегоНазначенияКлиентСервер_YouTubeКаналРасширения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОбновления(Команда)
	
	УКО_ПроверкаОбновленийКлиент_ОбработкаДоступноОбновление(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АнализИсполняемыхЗапросовРезультата(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес", ТекущийРезультат.АдресИсполняемыхЗапросовСКД);
	
	УКО_ФормыКлиент_ОткрытьДополнительную("АнализИсполняемыхЗапросов", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзмененияВПланеОбмена(Команда)
	
	ЕстьОшибки = ПроверитьПоказатьОшибку();
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗапускРегистрацииИзмененийВПланеОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура АнализИсполняемыхЗапросов(Команда)
	
	ВыполнитьОперацию("Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.ПолучениеИсполняемыхЗапросов");

КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВоВнешнийОтчет(Команда)
	
	ЕстьОшибки = ПроверитьПоказатьОшибку();
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Имя", ТекущаяСтрока.Имя);
	ПараметрыФормы.Вставить("Данные", ТекущиеДанные);

	УКО_ФормыКлиент_ОткрытьДополнительную("ЭкспортВоВнешнийОтчет", ПараметрыФормы, ЭтаФорма,,Новый ОписаниеОповещения("ЭкспортВоВнешнийОтчетФайлаЗакончен", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДанных(Команда)
	
	ЭлементНастройкиДанных = Элементы.НастройкиДанных;
	ЭлементНастройкиДанных.Пометка = Не ЭлементНастройкиДанных.Пометка;
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводВременныхТаблицУстановитьВыводить(Команда)
	
	УстановитьВыводВременныхТаблиц(НСтр("ru = 'Выводить'; en = 'Output'"));

КонецПроцедуры

&НаКлиенте
Процедура ВыводВременныхТаблицУстановитьНеВыводить(Команда)
	
	УстановитьВыводВременныхТаблиц(НСтр("ru = 'Не выводить'; en = 'Do not output'"));

КонецПроцедуры

&НаКлиенте
Процедура ВыводВременныхТаблицУстановитьСвернуто(Команда)
	
	УстановитьВыводВременныхТаблиц(НСтр("ru = 'Свернуто'; en = 'Minimized'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РедактированиеЗапросаКонструкторомЗакончено(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		РедактируетсяВыделенныйТекст = ДополнительныеПараметры.Свойство("ГраницыВыделения");
		
		НовыйТекстЗапроса = Результат;
		Если РедактируетсяВыделенныйТекст Тогда
			
			ГраницыВыделения = ДополнительныеПараметры.ГраницыВыделения;
			Элементы.ТекстЗапроса.ВыделенныйТекст = УКО_ЗапросКлиентСервер_СкорректироватьТабуляциюВставляемогоТекста(Результат, Элементы.ТекстЗапроса.ВыделенныйТекст);
			
			// Вернем выделение текста
			НачалоСтроки = ГраницыВыделения.НачалоСтроки; НачалоКолонки = ГраницыВыделения.НачалоКолонки;
			ГраницыВыделения = УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элементы.ТекстЗапроса);
			Элементы.ТекстЗапроса.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки,
															ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);
		Иначе 
			ТекстЗапроса = НовыйТекстЗапроса;
		КонецЕсли;
		
		ИзменяемыеПоля = Новый Структура;
		ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
		ИзменяемыеПоля.Вставить("Текст", ТекстЗапроса);
		УКО_ДанныеКлиент_ИзменитьПоля(ЭтаФорма, ТекущаяСтрока, ИзменяемыеПоля);
		
		ПроверитьПоказатьОшибку(Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормы ()
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТипСтроки = Неопределено;
	Иначе
		ТипСтроки = ТекущаяСтрока.Тип;
	КонецЕсли;
	
	ЭтоСтрока = (ТекущаяСтрока <> Неопределено);
	ЭтоСтрокаЗапрос = (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Запрос");
	ЭтоСтрокаСхемаКомпоновкиДанных = (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных");
	ЭтоСтрокаГруппа = (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Группа");
	ЭтоСтрокаВложенныйЗапрос = (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос");
	ЭтоСтрокаЗапросИлиПодЗапрос = ЭтоСтрокаЗапрос ИЛИ ЭтоСтрокаВложенныйЗапрос;
	ЭтоСтрокаВариантОтчетаСКД = (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД");
	ЭтоСтрокаПользовательскаяНастройкаСКД = (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД");
	ЭтоСтрокаСКД = УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ТипСтроки);
	КоличествоВыделенныхСтрок = Элементы.ДеревоДанных.ВыделенныеСтроки.Количество();
	ДоступностьКонструктора = ЭтоСтрокаЗапрос ИЛИ ЭтоСтрокаСхемаКомпоновкиДанных;
	ДоступностьКонструктораДляВыделенногоТекста = ЭтоСтрокаЗапрос;
	
	//-------------------------------------------------------------------------------------------------------------------
	
	// Закладка прочее -------------------------------------------------------------------
	Элементы.ГруппаВыводВременныхТаблиц.Видимость = ЭтоСтрокаЗапрос;
	Если ЭтоСтрокаЗапрос Тогда
		ЗаполнитьВыводВременныхТаблиц();
	КонецЕсли;
	
	// Представление
	Если ЭтоСтрока Тогда
		Представление = ТекущаяСтрока.Имя;
	Иначе 
		Представление = "";
	КонецЕсли;
	Элементы.Представление.Доступность = ЭтоСтрока;
	
	// ИспользованиеВнешнихФункций
	Если ЭтоСтрокаСхемаКомпоновкиДанных Тогда
		ИспользованиеВнешнихФункций = ТекущиеДанные.ИспользованиеВнешнихФункций;
	КонецЕсли;
	Элементы.ИспользованиеВнешнихФункций.Видимость = ЭтоСтрокаСхемаКомпоновкиДанных;
	
	// Элементы Форма
	Элементы.ДанныеНастройка.Видимость = Элементы.НастройкиДанных.Пометка;
	Элементы.Конструктор.Доступность = ДоступностьКонструктора;
	Элементы.ФормаОбработкаРезультата.Доступность = ЭтоСтрокаЗапрос;
	Элементы.ФормаКодНаВстроенномЯзыке.Доступность = ЭтоСтрокаЗапрос ИЛИ ЭтоСтрокаСКД;
	Элементы.ФормаЗарегистрироватьИзмененияВПланеОбмена.Доступность = ЭтоСтрокаЗапрос;
	Элементы.ФормаОткрытьПапкуСодержащуюФайл.Доступность = ЗначениеЗаполнено(РабочиеДанные.Имя)
																И РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Файл";
	ЕстьЗамерВремениВыполнения = ЭтоСтрокаЗапрос ИЛИ ЭтоСтрокаСКД ИЛИ ЭтоСтрокаВложенныйЗапрос;
	Элементы.ОбновитьЗамер.Доступность = ЕстьЗамерВремениВыполнения;
	Если ЕстьЗамерВремениВыполнения Тогда
		Элементы.ОбновитьЗамер.Заголовок = УКО_ОбщегоНазначенияКлиентСервер_ПредставлениеВремениВМс(ТекущиеДанные.ВремяВыполнения);
	КонецЕсли;
	
	Элементы.Выполнить.Доступность = ЭтоСтрокаЗапросИлиПодЗапрос ИЛИ ЭтоСтрокаСКД;
	Элементы.ВыполнитьЗапросСВременнымиТаблицами.Видимость = ЭтоСтрокаЗапрос;
	Элементы.ВыполнитьАнализИсполняемыхЗапросов.Видимость = ЭтоСтрокаСКД;
	
	ОбновитьЭлементыВыделенияСтроки();
	
	// Управление доступностью "Добавить"
	ДоступностьДобавленияВариантаОтчетаСКД = ЭтоСтрокаСхемаКомпоновкиДанных;
	Элементы.ДеревоДанныхДобавитьВариантОтчетаСКД.Доступность = ДоступностьДобавленияВариантаОтчетаСКД;
	Элементы.ДобавитьВариантОтчетаСКД1.Доступность = ДоступностьДобавленияВариантаОтчетаСКД;
	
	ДоступностьДобавленияПользовательскойНастройкиСКД = ЭтоСтрокаСхемаКомпоновкиДанных ИЛИ ЭтоСтрокаВариантОтчетаСКД;
	Элементы.ДеревоДанныхДобавитьПользовательскуюНастройкуСКД.Доступность = ДоступностьДобавленияПользовательскойНастройкиСКД;
	Элементы.ДобавитьПользовательскуюНастройкуСКД1.Доступность = ДоступностьДобавленияПользовательскойНастройкиСКД;
	
	ДоступностьДобавленияГруппы = НЕ (ЭтоСтрокаВариантОтчетаСКД ИЛИ ЭтоСтрокаПользовательскаяНастройкаСКД);
	Элементы.ДобавитьГруппу.Доступность = ДоступностьДобавленияГруппы;
	Элементы.ДобавитьГруппу1.Доступность = ДоступностьДобавленияГруппы;
	
	ДоступностьДобавленияЗапроса = НЕ (ЭтоСтрокаВариантОтчетаСКД ИЛИ ЭтоСтрокаПользовательскаяНастройкаСКД);
	Элементы.ДобавитьЗапрос.Доступность = ДоступностьДобавленияЗапроса;
	Элементы.ДобавитьЗапрос1.Доступность = ДоступностьДобавленияЗапроса;

	ДоступностьДобавленияСхемыКомпоновкиДанных = НЕ (ЭтоСтрокаВариантОтчетаСКД ИЛИ ЭтоСтрокаПользовательскаяНастройкаСКД);
	Элементы.ДобавитьСхемуКомпоновкиДанных.Доступность = ДоступностьДобавленияСхемыКомпоновкиДанных;
	Элементы.ДобавитьСхемуКомпоновкиДанных1.Доступность = ДоступностьДобавленияСхемыКомпоновкиДанных;
	
	// Управление видимостью закладок
	Элементы.СтраницаСхемаКомпоновкиДанныхXML.Видимость = ЭтоСтрокаСхемаКомпоновкиДанных;
	Элементы.СтраницаПараметрыЗапроса.Видимость = ЭтоСтрокаЗапросИлиПодЗапрос;
	Элементы.СтраницаТекстЗапроса.Видимость = ЭтоСтрокаЗапросИлиПодЗапрос;
	
	ИспользуютсяВнешниеИсточники = УКО_ДанныеКлиентСервер_ЭтоТипСтрокиСИспользованиемВнешнихИсточников(ТипСтроки);
	Элементы.СтраницаВнешниеИсточники.Видимость = ИспользуютсяВнешниеИсточники;
	Если ИспользуютсяВнешниеИсточники Тогда
		ЗаполнитьВнешниеИсточники();
	КонецЕсли;
	
	Элементы.СтраницаВариантОтчетаСКД.Видимость = ЭтоСтрокаВариантОтчетаСКД;
	Элементы.СтраницаПользовательскаяНастройкаСКД.Видимость = ЭтоСтрокаПользовательскаяНастройкаСКД;
	Элементы.СтраницаПрочее.Видимость = НЕ ЭтоСтрокаВложенныйЗапрос;
		
	// Элементы ДеревоДанных
	Элементы.СкопироватьСтроку.Доступность = (КоличествоВыделенныхСтрок = 1);
	Элементы.СкопироватьСтроку1.Доступность = (КоличествоВыделенныхСтрок = 1);
	Элементы.Добавить.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.Добавить1.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.Изменение.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.Изменение1.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.Порядок.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.Сортировка.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.УдалитьСтроку.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.УдалитьСтроку1.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.ДеревоДанныхКонтекстноеМенюСравнитьСтроки.Доступность = Не ЭтоСтрокаВложенныйЗапрос;
	Элементы.КонструкторВКонтекстномМенюДерева.Доступность = ДоступностьКонструктора;
	
	// Элементы ТабличныйДокументРезультат
	Элементы.МаксимумСтрок.Видимость = ЭтоСтрокаЗапрос;
	Если ЭтоСтрокаЗапрос Тогда
		
		Если ТекущиеДанные.МаксимумСтрок = Неопределено Тогда
			МаксимумСтрок = НастройкиОбработки.МаксимальноеКоличествоВыводимыхСтрок;
		Иначе 
			МаксимумСтрок = ТекущиеДанные.МаксимумСтрок;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.АнализироватьПланЗапроса.Видимость = НастройкиОбработки.АнализироватьПланЗапроса И ЗначениеЗаполнено(ТекущийРезультат.IDПроцесса);
	Элементы.АнализИсполняемыхЗапросовРезультата.Видимость = ЗначениеЗаполнено(ТекущийРезультат.АдресИсполняемыхЗапросовСКД);
	
	НеВсеСтрокиВыведены = (ТекущийРезультат.ВсеСтрокиВыведены = Ложь);
	Элементы.КнопкаНеВсеСтрокиВыведены.Видимость = НеВсеСтрокиВыведены;
	Элементы.ГруппаНеВсеСтрокиВыведены.Видимость = НеВсеСтрокиВыведены;
	Если НеВсеСтрокиВыведены Тогда
		ЦветФона = Новый Цвет(255,250, 217);
	Иначе 
		ЦветФона = Новый Цвет();
	КонецЕсли;
	Элементы.ГруппаМаксимумСтрок.ЦветФона = ЦветФона;
	
	Если ЭтоСтрокаСхемаКомпоновкиДанных Тогда
		
		СхемаКомпоновкиДанныхXML = ТекущиеДанные.Текст;
		ОбновитьЭлементыОшибки();
		
	ИначеЕсли ЭтоСтрокаЗапросИлиПодЗапрос Тогда
		
		// Элементы ТекстЗапроса 
		
		// ++тм   
		//ТекстЗапроса = ТекущиеДанные.Текст;
		Если ЭтаФорма.ВладелецФормы <> Неопределено 
			И ЭтаФорма.ВладелецФормы.ИмяФормы = "Справочник.тм_ДинамическиеПодписки.Форма.ФормаЭлемента"  Тогда
		Иначе
			ТекстЗапроса = ТекущиеДанные.Текст;
		КонецЕсли; 
		// --тм        
		
		Элементы.КоманднаяПанельКнопкиТекстаЗапроса.Видимость = ЭтоСтрокаЗапрос;
		Элементы.КонструкторЗапросаКонтекстноеМеню.Доступность = ДоступностьКонструктора;
		Элементы.КоманднаяПанельТекстаЗапросаКонструкторЗапроса.Доступность = ДоступностьКонструктора;
		Элементы.ТекстЗапросаКонтекстноеМенюКонструкторЗапросаДляВыделенногоТекста.Доступность = ДоступностьКонструктораДляВыделенногоТекста;
		Элементы.КоманднаяПанельТекстаЗапросаКонструкторЗапросаДляВыделенногоТекста.Доступность = ДоступностьКонструктораДляВыделенногоТекста;
		Элементы.ТекстЗапросаКонтекстноеМенюПреобразоватьВоВложенный.Доступность = ДоступностьКонструктораДляВыделенногоТекста;
		Элементы.КоманднаяПанельТекстаЗапросаКонструкторЗапросаПреобразоватьВоВложенный.Доступность = ДоступностьКонструктораДляВыделенногоТекста;
		Элементы.ТекстЗапросаКонтекстноеМенюГруппаРаботаСТекстом.Доступность = ЭтоСтрокаЗапрос;
		Элементы.ТекстЗапроса.ТолькоПросмотр = ЭтоСтрокаВложенныйЗапрос;
		Элементы.ТекстЗапроса.ЦветФона = УКО_ОбщегоНазначенияКлиентСервер_ЦветФонаЭлементРедактируется(НЕ Элементы.ТекстЗапроса.ТолькоПросмотр);
		
		// Элементы ПараметрыЗапроса 
		ЗаполнитьЗакладкуПараметры();
		
		Элементы.ПараметрыЗапроса.ТолькоПросмотр = ЭтоСтрокаВложенныйЗапрос;
		Элементы.ПараметрыЗапроса.ЦветФона = УКО_ОбщегоНазначенияКлиентСервер_ЦветФонаЭлементРедактируется(НЕ Элементы.ПараметрыЗапроса.ТолькоПросмотр);
		Элементы.ГруппаИнформацияПараметровРедактируютсяВГлавномЗапросе.Видимость = ЭтоСтрокаВложенныйЗапрос;
		
		ДоступныДействияСПараметрами = ЭтоСтрокаЗапрос И (ПараметрыЗапроса.Количество() > 0);
		Элементы.ПараметрыЗапросаКонтекстноеМенюЗаполнитьПараметры.Доступность = ДоступныДействияСПараметрами;
		Элементы.ПараметрыЗапросаКонтекстноеМенюПереименоватьПараметр.Доступность = ДоступныДействияСПараметрами;
		Элементы.ПараметрыЗапросаЗаполнитьПараметры.Доступность = ДоступныДействияСПараметрами;
		Элементы.ПараметрыЗапросаПереименоватьПараметр.Доступность = ДоступныДействияСПараметрами;
		Элементы.ПараметрыЗапросаИзменитьТипПараметра.Доступность = ДоступныДействияСПараметрами;
		
		Ошибка = ТекущиеДанные.Ошибка;
		ОшибкаВТекстеЗапроса = (Ошибка <> Неопределено);
		Элементы.ГруппаИнформацияПараметровНеПолученыОшибкаВТексте.Видимость = ЭтоСтрокаЗапрос И ОшибкаВТекстеЗапроса;
		Если ОшибкаВТекстеЗапроса Тогда
			ПредставлениеОшибки = УКО_СтрокиКлиентСервер_Сократить(УКО_ОбщегоНазначенияКлиентСервер_ПредставлениеОшибкиВТексте(Ошибка), 50);
			Элементы.ПараметрыНеПолученыОшибкаВТекстеПерейти.Заголовок = ПредставлениеОшибки;
		КонецЕсли;
		Элементы.ГруппаИнформацияПараметровНеПолученыТребуетсяПроверка.Видимость = ЭтоСтрокаЗапрос И ТекущиеДанные.ТребуетсяПроверка;
		
		ОбновитьЭлементыОшибки();
		
	ИначеЕсли ЭтоСтрокаПользовательскаяНастройкаСКД
			ИЛИ ЭтоСтрокаВариантОтчетаСКД Тогда
		
		ЗагрузитьДанныеВКомпоновщикНастроек(ПолныеДанныеСКД(ТекущаяСтрока));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработчикСПроверкойНаСохранностьДанных(ОписаниеОбработчика)
	
	Если Модифицированность Тогда
		
		// Список вариантов ответа
		ВариантыОтвета = Новый СписокЗначений;
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Да,		НСтр("ru = 'Сохранить'; en = 'Save'"));
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Нет,		НСтр("ru = 'Не сохранять'; en = 'Not save'"));
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Отмена,	НСтр("ru = 'Отмена'; en = 'Cancel'"));
		
		// Вопрос "сохранить данные"?
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросСохраненияЗавершение", ЭтотОбъект, ОписаниеОбработчика),
								НСтр("ru = 'Сохранить изменения?'; en = 'Save the changes?'"), ВариантыОтвета,, КодВозвратаДиалога.Да, УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	Иначе 
		
		ВыполнитьОбработкуОповещения(ОписаниеОбработчика);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросСохраненияЗавершение(Результат, ОписаниеОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда //Отмена
		
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		СохранитьДанные(, ОписаниеОбработчика);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда		
		
		ВыполнитьОбработкуОповещения(ОписаниеОбработчика);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайловДанных(Истина, Истина);
	ДиалогОткрытияФайла.Расширение = УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных();
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Открытие данных'; en = 'Opening data'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ОткрытиеФайлаЗакончено", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаЗакончено(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		ЗагрузитьДанныеИзФайла (ВыбранныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьДанныеИзФайла (ИмяФайла)
	
	Попытка
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗаконченоПомещениеФайлаВХранилищеДляОткрытия", ЭтотОбъект), , ИмяФайла, Ложь);
	Исключение
		
		ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Файл",, ИмяФайла);
		
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПредставлениеОшибки = КраткоеПредставлениеОшибки;
		
		ПоказатьПредупреждение(,ПредставлениеОшибки,,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());

	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗаконченоПомещениеФайлаВХранилищеДляОткрытия(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт 

	ИндексСимвола = СтрНайти(ВыбранноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Расширение = НРег(Сред(ВыбранноеИмяФайла, ИндексСимвола + 1));
	
	Попытка
		
		Если Расширение = УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных() Тогда
			МассивДанных = УКО_MCRФорматВызовСервера_Прочитать(Адрес, УникальныйИдентификатор);
			РабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Файл", ВыбранноеИмяФайла);
		ИначеЕсли Расширение = "dcr" Тогда
			МассивДанных = УКО_ЧтениеDCRВызовСервера_ПрочитатьИзВременногоХранилища(Адрес, УникальныйИдентификатор);
			РабочиеДанные(Неопределено, Неопределено);
		ИначеЕсли Расширение = "q1c" Тогда
			МассивДанных = УКО_ЧтениеQ1CВызовСервера_ПрочитатьИзВременногоХранилища(Адрес, УникальныйИдентификатор);
			РабочиеДанные(Неопределено, Неопределено);
		ИначеЕсли Расширение = "erf" Тогда
			МассивДанных = УКО_ЧтениеERFВызовСервера_ПрочитатьИзВременногоХранилища(Адрес, УникальныйИдентификатор);
			РабочиеДанные(Неопределено, Неопределено);
		КонецЕсли;
		
		УКО_ДанныеКлиент_Очистить(ЭтаФорма);
		
		ЗагрузитьДанныеИзМассива(МассивДанных, ДеревоДанных);
		РаскрытьВеткиДереваВСоответствииСДанными(ДеревоДанных);
		ОбновитьСтруктуруЗапросов(ПолучитьСтрокиДереваДанных(ДеревоДанных, "Перечисление.УКО_ЭлементыДанных.Запрос"));
		ОбновитьЗаголовок();
		
		ОчиститьРезультат(ТабличныйДокументРезультат);
		
		ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Файл", ВыбранноеИмяФайла);
		
	Исключение
		
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Ошибка при загрузке файла: %1
												|%2'; en = 'Error loading file: %1
												|%2'"), ВыбранноеИмяФайла, КраткоеПредставлениеОшибки),, УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовок()
	
	Если РабочиеДанные.Тип = Неопределено Тогда
		
		Заголовок = НСтр("ru = '<Новый>'; en = '<New>'");
		
	ИначеЕсли РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда 
		
		Если НастройкиОбработки.СокращенныйЗаголовокОсновногоОкна Тогда
			ИмяФайла = УКО_СтрокиКлиентСервер_ПолноеИмяФайлаКратко(РабочиеДанные.Имя);
		Иначе 
			ИмяФайла = РабочиеДанные.Имя;
		КонецЕсли;
		
		Заголовок = СтрШаблон("%1", ИмяФайла);
		
	ИначеЕсли РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда 
		
		Заголовок = СтрШаблон("(%1)", РабочиеДанные.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает строку по идентификатору (Приемник перетаскивания) для корня - ДеревоДанных 
//
// Параметры:
//  ИдентификаторСтроки (Число) - Идентификатор строки
// Возвращаемое значение:
//   (ДанныеФормыЭлементДерева,ДанныеФормыДерева) - Строка полученная по идентификатору либо ДеревоДанных для Неопределено
//
&НаКлиенте
Функция ПолучитьСтрокуПриемникПеретаскиванияДереваДанных (ИдентификаторСтроки)
	
	Если ИдентификаторСтроки = Неопределено Тогда //перенос в корень дерева
		Возврат ДеревоДанных;
	Иначе
		Возврат ДеревоДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;	
	
КонецФункции

// Производит установку, снятие или инвертирование выделения для обрабатываемого массива строк 
//
// Параметры:
//  ОбрабатываемыеСтроки	(Массив)				- Массив идентификаторов строки
//  РежимОтметки			(Булево, Неопределено)	- Режим установки отметки Инвертировать - Неопределено, Установить - Истина, Снять - Ложь
//
&НаКлиенте
Процедура УстановитьВыделениеСтрок(ОбрабатываемыеСтроки, РежимОтметки = Неопределено)
	
	Для Каждого ИдентификаторСтроки Из ОбрабатываемыеСтроки Цикл
		
		ОбрабатываемаяСтрока = ДеревоДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если РежимОтметки = Неопределено Тогда //Инвертирование
			ОбрабатываемаяСтрока.Выделение = НЕ ОбрабатываемаяСтрока.Выделение;
		Иначе // Истина - установить отметку, Ложь - снять
			ОбрабатываемаяСтрока.Выделение = РежимОтметки
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит управление свойствами элементов формы обслуживающих команду выделение 
//
// Параметры: (отсутствуют)
//
&НаКлиенте
Процедура ОбновитьЭлементыВыделенияСтроки()
	
	ЕстьСтрокиВДереве = ДеревоДанных.ПолучитьЭлементы().Количество();
	
	Элементы.ВыделитьСтроку.Доступность = (ЕстьСтрокиВДереве);
	Элементы.ВыделитьСтроку1.Доступность = (ЕстьСтрокиВДереве);
	
	Если ЕстьСтрокиВДереве Тогда
		
		ЕстьВыделенныеСтроки = Ложь;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоДанных.ВыделенныеСтроки Цикл
			ОбрабатываемаяСтрока = ДеревоДанных.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ОбрабатываемаяСтрока.Выделение Тогда
				ЕстьВыделенныеСтроки = Истина; //Есть отмеченные строки значит кнопка должна быть Нажатой (отмеченной)
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ВыделитьСтроку.Пометка = ЕстьВыделенныеСтроки;
		Элементы.ВыделитьСтроку1.Пометка = ЕстьВыделенныеСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыОшибки()
	
	Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(ТекущаяСтрока.Тип) Тогда
		
		ЭлементГруппаОшибка = Элементы.ГруппаОшибкаВЗапросе;
		ЭлементТекст = Элементы.ТекстЗапроса;
		ЭлементТекстОшибки = Элементы.ОшибкаВЗапросеТекст;
		ЭлементКартинкаОшибки = Элементы.ОшибкаВЗапросеКартинка;
		
	ИначеЕсли ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		
		ЭлементГруппаОшибка = Элементы.ГруппаОшибкаВСхемеКомпоновкиДанных;
		ЭлементТекст = Элементы.СхемаКомпоновкиДанныхXML;
		ЭлементТекстОшибки = Элементы.ОшибкаВСхемеКомпоновкиДанныхТекст;
		ЭлементКартинкаОшибки = Элементы.ОшибкаВСхемеКомпоновкиДанныхКартинка;
		
	КонецЕсли;
	
	ТребуетсяПроверка = ТребуетсяПроверкаСтроки();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ошибка) Тогда
		Ошибка = ТекущиеДанные.Ошибка;
	ИначеЕсли  ЗначениеЗаполнено(ТекущиеДанные.ОшибкаПриВыполнении) Тогда
		Ошибка = ТекущиеДанные.ОшибкаПриВыполнении;
	КонецЕсли;
	
	ЕстьОшибки = ЗначениеЗаполнено(Ошибка);
	АкцентироватьТекст = ЕстьОшибки ИЛИ ТребуетсяПроверка;
	ЭлементГруппаОшибка.Видимость = АкцентироватьТекст;
	Если АкцентироватьТекст Тогда
		ЦветРамки = WebЦвета.Красный;
	Иначе
		ЦветРамки = Новый Цвет();
	КонецЕсли;
	ЭлементТекст.ЦветРамки = ЦветРамки;
	
	ЭлементТекстОшибки.Гиперссылка = Не ТребуетсяПроверка;
	
	Если ТребуетсяПроверка Тогда
		ТекстОшибки = НСтр("ru = 'Требуется проверка текста'; en = 'You want to check the text'");
		ЭлементКартинкаОшибки.Картинка = Новый Картинка;
	Иначе
		Если ЕстьОшибки Тогда
			
			ТекстОшибки = УКО_ОбщегоНазначенияКлиентСервер_ПредставлениеОшибкиВТексте(Ошибка);
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Ошибка) Тогда
				ЭлементКартинкаОшибки.Картинка = Элементы.БиблиотекаКартинокУКО_ОшибкаВТексте.Картинка;
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ОшибкаПриВыполнении) Тогда
				ЭлементКартинкаОшибки.Картинка = Элементы.БиблиотекаКартинокУКО_ОшибкаПриВыполнении.Картинка;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЭлементТекстОшибки.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыУправленияПараметровЗапроса()
	
	ПараметрыЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ПараметрыЗапросаТекущиеДанные = Неопределено Тогда
		
		ДоступностьИзменитьТипПараметра = Ложь;
		
	Иначе
			
		ДанныеПараметра = ДанныеПараметраЗапроса(ТекущаяСтрока, ПараметрыЗапросаТекущиеДанные.Имя);
		        		ИмяПараметра = ПараметрыЗапросаТекущиеДанные.Имя;
		ОписаниеТипаПараметра = ДанныеПараметра.ОписаниеТипов;
		
		ДоступностьИзменитьТипПараметра = (ПараметрыЗапросаТекущиеДанные.Тип = НСтр("ru = 'Значение'; en = 'Value'"))
											И (ТипЗнч(ОписаниеТипаПараметра) = Тип("ОписаниеТипов") И (ОписаниеТипаПараметра.СодержитТип(Тип("Дата")) ИЛИ ОписаниеТипаПараметра.Типы().Количество() > 1));
		
	КонецЕсли;
	
	Элементы.ПараметрыЗапросаИзменитьТипПараметра.Доступность = ДоступностьИзменитьТипПараметра;
	Элементы.ПараметрыЗапросаКонтекстноеМенюИзменитьТипПараметра.Доступность = ДоступностьИзменитьТипПараметра;

КонецПроцедуры

// Проверяет входит ли строка в проверяемую группу 
//
// Параметры:
//  ПроверяемаяВеткаДерева	(ДанныеФормыДерево, ДанныеФормыЭлементДерева)	- Ветка которую проверяем входит ли она в групп ПроверяемаяГруппа
//  ПроверяемаяГруппа		(ДанныеФормыЭлементДерева)						- Группа в которую входит или не входит строка
// Возвращаемое значение:
//   Булево	- Истина, проверяемая строка входит в группу; Ложь, не входит
//
&НаКлиенте
Функция ВеткаДереваПринадлежитВетке(ПроверяемаяВеткаДерева, ПроверяемаяГруппа)
	
	Родитель = ПроверяемаяВеткаДерева;
	
	Пока Родитель <> Неопределено Цикл
		
		Родитель = Родитель.ПолучитьРодителя();
		
		Если Родитель = ПроверяемаяГруппа Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет входит можно ли переносить проверяемую строку (ПроверяемаяСтрока) в строку (ПриемникПеретаскивания)
//
// Параметры:
//  ПроверяемаяСтрока		(ДанныеФормыЭлементДерева)						- Проверяемая строка
//  ПриемникПеретаскивания	(ДанныеФормыДерево,ДанныеФормыЭлементДерева)	- Строка приемник перетаскивания
//  ПараметрыПеретаскивания	(ПараметрыПеретаскивания)						- Параметры перетаскивания
// Возвращаемое значение:
//   Булево	- Истина, можно перенести строку; Ложь, нельзя
//
&НаКлиенте
Функция МожноПереместитьСтроку(ПроверяемаяСтрока, ПараметрыПеретаскивания, ПриемникПеретаскивания)
	
	// Правила перетаскивания Drag & Drop
	// 1. В корень дерева можно переносить элементы Запрос, СКД, Группа
	// 2. Нельзя переносить/копировать элементы вложенный запрос
	// 3. Строку нельзя переносить саму в себя
	// 4. Необходимо проверять не перемещается ли группа внутрь самой себя для избежания бесконечной рекурсии
	// В группу переносить можно, но только не в туже самую... копированием можно и в туже самую
	// 5. Группу можно переносить только в другую группу
	// 6. Переносить в родительскую группу только копированием
	// 7. Вариант отчета СКД можно переносить только в другой вариант (т.е. перемещение элементов)
	//     в вариант можно переносить только вариант или пользовательскую настройку
	// 8. Пользовательскую настройку СКД можно перемешать в СКД или Вариант отчета СКД или в другую пользовательскую настройку (перемещение)
	//    внутрь пользовательской настройки ничего перемещать нельзя
	// 9. Запрос нельзя переносить внутрь СКД
	
	Если  ТипЗнч(ПриемникПеретаскивания) = Тип("ДанныеФормыДерево") Тогда //(должно быть начальной проверкой) //1
		
		Возврат ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Группа"
				ИЛИ ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос"
				ИЛИ ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных";
		
	ИначеЕсли ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос"
			ИЛИ ПриемникПеретаскивания.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда //2
			
		Возврат Ложь;
		
	ИначеЕсли ПроверяемаяСтрока = ПриемникПеретаскивания Тогда //3
		
		Возврат Ложь;
		
	ИначеЕсли ВеткаДереваПринадлежитВетке(ПриемникПеретаскивания, ПроверяемаяСтрока) Тогда //4
		
		Возврат Ложь;
		
	ИначеЕсли ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Группа" 
				И ПриемникПеретаскивания.Тип <> "Перечисление.УКО_ЭлементыДанных.Группа" Тогда //5
				
		Возврат Ложь;
				
	ИначеЕсли ПриемникПеретаскивания = ПроверяемаяСтрока.ПолучитьРодителя() И ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда //6
		
		Возврат Ложь;
	
	ИначеЕсли (ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" 
				И ПриемникПеретаскивания.Тип <> "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД")
			 ИЛИ (ПриемникПеретаскивания.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД"
			 		И НЕ(ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД"
							ИЛИ ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД")) Тогда //7
				
		Возврат Ложь;
				
	ИначеЕсли ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" 
				И ПриемникПеретаскивания.Тип <> "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда //8
				
		Возврат УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ПриемникПеретаскивания.Тип);
				
	ИначеЕсли ПриемникПеретаскивания.Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" Тогда //8
				
		Возврат Ложь;
				
	ИначеЕсли ПроверяемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" 
				И ПриемникПеретаскивания.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда //9
				
		Возврат Ложь;
				
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив строк которые можно перенести (т.е. какие из выделенных строк можно перенести в строку приемник)
//
// Параметры:
//  АнализируемыеСтроки		(Массив)										- Идентификаторы строк, которые нужно проверить 
//  ПриемникПеретаскивания	(ДанныеФормыДерево,ДанныеФормыЭлементДерева)	- Строка приемник перетаскивания
//  ПараметрыПеретаскивания	(ПараметрыПеретаскивания)						- Параметры перетаскивания
// Возвращаемое значение:
//   Массив	- Массив с идентификаторами строк, которые можно перенести
//
&НаКлиенте
Функция ПолучитьСтрокиКоторыеМожноПеренести (АнализируемыеСтроки, ПараметрыПеретаскивания, ПриемникПеретаскивания)
	
	ПеремещаемыеСтроки = Новый Массив;
	Для Каждого ПеретаскиваемаяСтрокаИдентификатор Из АнализируемыеСтроки Цикл
		ПеретаскиваемаяСтрока = ДеревоДанных.НайтиПоИдентификатору(ПеретаскиваемаяСтрокаИдентификатор);
		
		Если МожноПереместитьСтроку(ПеретаскиваемаяСтрока, ПараметрыПеретаскивания, ПриемникПеретаскивания) Тогда
			ПеремещаемыеСтроки.Добавить(ПеретаскиваемаяСтрокаИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПеремещаемыеСтроки;
	
КонецФункции

// Переносит (или копирует) строку дерева данных
//
// Параметры:
//  СтрокаИсточник			(ДанныеФормыЭлементДерева)						- Строка источник та которую перетаскиваем 
//  СтрокаПриемник			(ДанныеФормыДерево,ДанныеФормыЭлементДерева)	- Строка в которую перетаскиваем
//  Копирование				(Булево)										- Режим перетаскивания: Истина - копирование, Ложь - перемещение
//  СделатьСтрокуАктивной	(Булево)										- Сделать строку активной
//  ИндексВставки			(Число)											- Индекс вставки
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева - Новая строка перенесенная или скопированная
//
&НаКлиенте
Функция ПереместитьСтрокуДереваДанных(СтрокаИсточник, СтрокаПриемник, Копирование = Ложь, СделатьСтрокуАктивной = Ложь, ИндексВставки = Неопределено)
	
	Если Копирование Тогда //Копирование
		
		ТипСтроки = СтрокаИсточник.Тип;
		
		Картинка = Неопределено;
		Если ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Запрос"
				ИЛИ УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ТипСтроки)
				ИЛИ ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда
			ИмяНовойСтроки = СтрШаблон(НСтр("ru = 'Копия (%1)'; en = 'Copy (%1)'"), СтрокаИсточник.Имя);
		ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
			Картинка = СтрокаИсточник.Картинка;
			ИмяНовойСтроки = СтрокаИсточник.Имя;
		КонецЕсли;
		
		// Копирование данных строки
		НачальныеДанные = УКО_ДанныеКлиентСервер_НовыйЭлемент(ТипСтроки);
		ЗаполнитьЗначенияСвойств(НачальныеДанные, УКО_ДанныеКлиент_Получить(ЭтаФорма, СтрокаИсточник));
		Если ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			
			НовыеЗначенияПараметров = Новый Соответствие;
			Для Каждого ЗначениеПараметра Из НачальныеДанные.ЗначенияПараметров Цикл 
				
				ОписаниеЗначениеПараметра = ЗначениеПараметра.Значение;
				НовыеЗначенияПараметров.Вставить(ЗначениеПараметра.Ключ, СкопироватьЗначениеПараметра(ОписаниеЗначениеПараметра));
				
			КонецЦикла;
			НачальныеДанные.ЗначенияПараметров = НовыеЗначенияПараметров;
			
		КонецЕсли;
		
		// Внешние источники
		Если УКО_ДанныеКлиентСервер_ЭтоТипСтрокиСИспользованиемВнешнихИсточников(ТипСтроки) Тогда
			
			НовыеВнешниеИсточники = Новый Соответствие;
			Для Каждого ВременнаяТаблица Из УКО_ДанныеКлиент_ВнешниеИсточники(НачальныеДанные) Цикл 
				
				ОписаниеВнешнегоИсточника = УКО_ОбщегоНазначенияКлиентСервер_СкопироватьОбъект(ВременнаяТаблица.Значение);
				ОписаниеВнешнегоИсточника.Значение = УКО_ОбщегоНазначенияВызовСервера_КопияТаблицыЗначений(ОписаниеВнешнегоИсточника.Значение, УникальныйИдентификатор);
				
				НовыеВнешниеИсточники.Вставить(Новый УникальныйИдентификатор, ОписаниеВнешнегоИсточника);
				
			КонецЦикла;
			НачальныеДанные.ВнешниеИсточники = НовыеВнешниеИсточники;
			
		КонецЕсли;
		
		НоваяСтрока = ДобавитьСтрокуВДеревоДанных(ИмяНовойСтроки, ТипСтроки, СтрокаПриемник, Ложь, НачальныеДанные,,Картинка);
		НоваяСтрока.Выделение = СтрокаИсточник.Выделение;
		
	Иначе //Перемещение
		Если ИндексВставки = Неопределено Тогда
			НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
		Иначе 
			НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Вставить(ИндексВставки + 1);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	КонецЕсли;	
	
	Для Каждого ОбрабатываемаяСтрока Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		
		ПереместитьСтрокуДереваДанных(ОбрабатываемаяСтрока, НоваяСтрока, Копирование);
		
		// Развернем в соответствии с источником
		Если Элементы.ДеревоДанных.Развернут(СтрокаИсточник.ПолучитьИдентификатор()) Тогда
			Элементы.ДеревоДанных.Развернуть(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	Если СделатьСтрокуАктивной Тогда
		// Установим текущую строку
		Элементы.ДеревоДанных.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет строку в дерево данных
//
// Параметры:
//  СтрокаПриемник			(ДанныеФормыДерево, ДанныеФормыЭлементДерева)	- Строка в которую добавляется
//  UID						(УникальныйИдентификатор)						- Идентификатор новой строки, если не указан генерируется новый
//  ИмяДанных				(Строка)										- Имя данных строки
//  ТипСтроки				(ТипДанныхСтроки)								- Тип строки Запрос, Группа ...
//  АктивизироватьСтроку	(Булево)										- Сделать строку активной
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева - Новая добавленная строка
//
&НаКлиенте
Функция ДобавитьСтрокуВДеревоДанных(ИмяДанных, ТипСтроки, СтрокаПриемник = Неопределено, АктивизироватьСтроку = Истина, НачальныеДанные = Неопределено, UID = Неопределено, Картинка = Неопределено)
	
	Если СтрокаПриемник = Неопределено Тогда
		// Определим исходя из выделения куда добавляем
		Если ТекущаяСтрока = Неопределено Тогда
			СтрокаПриемник = ДеревоДанных;
		ИначеЕсли ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Группа"
				ИЛИ (ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных"
						И (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД"
							ИЛИ ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД"))
				ИЛИ (ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД"
						И ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД") Тогда
					
			СтрокаПриемник = ТекущаяСтрока;
			
		ИначеЕсли ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			
			СтрокаПриемник = ДеревоДанных;
			
		Иначе
			
			СтрокаПриемник = ТекущаяСтрока.ПолучитьРодителя();
			
		КонецЕсли;
	КонецЕсли;
	
	// Добавление новой строки
	НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
	
	// Заполнение данных строки
	Если ЗначениеЗаполнено(UID) Тогда
		НоваяСтрока.UID = UID;
	Иначе
		НоваяСтрока.UID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	НоваяСтрока.Имя	= ИмяДанных;
	НоваяСтрока.Тип	= ТипСтроки;
	
	Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(ТипСтроки) Тогда 
		НоваяСтрока.Развернуто = Истина;
	КонецЕсли;
	
	Если ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда 
		НоваяСтрока.Картинка = Элементы.БиблиотекаКартинокУКО_Папка.Картинка;
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда 
		НоваяСтрока.Картинка = Элементы.БиблиотекаКартинокУКО_Запрос.Картинка;
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда 
		НоваяСтрока.Картинка = Элементы.БиблиотекаКартинокУКО_СхемаКомпоновкиДанных.Картинка;
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" Тогда 
		НоваяСтрока.Картинка = Элементы.БиблиотекаКартинокУКО_ПользовательскаяНастройкаСКД.Картинка;
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда 
		НоваяСтрока.Картинка = Элементы.БиблиотекаКартинокУКО_ВариантОтчетаСКД.Картинка;
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда 
		НоваяСтрока.Картинка = Картинка;
	КонецЕсли;
	
	Если НачальныеДанные = Неопределено Тогда
		НачальныеДанные = УКО_ДанныеКлиентСервер_НовыйЭлемент(ТипСтроки);
	КонецЕсли;
	
	УКО_ДанныеКлиент_Вставить(ЭтаФорма, НоваяСтрока, НачальныеДанные);
	
	Если АктивизироватьСтроку Тогда
		Элементы.ДеревоДанных.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новые данные 
//
// Параметры: (Отсутствуют)
//
&НаКлиенте
Процедура НовыеДанные()
	
	ОчиститьРезультат(ТабличныйДокументРезультат);
	
	УКО_ДанныеКлиент_Очистить(ЭтаФорма);
	РабочиеДанные(Неопределено, Неопределено);
	
	ДобавитьСтрокуВДеревоДанных(НСтр("ru = 'Запрос'; en = 'Query'"), "Перечисление.УКО_ЭлементыДанных.Запрос");
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

// Устанавливает раскрытие веток дерева в соответствии со структурой данных поле развернут (нужно после загрузки файла) (рекурсивная)
//
// Параметры:
//  ОбрабатываемаяСтрока (ДанныеФормыЭлементДерева) - ОбрабатываемаяСтрока
//
&НаКлиенте
Процедура РаскрытьВеткиДереваВСоответствииСДанными (ОбрабатываемаяСтрока)
	
	Для Каждого ЭлементДерева Из ОбрабатываемаяСтрока.ПолучитьЭлементы() Цикл
		
		Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(ЭлементДерева.Тип) Тогда
				
			Если ЭлементДерева.Развернуто Тогда
				Элементы.ДеревоДанных.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЕсли;
		
		РаскрытьВеткиДереваВСоответствииСДанными (ЭлементДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет данные в файл (формат по умолчанию)
//
// Параметры:
//  ПолноеИмяФайла (Строка) - Полное имя файла
//
// Возвращаемое значение:
//   Булево - Истина, сохранено успешно; Ложь - ошибка (данные не сохранены)
&НаКлиенте
Процедура СохранитьДанныеВФайл (ПолноеИмяФайла)
	
	Состояние(НСтр("ru = 'Сохранение файла:'; en = 'Saving file:'"),,ПолноеИмяФайла, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	
	СохранитьИзмененныеДанныеСтроки();
	
	// Подготовка данных на клиенте для сервера (развернутость веток, надписи, ТипСтроки)
	ПодготовленныеДанные = ПодготовитьДанныеДляСохранения(ДеревоДанных);
	АдресХранилища = УКО_MCRФорматВызовСервера_ПоместитьДанныеВоВременноеХранилище(ПодготовленныеДанные);
	
	Попытка
		ПолучитьФайл(АдресХранилища, ПолноеИмяФайла, Ложь);
	Исключение
		
		// Ошибка файл не удалось сохранить
		ПредставлениеОшибки = НСтр("ru = 'Ошибка сохранения :'; en = 'Save failed :'") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(,ПредставлениеОшибки,,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Возврат; 
		
	КонецПопытки;
	
	РабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Файл", ПолноеИмяФайла);
	
	Модифицированность = Ложь;
	
	ОбновитьЗаголовок();
	ОбновитьЭлементыФормы();
	
	ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Файл", ПолноеИмяФайла);
	
КонецПроцедуры

// Сохраняет данные (выводит все необходимые диалоги)
//
// Параметры:
//  ЗапрашиватьИмяФайла (Булево) - Признак запроса имени файла (вывод диалога необходимо для 'сохранить как')
//
&НаКлиенте
Процедура СохранитьДанные(ЗапрашиватьИмя = Ложь, ОписаниеОбработчикаПослеВыполнения = Неопределено)
	
	Если ЗапрашиватьИмя ИЛИ ПустаяСтрока(РабочиеДанные.Имя) Тогда
		
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.Фильтр = УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайловДанных();
		ДиалогСохраненияФайла.Расширение = УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных();
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Сохранение данных'; en = 'Saving data'");
		
		ДиалогСохраненияФайла.Показать(Новый ОписаниеОповещения("СохранитьФайлЗакончено", ЭтотОбъект, ОписаниеОбработчикаПослеВыполнения));
		
	Иначе
		
		Если РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
			СохранитьДанныеВНастройки(РабочиеДанные.Имя);
		Иначе 
			СохранитьДанныеВФайл(РабочиеДанные.Имя);
		КонецЕсли;
		
		Если ОписаниеОбработчикаПослеВыполнения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОбработчикаПослеВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗакончено(ВыбранныеФайлы, ОписаниеОбработчика) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		СохранитьДанныеВФайл(ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Если ОписаниеОбработчика <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОбработчика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеДляСохранения(СтрокаДерева)
	
	Массив = Новый Массив;
	СловарьПереводаИменПолей = УКО_MCRФорматКлиентСервер_СловарьПереводаИменПолей("ru");
	
	Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДанныеСтроки = УКО_ДанныеКлиент_Получить(ЭтаФорма, ЭлементДерева);
		ДанныеЗаписываемойСтроки = УКО_ДанныеКлиентСервер_НовыйЭлемент(ЭлементДерева.Тип, Истина);
		ЗаполнитьЗначенияСвойств(ДанныеЗаписываемойСтроки, ЭлементДерева);
		ЗаполнитьЗначенияСвойств(ДанныеЗаписываемойСтроки, ДанныеСтроки);
		Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(ЭлементДерева.Тип) Тогда
			
			Строки = ПодготовитьДанныеДляСохранения (ЭлементДерева);
			Если ЗначениеЗаполнено(Строки) Тогда
				ДанныеЗаписываемойСтроки.Вставить("Строки", Строки);
			КонецЕсли;
			
		ИначеЕсли ЭлементДерева.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			
			
			Если Не ДанныеСтроки.ТребуетсяПроверка И ДанныеСтроки.Ошибка = Неопределено Тогда
				
				// Записываем только те значения параметров которые есть в запросе
				ЗначенияПараметров = Новый Соответствие;
				Для Каждого ЗначениеПараметра Из ДанныеСтроки.ЗначенияПараметров Цикл 
					
					Если ДанныеСтроки.Параметры.Получить(ЗначениеПараметра.Ключ) <> Неопределено Тогда
						ЗначенияПараметров.Вставить(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);
					КонецЕсли;
					
				КонецЦикла;
				ДанныеЗаписываемойСтроки.ЗначенияПараметров = ЗначенияПараметров;
				
				// Записываем только те настройки вывода временных таблиц, которые есть в запросе
				НастройкиВыводаВременныхТаблиц = Новый Соответствие;
				Для Каждого НастройкаВыводаВременнойТаблицы Из ДанныеСтроки.ВыводВременныхТаблиц Цикл 
					
					Если ДанныеСтроки.ВременныеТаблицы.Получить(НастройкаВыводаВременнойТаблицы.Ключ) <> Неопределено Тогда
						
						ОписаниеНастройкиВыводаВременнойТаблицы = НастройкаВыводаВременнойТаблицы.Значение;
						
						Если ОписаниеНастройкиВыводаВременнойТаблицы.Вывод <> НСтр("ru = 'Выводить'; en = 'Output'") Тогда
							НастройкиВыводаВременныхТаблиц.Вставить(НастройкаВыводаВременнойТаблицы.Ключ, ОписаниеНастройкиВыводаВременнойТаблицы);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеЗаписываемойСтроки.ВыводВременныхТаблиц = НастройкиВыводаВременныхТаблиц;
				
				
			КонецЕсли;

		КонецЕсли;
		
		Для Каждого Поле Из ДанныеЗаписываемойСтроки Цикл 
			
			ДанныеЗаписываемойСтроки.Вставить(СловарьПереводаИменПолей[Поле.Ключ], Поле.Значение);
			ДанныеЗаписываемойСтроки.Удалить(Поле.Ключ);
			
		КонецЦикла;
		
		Массив.Добавить(ДанныеЗаписываемойСтроки);
		
	КонецЦикла;
	
	Возврат Массив;

КонецФункции

&НаКлиенте
Функция ЗагрузитьДанныеИзМассива (МассивДанных, СтрокаДерева)
	
	СловарьПереводаИменПолей = УКО_MCRФорматКлиентСервер_СловарьПереводаИменПолей("en");

	Для Каждого СтрокаСтруктура Из МассивДанных Цикл
		
		Для Каждого Поле Из СтрокаСтруктура Цикл 
			
			ПереводИмениПоля = СловарьПереводаИменПолей.Получить(Поле.Ключ);
			Если ЗначениеЗаполнено(ПереводИмениПоля) Тогда
				СтрокаСтруктура.Вставить(ПереводИмениПоля, Поле.Значение);
				СтрокаСтруктура.Удалить(Поле.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ДобавитьСтрокуВДеревоДанных(СтрокаСтруктура.Имя, СтрокаСтруктура.Тип, СтрокаДерева, Ложь, , СтрокаСтруктура.UID);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтруктура);
		
		СтруктураДляНовойСтроки = УКО_ДанныеКлиент_Получить(ЭтаФорма, НоваяСтрока);
		ЗаполнитьЗначенияСвойств(СтруктураДляНовойСтроки, СтрокаСтруктура);
		УКО_ДанныеКлиент_Вставить(ЭтаФорма, НоваяСтрока, СтруктураДляНовойСтроки);
		
		Если СтрокаСтруктура.Свойство("Строки") Тогда
			ЗагрузитьДанныеИзМассива(СтрокаСтруктура.Строки, НоваяСтрока); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗакладкуПараметры()
	
	ПараметрыЗапросаЭлементы = ПараметрыЗапроса;
	ПараметрыЗапросаЭлементы.Очистить();
	КоличествоПараметровВЗапросе = 0;
	
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТребуетсяПроверка = ТребуетсяПроверкаСтроки();
	
	Если Не ТребуетсяПроверка Тогда
		
		ДанныеПараметровЗапроса = ДанныеПараметровЗапроса(ТекущаяСтрока);
		Для Каждого ПараметрЗапроса Из ДанныеПараметровЗапроса Цикл
			
			СтрокаПараметр = ПараметрыЗапросаЭлементы.Добавить();
			ОбновитьСтрокуПараметра(СтрокаПараметр, ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение.Тип, ПараметрЗапроса.Значение.Значение);
			
		КонецЦикла;
		
		КоличествоПараметровВЗапросе = ДанныеПараметровЗапроса.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуПараметра(Строка, Имя, ТипЗначения, Значение)
	
	ТипПараметра = НСтр("ru = 'Значение'; en = 'Value'");
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ТипПараметра = НСтр("ru = 'Список'; en = 'List'");
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Если Значение.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
			ТипПараметра = НСтр("ru = 'Выражение'; en = 'Expression'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("МоментВремени") ИЛИ ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		
		ПредставлениеПараметра = Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		
		ПредставлениеПараметра = Значение.Представление;
		
	ИначеЕсли ТипЗнч(ТипЗначения) = Тип("Тип") Тогда
		
		ПредставлениеПараметра = Значение;
		
	Иначе
		
		ПредставлениеПараметра = ТипЗначения.ПривестиЗначение (Значение);
		
	КонецЕсли;
	
	Строка.Тип = ТипПараметра;
	Строка.Имя = Имя;
	Строка.ТипЗначения = ТипЗначения;
	Строка.Картинка = УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(ТипЗначения);
	Строка.Представление = ПредставлениеПараметра;
	
	ПараметрыЗапросаПриАктивизацииСтроки(Элементы.ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьЗначениеПараметраКТипу(Значение, ТипЗначения, ИзТипа, КТипу)
	
	Результат = Неопределено;
	
	Если ИзТипа = НСтр("ru = 'Список'; en = 'List'") Тогда
		
		Если КТипу = НСтр("ru = 'Значение'; en = 'Value'") Тогда
			
			Если ЗначениеЗаполнено(Значение) Тогда
				Результат = Значение[0].Значение;
			КонецЕсли;
			
		ИначеЕсли КТипу = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
			
			Результат = УКО_КодНаВстроенномЯзыкеВызовСервера_ЗначениеПараметра(Значение, "Список");
			
		КонецЕсли;
		
	ИначеЕсли ИзТипа = НСтр("ru = 'Значение'; en = 'Value'") Тогда 
		
		Если КТипу = НСтр("ru = 'Список'; en = 'List'") Тогда
			
			Результат = УКО_ОбщегоНазначенияКлиентСервер_НовыйСписокЗначений(Значение);
			
		ИначеЕсли КТипу = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
			
			Если ТипЗначения = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
				
				Если ЗначениеЗаполнено(Значение.Значение) Тогда
					Результат = УКО_КодНаВстроенномЯзыкеВызовСервера_ЗначениеПараметра(Значение.Значение, "Таблица");
				Иначе
					Результат = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Выражение", 
								НСтр("ru = 'Результат = Новый ТаблицаЗначений'; en = 'Result = New ValueTable'", НастройкиОбработки.ЯзыкПрограммирования));
				КонецЕсли;
				
			ИначеЕсли УКО_ОбщегоНазначенияКлиентСервер_ЭтоЗначениеПараметраГраница(Значение) Тогда
				
				Результат = УКО_КодНаВстроенномЯзыкеВызовСервера_ЗначениеПараметра(Значение.Значение);
				
			Иначе
				
				Результат = УКО_КодНаВстроенномЯзыкеВызовСервера_ЗначениеПараметра(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИзТипа = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда 
		
		ВычисленноеЗначение = УКО_КодНаВстроенномЯзыкеВызовСервера_ПараметрИзВыражения(Значение.Значение, УникальныйИдентификатор);
		
		Если ТипЗнч(ВычисленноеЗначение) = Тип("СписокЗначений") Тогда
			ТипВычисленногоЗначения = НСтр("ru = 'Список'; en = 'List'");
		Иначе 
			ТипВычисленногоЗначения = НСтр("ru = 'Значение'; en = 'Value'");
		КонецЕсли;
		
		Если ТипВычисленногоЗначения = КТипу Тогда
			
			Если ТипЗнч(ВычисленноеЗначение) = Тип("Граница") Тогда
				
				Результат = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Граница",
														УКО_ЗапросВызовСервера_ОписаниеИзГраницы(ВычисленноеЗначение));
				
			Иначе
				
				Результат = ВычисленноеЗначение;
				
			КонецЕсли;
			
		Иначе 
			
			Если СписокДоступенДляПараметра(ВычисленноеЗначение, ТипЗначения) Тогда
				
				Результат = ПреобразоватьЗначениеПараметраКТипу(ВычисленноеЗначение, ТипЗначения, ТипВычисленногоЗначения, КТипу);
				
			Иначе
				
				ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Для значений типа %1 редактирование в списке недоступно'; en = 'For values of type %1 editing is not available in the list'"), ТипЗнч(ВычисленноеЗначение));
				ПоказатьПредупреждение(,ТекстПредупреждения,, УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());

				Результат = Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбновитьЭлементыПоследниеРабочиеДанные(Тип = Неопределено, ИмяДобавляемого = "", ИмяУдаляемого = "")
	
	Если ЗначениеЗаполнено(ИмяУдаляемого) Тогда
		ОбъектОбработки().УКО_Настройки_УдалитьИзПоследнихРабочихДанных(ИмяУдаляемого, Тип);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяДобавляемого) Тогда
		ОбъектОбработки().УКО_Настройки_ДобавитьВПоследниеРабочиеДанные(ИмяДобавляемого, Тип);
	КонецЕсли;
	
	ПоследниеРабочиеДанные = ОбъектОбработки().УКО_Настройки_ПоследниеРабочиеДанныеВсе();
	
	Если Тип = Неопределено ИЛИ Тип = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
		ОбновитьЭлементыНабораПоследнихРабочихДанных(Элементы.ПоследниеРабочиеФайлы, "Перечисление.УКО_ТипыХраненияДанных.Файл");
	КонецЕсли;
	
	Если Тип = Неопределено ИЛИ Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
		ОбновитьЭлементыНабораПоследнихРабочихДанных(Элементы.ПоследниеРабочиеНастройки, "Перечисление.УКО_ТипыХраненияДанных.Настройка");
	КонецЕсли;
	
	ОбновитьЭлементыНабораПоследнихРабочихДанных(Элементы.ПоследниеРабочиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыНабораПоследнихРабочихДанных(ЭлементРодитель, Тип = Неопределено)
	
	// Уберем видимость всех кнопок
	Для Каждого Кнопка Из ЭлементРодитель.ПодчиненныеЭлементы Цикл
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	
	Если Тип = Неопределено Тогда
		НаборДанных = ПоследниеРабочиеДанные.Все;
	ИначеЕсли Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
		НаборДанных = ПоследниеРабочиеДанные.Настройки;
	ИначеЕсли Тип = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
		НаборДанных = ПоследниеРабочиеДанные.Файлы;
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ЭлементДанных Из НаборДанных Цикл 
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
			
			ИмяДанных = ЭлементДанных.Имя;
			ТипПоследнихРабочихДанных = ЭлементДанных.Тип;
			Если ТипПоследнихРабочихДанных = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
				ИндексКоманды = ПоследниеРабочиеДанные.Настройки.Найти(ИмяДанных);
			ИначеЕсли ТипПоследнихРабочихДанных = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
				ИндексКоманды = ПоследниеРабочиеДанные.Файлы.Найти(ИмяДанных);
			КонецЕсли;
			
		Иначе
			
			ИмяДанных = ЭлементДанных;
			ТипПоследнихРабочихДанных = Тип;
			ИндексКоманды = Индекс;
			
		КонецЕсли;
		
		КартинкаКнопки = Новый Картинка;
		Если ТипПоследнихРабочихДанных = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
			ИмяКоманды = "ОткрытьПоследнийФайл" + ИндексКоманды;
			ИмяДействия = "КомандаОткрытьПоследнийФайл";
			КартинкаКнопки = Элементы.БиблиотекаКартинокУКО_ТипХраненияДанныхФайл.Картинка;
		ИначеЕсли ТипПоследнихРабочихДанных = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
			ИмяКоманды = "ОткрытьПоследнююНастройку" + ИндексКоманды;
			ИмяДействия = "КомандаОткрытьПоследнююНастройку";
			КартинкаКнопки = Элементы.БиблиотекаКартинокУКО_ТипХраненияДанныхНастройка.Картинка;
		КонецЕсли;
		
		Если Тип = Неопределено Тогда
			ИмяКнопки = "КнопкаОткрытьПоследниеРабочиеДанные" + Индекс;
		ИначеЕсли Тип = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
			ИмяКнопки = "КнопкаОткрытьПоследнююНастройку" + Индекс;
		ИначеЕсли Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
			ИмяКнопки = "КнопкаОткрытьПоследнийФайл" + Индекс;
		КонецЕсли;
		
		Команда = Команды.Найти(ИмяКоманды);
		Если Команда = Неопределено Тогда
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Действие = ИмяДействия;
		КонецЕсли;
		
		Кнопка = Элементы.Найти(ИмяКнопки);
		Если Кнопка = Неопределено Тогда
			Кнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементРодитель); //Новая кнопка
		КонецЕсли;
		Кнопка.ИмяКоманды = ИмяКоманды; 
		
		Кнопка.Видимость = Истина;
		
		Если ТипПоследнихРабочихДанных = "Перечисление.УКО_ТипыХраненияДанных.Файл" 
				И НастройкиОбработки.СокращатьИменаПоследнихРабочихФайлов Тогда 
			Кнопка.Заголовок = УКО_СтрокиКлиентСервер_ПолноеИмяФайлаКратко(ИмяДанных);
		Иначе 
			Кнопка.Заголовок = ИмяДанных;
		КонецЕсли;	
		
		Кнопка.Картинка = КартинкаКнопки;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоФункцийЯзыкаЗапросов()

	Макет = ОбъектОбработки().ПолучитьМакет("УКО_ФункцииЯзыкаЗапросов");
	Дерево = РеквизитФормыВЗначение("ФункцииЯзыкаЗапросов");
	
	Родитель = Дерево;
	МассивГоризонтальный = Новый Массив;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл 
		
		Область = Макет.Область(НомерСтроки, 1);
		ТребуемаяВерсияПлатформы = Макет.Область(НомерСтроки, 2).Текст;
		
		Если ЗначениеЗаполнено(ТребуемаяВерсияПлатформы)
				И УКО_ОбщегоНазначенияКлиентСервер_ВерсияПлатформыНеНиже(ТребуемаяВерсияПлатформы) Тогда
			 Продолжить;
		КонецЕсли;
		
		ТекстЯчейки = Область.Текст;
		
		Уровень = Область.Отступ;
		Пока МассивГоризонтальный.ВГраница() < Уровень Цикл
			МассивГоризонтальный.Добавить("");
		КонецЦикла;
		
		Если Уровень = 0 Тогда
		   Родитель = Дерево;
		Иначе	
		   Родитель = МассивГоризонтальный[Уровень-1];
		КонецЕсли;

		ТекСтрока = Родитель.Строки.Добавить();
		МассивГоризонтальный[Уровень] = ТекСтрока;
		
		ПозицияКурсора = СтрНайти(ТекстЯчейки, "?");
		Если ЗначениеЗаполнено(ПозицияКурсора) Тогда
			СмещениеКурсора = ПозицияКурсора - СтрДлина(ТекстЯчейки);
			ПредставлениеФункции = СтрЗаменить(ТекстЯчейки, "?", "");
		Иначе
			СмещениеКурсора = 0;
			ПредставлениеФункции = ТекстЯчейки;
		КонецЕсли;
		
		ТекСтрока.СмещениеКурсора = СмещениеКурсора;
		ТекСтрока.Представление = ПредставлениеФункции;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ФункцииЯзыкаЗапросов);

КонецПроцедуры

&НаКлиенте
Процедура ВставкаПредопределенногоЗакончена(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТекстЗапроса.ВыделенныйТекст = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбластиПодключаемый()
	
	УКО_ТабличныйДокументКлиент_ПриАктивизацииОбластиОбработка(ЭтаФорма, ТабличныйДокументРезультат);
	ОтключитьОбработчикОжидания("РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Знач РедактируемыйТекст, ДополнительныеПараметры = Неопределено, РедактируетсяВыделенныйТекст = Ложь)
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Попытка
		
		Если НастройкиОбработки.ИспользоватьКонструкторЗапросаТолстогоКлиента Тогда
			
			#Если ТолстыйКлиентУправляемоеПриложение Тогда
				
				КонструкторЗапроса = Новый КонструкторЗапроса;
				Если ЗначениеЗаполнено(РедактируемыйТекст) Тогда
					КонструкторЗапроса.Текст = РедактируемыйТекст;
				КонецЕсли;
				
				Если КонструкторЗапроса.ОткрытьМодально() Тогда
					РедактированиеЗапросаКонструкторомЗакончено(КонструкторЗапроса.Текст, ДополнительныеПараметры);
				КонецЕсли;
				
			#Иначе
				
				ЗапуститьКонструкторТонкогоКлиента(РедактируемыйТекст, ДополнительныеПараметры);
				
			#КонецЕсли
			
		Иначе 
			
			ЗапуститьКонструкторТонкогоКлиента(РедактируемыйТекст, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Исключение
		
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если РедактируетсяВыделенныйТекст Тогда
			ПоказатьПредупреждение(,КраткоеПредставлениеОшибки,,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Иначе
			
			ТекстВопросаЧасти = Новый Массив;
			ТекстВопросаЧасти.Добавить(НСтр("ru = 'В запросе содержатся ошибки:'; en = 'The request contains errors:'"));
			ТекстВопросаЧасти.Добавить(Символы.ПС);
			ТекстВопросаЧасти.Добавить(Новый ФорматированнаяСтрока(КраткоеПредставлениеОшибки, УКО_ОбщегоНазначенияКлиентСервер_ШрифтЖирный()));
			ТекстВопросаЧасти.Добавить(Символы.ПС);
			ТекстВопросаЧасти.Добавить(НСтр("ru = 'текст запроса будет потерян. Продолжить?'; en = 'the query text will be lost. Continue?'"));
			ТекстВопроса = Новый ФорматированнаяСтрока(ТекстВопросаЧасти);
			
			ЗаголовокВопроса = НСтр("ru = 'Запуск конструктора запроса'; en = 'Run the query constructor'");
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Продолжить'; en = 'Continue'"));
			КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Отмена'; en = 'Cancel'"));
			
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросТекстЗапросаБудетПотерянЗавершение", ЭтотОбъект);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяНастройкиБольшеНеПоказывать", "ВопросТекстЗапросаБудетПотерянБольшеНеПоказывать");
			ДополнительныеПараметры.Вставить("БольшеНеПоказывать", НастройкиОбработки.ВопросТекстЗапросаБудетПотерянБольшеНеПоказывать);
			
			УКО_ФормыКлиент_ЗадатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, КнопкиВопроса, Истина, ЗаголовокВопроса, ЭтаФорма, ДополнительныеПараметры);

		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторСхемыКомпоновкиДанных()
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных(УКО_СКДВызовСервера_СхемаКомпоновкиДанных(ТекущиеДанные.Текст));
		Конструктор.Редактировать(ЭтаФорма);
		
	#Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Запуск конструктора схемы компоновки данных возможен только в толстом клиенте.'; en = 'You can only run the data layout designer in a thick client.'")
						,,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРезультат(ТабличныйДокумент = Неопределено)
	
	РезультатКоличество = "";
	ПоследняяАктивнаяОбласть = Неопределено;
	
	Если ТабличныйДокумент <> Неопределено 
			И Не ТекущийРезультат.Пустой Тогда
			
		ОчиститьТабличныйДокументРезультатСервер(ТабличныйДокумент, УдаляемыеАдресаВременныхХранилищРезультата());
	
		ТекущийРезультат.Адрес = "";
		ТекущийРезультат.АдресСхемыКомпоновкиДанных = "";
		ТекущийРезультат.АдресДанныхРасшифровки = "";
		ТекущийРезультат.АдресИсполняемыхЗапросовСКД = "";
			
	КонецЕсли;
	
	НовыйТекущийРезультат(ТекущийРезультат);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныйДокументРезультатСервер(ТабличныйДокумент, УдаляемыеАдреса)
	
	ТабличныйДокумент.Очистить();
	ОбъектОбработки().УКО_ВременноеХранилище_Удалить(УдаляемыеАдреса);
	
КонецПроцедуры

&НаКлиенте
Функция КорректнаяОперацияВыполнения(ОбрабатываемаяСтрока, Режим)
	
	Результат = Истина;
	Если ТипЗнч(Режим) = Тип("Строка") Тогда
		
		Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(ОбрабатываемаяСтрока.Тип) Тогда
			
			Если Режим = "Выполнение" Тогда
				Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение";
			ИначеЕсли Режим = "Замер" Тогда
				Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Замер";
			КонецЕсли;
			
		ИначеЕсли УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ОбрабатываемаяСтрока.Тип) Тогда
			
			Если Режим = "Выполнение" Тогда
				Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Выполнение";
			ИначеЕсли Режим = "Замер" Тогда
				Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Замер";
			КонецЕсли;
			
		Иначе
			
			Результат = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Режим) = Тип("ПеречислениеСсылка.УКО_РежимВыполненияЗапроса") И Не УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(ОбрабатываемаяСтрока.Тип)
				ИЛИ ТипЗнч(Режим) = Тип("ПеречислениеСсылка.УКО_РежимВыполненияСхемыКомпоновкиДанных") И Не УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ОбрабатываемаяСтрока.Тип) Тогда
				
			Результат = Ложь
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОперацию(Режим, ИгнорироватьЛимитСтрок = Ложь, ОбрабатываемаяСтрока = Неопределено)
	
	Если ОбрабатываемаяСтрока = Неопределено Тогда
		ОбрабатываемаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Если ОбрабатываемаяСтрока = Неопределено Тогда
		Данные = ТекущиеДанные;
	Иначе
		Данные = УКО_ДанныеКлиент_Получить(ЭтаФорма, ОбрабатываемаяСтрока);
	КонецЕсли;
	
	Если Не КорректнаяОперацияВыполнения(ОбрабатываемаяСтрока, Режим) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = ПроверитьПоказатьОшибку(,,Данные);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеВыполнение = УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне();
	НаименованиеОперации = УКО_ОбщегоНазначенияКлиентСервер_НаименованиеВыполняемойОперации(Режим);
	УКО_ДлительныеОперацииКлиент_НачатьВыполнение(ЭтаФорма, НаименованиеОперации, "ЗавершениеВыполненияДанных", ДлительнаяОперация, ФоновоеВыполнение); 
	
	Данные = ИнициализироватьДанныеПередВыполнением(ОбрабатываемаяСтрока);
	
	Если ФоновоеВыполнение Тогда
		
		Результат = ЗапуститьВыполнениеНаСервере(Данные, Режим, ИгнорироватьЛимитСтрок, УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(ДлительнаяОперация, Результат, "Идентификатор, АдресРезультатаВыполнения");
		
	Иначе
		
		Результат = ЗапуститьВыполнениеНаСервере(Данные, Режим, ИгнорироватьЛимитСтрок, УникальныйИдентификатор, Ложь);
		УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(ЭтаФорма, ДлительнаяОперация, Результат);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемыКомпоновкиДанныхИзФайлаПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСхемыКомпоновкиДанных = ЗагрузитьФайлСхемыКомпоновкиДанныхНаСервере(ПомещенныеФайлы[0].Хранение);

	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Текст", ТекстСхемыКомпоновкиДанных);
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	УКО_ДанныеКлиент_ИзменитьПоля(ЭтаФорма, ТекущаяСтрока, ИзменяемыеПоля);
	
	ПроверитьСхемуКомпоновкиДанных (ТекущиеДанные);
	
	ОбновитьЭлементыФормы();

КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлСхемыКомпоновкиДанныхНаСервере(Адрес)
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	
	ЧтениеТекста = Новый ЧтениеТекста(Данные.ОткрытьПотокДляЧтения());
	Результат = ЧтениеТекста.Прочитать();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьСхемуКомпоновкиДанныхВФайлПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныеФайлы[0];
	
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла);
	ЗаписьТекста.Записать(СхемаКомпоновкиДанныхXML);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонструкторТонкогоКлиента(Текст, ДополнительныеПараметры)
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	Если ЗначениеЗаполнено(Текст) Тогда
		КонструкторЗапроса.Текст = Текст;
	КонецЕсли;
	КонструкторЗапроса.Показать(Новый ОписаниеОповещения("РедактированиеЗапросаКонструкторомЗакончено", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибку()
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ошибка) Тогда
		Ошибка = ТекущиеДанные.Ошибка;
	Иначе
		Ошибка = ТекущиеДанные.ОшибкаПриВыполнении;
	КонецЕсли;
	
	Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(ТекущаяСтрока.Тип) Тогда
		ЭлементТекст = Элементы.ТекстЗапроса;
	ИначеЕсли ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		ЭлементТекст = Элементы.СхемаКомпоновкиДанныхXML;
	КонецЕсли;
	
	Если ТипЗнч(Ошибка) = Тип("Структура") Тогда
		ЭлементТекст.УстановитьГраницыВыделения (	Ошибка.НомерСтроки, Ошибка.НомерСтолбца,
															Ошибка.НомерСтроки, Ошибка.НомерСтолбца);
	КонецЕсли;
														
	ТекущийЭлемент	= ЭлементТекст;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПоказатьОшибку(СохранитьДанныеСтроки = Истина, ВыводитьПредупреждениеОшибокНет = Ложь, ПроверяемыеДанные = Неопределено)
	
	Если ПроверяемыеДанные = Неопределено Тогда
		ПроверяемыеДанные = ТекущиеДанные;
	КонецЕсли;
	
	Если СохранитьДанныеСтроки Тогда
		СохранитьИзмененныеДанныеСтроки();
	КонецЕсли;
	
	Если ПроверяемыеДанные.Свойство("ТребуетсяПроверка") = Ложь Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверяемыеДанные.ТребуетсяПроверка Тогда 
		
		Если ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			
			ПроверитьЗапрос(ПроверяемыеДанные);
			ОбновитьСтруктуруЗапросов(ТекущаяСтрока);
			
		ИначеЕсли ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
			ПроверитьСхемуКомпоновкиДанных(ПроверяемыеДанные);
		КонецЕсли;

	КонецЕсли;
	
	ОбновитьЭлементыФормы();
	
	Если ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		ТекстОшибокНет = НСтр("ru = 'Текст запроса проверен. Ошибок нет'; en = 'Request text verified. There are no errors'");
	ИначеЕсли ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		ТекстОшибокНет = НСтр("ru = 'Схема компоновки данных проверена. Ошибок нет'; en = 'The data layout scheme has been verified. There are no errors'");
	КонецЕсли;
	
	ЕстьОшибка = ЗначениеЗаполнено(ПроверяемыеДанные.Ошибка);
	Если ЕстьОшибка Тогда 
		ПоказатьОшибку();
	Иначе
		Если ВыводитьПредупреждениеОшибокНет Тогда
			ПоказатьОповещениеПользователя(УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(),,ТекстОшибокНет, БиблиотекаКартинок.СинтаксическийКонтроль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОшибка;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСхемуКомпоновкиДанных (Данные)
	
	Если ЗначениеЗаполнено(Данные.Текст) Тогда
		ТекстОшибки = УКО_СКДВызовСервера_ПроверитьТекст(Данные.Текст);
	Иначе
		ТекстОшибки = УКО_СКДКлиентСервер_ТекстОшибкиПустаяСхема();
	КонецЕсли;

	Данные.ТребуетсяПроверка = Ложь;
	Данные.Ошибка = УКО_СКДКлиентСервер_ИнформацияООшибке(ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗапрос (Данные)
	
	Если ЗначениеЗаполнено(Данные.Текст) Тогда
		
		РезультатПроверки = УКО_ЗапросВызовСервера_ПроверитьТекст(Данные.Текст);
		
		ПолученныеПараметры = РезультатПроверки.Параметры;
		ПолученныеВременныеТаблицы = РезультатПроверки.ВременныеТаблицы;
		ТекстОшибки = РезультатПроверки.ТекстОшибки;
		
	Иначе
		
		ПолученныеПараметры = Новый Соответствие;
		ПолученныеВременныеТаблицы = Новый Соответствие;
		ТекстОшибки = УКО_ЗапросКлиентСервер_ТекстОшибкиПустойЗапрос();
		
	КонецЕсли;
		
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Ложь);
	ИзменяемыеПоля.Вставить("Параметры", ПолученныеПараметры);
	ИзменяемыеПоля.Вставить("ВременныеТаблицы", ПолученныеВременныеТаблицы);
	ИзменяемыеПоля.Вставить("Ошибка", УКО_ЗапросКлиентСервер_ИнформацияООшибке(ТекстОшибки));
	УКО_ДанныеКлиент_ИзменитьПоля(ЭтаФорма, ТекущаяСтрока, ИзменяемыеПоля);

КонецПроцедуры

&НаКлиенте
Функция ДанныеПараметровЗапроса(Строка)
	
	Данные = УКО_ДанныеКлиент_Получить(ЭтаФорма, Строка);
	
	Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		ЗначенияПараметровЗапроса = Новый Структура;
		Для Каждого ПараметрЗапроса Из Данные.Параметры Цикл 
			
			ТипЗначения = ПараметрЗапроса.Значение;
			ДанныеПараметра = Новый Структура("Тип, Значение", ТипЗначения, УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(Данные, ПараметрЗапроса.Ключ, ТипЗначения));
			ЗначенияПараметровЗапроса.Вставить(ПараметрЗапроса.Ключ, ДанныеПараметра);
			
		КонецЦикла;
		
	ИначеЕсли Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда		
		
		ДанныеГлавногоЗапроса = УКО_ДанныеКлиент_Получить(ЭтаФорма, ПолучитьГлавныйЗапрос(Строка));
		
		ЗначенияПараметровЗапроса = Новый Структура;
		Для Каждого ИмяПараметра Из Данные.Параметры Цикл 
			
			ТипЗначения = ДанныеГлавногоЗапроса.Параметры[ИмяПараметра];
			ДанныеПараметра = Новый Структура("Тип, Значение", ТипЗначения, УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(ДанныеГлавногоЗапроса, ИмяПараметра, ТипЗначения));
			ЗначенияПараметровЗапроса.Вставить(ИмяПараметра, ДанныеПараметра);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияПараметровЗапроса;
	
КонецФункции 

&НаКлиенте
Функция ДанныеПараметраЗапроса(Строка, Имя)
	
	Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
		СтрокаЗапрос = ПолучитьГлавныйЗапрос(Строка);
	Иначе
		СтрокаЗапрос = Строка;
	КонецЕсли;

	Данные = УКО_ДанныеКлиент_Получить(ЭтаФорма, СтрокаЗапрос);
	ОписаниеТипаЗначения = Данные.Параметры[Имя];
	
	Возврат Новый Структура("ОписаниеТипов, Значение", ОписаниеТипаЗначения, УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(Данные, Имя, ОписаниеТипаЗначения));
	
КонецФункции

&НаКлиенте
Функция ПодготовитьДанныеДляСравнения(СтрокаИсточник, СписокЗначений, ТипСтроки)
	
	Для Каждого Строка Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		
		Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда
			ПодготовитьДанныеДляСравнения(Строка, СписокЗначений, ТипСтроки); 
		ИначеЕсли Строка.Тип = ТипСтроки
				ИЛИ (ТипСтроки = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" И УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ТипСтроки)) Тогда
			
			ДанныеСтроки = УКО_ДанныеКлиент_Получить(ЭтаФорма, Строка);
			Если Не (ДанныеСтроки.Свойство("ТребуетсяПроверка") И ДанныеСтроки.ТребуетсяПроверка 
					ИЛИ ЗначениеЗаполнено(ДанныеСтроки.Ошибка)) Тогда
					
				ПредставлениеСтроки = ПолноеИмяСтрокиДляСравнения(Строка);
				Если Строка.Выделение Тогда
					ПредставлениеСтроки = Новый ФорматированнаяСтрока(ПредставлениеСтроки, УКО_ОбщегоНазначенияКлиентСервер_ШрифтЖирный());
				КонецЕсли;
				
				СписокЗначений.Добавить(Строка(Строка.UID), ПредставлениеСтроки);
				Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(ТипСтроки) Тогда
					ПодготовитьДанныеДляСравнения(Строка, СписокЗначений, ТипСтроки);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Функция ПолноеИмяСтрокиДляСравнения(Строка)
	
	ПолноеИмя = Строка.Имя;
	
	РодительСтроки = Строка.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ПолноеИмя = РодительСтроки.Имя + " - " +ПолноеИмя;
		РодительСтроки = РодительСтроки.ПолучитьРодителя();
	КонецЕсли;

	Возврат ПолноеИмя;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСравнения(СтрокаЭталон, ДополнительныеПараметры)
	
	СохранитьИзмененныеДанныеСтроки();
	
	#Если Не ТолстыйКлиентУправляемоеПриложение Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Запуск сравнения возможен только в толстом клиенте.'; en = 'Running the comparison is only possible in a thick client.'"),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Возврат;
		
	#КонецЕсли
	
	ПараметрыФормы = Новый Структура;
	МинимальноеКоличествоОбъектовСравнения = 2;
	
	ТипОбъектов = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ТипОбъектов", Неопределено);
	ТипСравнения = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ТипСравнения", Неопределено);
	НеизменяемыеПоля = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "НеизменяемыеПоля", Новый Структура);
	СтрокаНовый = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "СтрокаНовый", Неопределено);
	
	СписокЗапросов = Новый СписокЗначений;
	ПодготовитьДанныеДляСравнения(ДеревоДанных, СписокЗапросов, "Перечисление.УКО_ЭлементыДанных.Запрос");
	ПараметрыФормы.Вставить("СписокЗапросов", СписокЗапросов);

	СписокСхемКомпоновкиДанных = Новый СписокЗначений;
	ПодготовитьДанныеДляСравнения(ДеревоДанных, СписокСхемКомпоновкиДанных, "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных");
	ПараметрыФормы.Вставить("СписокСхемКомпоновкиДанных", СписокСхемКомпоновкиДанных);
	
	Если СтрокаЭталон <> Неопределено Тогда
		ПараметрыФормы.Вставить("ОбъектЭталон", СтрокаЭталон.UID);
	КонецЕсли;
	Если СтрокаНовый <> Неопределено Тогда
		ПараметрыФормы.Вставить("ОбъектНовый", СтрокаНовый.UID);
	КонецЕсли;

	НедостаточноДанных = Ложь;
	Если (СписокЗапросов.Количество() < МинимальноеКоличествоОбъектовСравнения
			И СписокСхемКомпоновкиДанных.Количество() < МинимальноеКоличествоОбъектовСравнения) Тогда
		НедостаточноДанных = Истина;
	КонецЕсли;
	
	Если НеизменяемыеПоля.Свойство("ТипОбъектов") Тогда
		
		Если (ТипОбъектов = "Перечисление.УКО_ЭлементыДанных.Запрос" И СписокЗапросов.Количество() < МинимальноеКоличествоОбъектовСравнения)
				ИЛИ (ТипОбъектов = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" И СписокСхемКомпоновкиДанных.Количество() < МинимальноеКоличествоОбъектовСравнения) Тогда
			НедостаточноДанных = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если НедостаточноДанных Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно данных для сравнения. Данные должны быть проверены и не иметь ошибок.'; en = 'Not enough data to compare. The data should be checked and there should be no errors.'"),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		Возврат;
	КонецЕсли;
	
	Если СписокЗапросов.Количество() < МинимальноеКоличествоОбъектовСравнения Тогда
		ТипОбъектов = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных";
		НеизменяемыеПоля.Вставить("ТипОбъектов");
	КонецЕсли;
	Если СписокСхемКомпоновкиДанных.Количество() < МинимальноеКоличествоОбъектовСравнения Тогда
		ТипОбъектов = "Перечисление.УКО_ЭлементыДанных.Запрос";
		НеизменяемыеПоля.Вставить("ТипОбъектов");
	КонецЕсли;

	ПараметрыФормы.Вставить("ТипОбъектов", ТипОбъектов);
	ПараметрыФормы.Вставить("ТипСравнения", ТипСравнения);
	
	ПараметрыФормы.Вставить("НеизменяемыеПоля", НеизменяемыеПоля);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаСравненияЗавершена", ЭтотОбъект);	
	УКО_ФормыКлиент_ОткрытьДополнительную("НастройкаСравнения", ПараметрыФормы, ЭтаФорма,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуПоUID(СтрокаИсточник, UID)
	
	Результат = Неопределено;
	
	Для Каждого Строка Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		
		Если Строка.UID = UID Тогда
			Результат = Строка;
			Прервать;
		КонецЕсли;
		
		Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(Строка.Тип) Тогда
			
			НайденнаяСтрока = НайтиСтрокуПоUID(Строка, UID);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока; 
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
		
	Возврат Результат;	

КонецФункции

&НаКлиенте
Функция КомандаОтправкиПисьма()
	
	ИнформацияОКлиенте = Новый Структура;
	
	ИнформацияОКлиенте.Вставить("ТипКлиента", УКО_ОбщегоНазначенияКлиент_ПредставлениеТипаКлиента());
	ИнформацияОКлиенте.Вставить("СкоростьСоединения", ПолучитьСкоростьКлиентскогоСоединения());
	
	ИнформацияОЭкранах = Новый Массив;
	Для Каждого ИнформацияОЭкране Из ПолучитьИнформациюЭкрановКлиента() Цикл 
		ИнформацияОЭкранах.Добавить(СтрШаблон("%1х%2 (%3 dpi)", УКО_СтрокиКлиентСервер_ЧислоВСтроку(ИнформацияОЭкране.Ширина), УКО_СтрокиКлиентСервер_ЧислоВСтроку(ИнформацияОЭкране.Высота), УКО_СтрокиКлиентСервер_ЧислоВСтроку(ИнформацияОЭкране.DPI)));
	КонецЦикла;
	ИнформацияОКлиенте.Вставить("Экраны", СтрСоединить(ИнформацияОЭкранах, ", "));	

	Возврат УКО_ОбщегоНазначенияВызовСервера_СкриптОтправкиПисьма(ИнформацияОКлиенте);
	
КонецФункции

&НаКлиенте
Процедура РабочиеДанные(Тип, Имя)
	
	РабочиеДанные.Тип = Тип;
	РабочиеДанные.Имя = Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеВНастройки(ИмяНастройки)
	
	Состояние(НСтр("ru = 'Сохранение настройки:'; en = 'Save the settings:'"),,ИмяНастройки, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);

	СохранитьИзмененныеДанныеСтроки();
	
	ПодготовленныеДанные = ПодготовитьДанныеДляСохранения(ДеревоДанных);
	УКО_НастройкиВызовСервера_СохранитьДанные(ИмяНастройки, ПодготовленныеДанные);
	
	РабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Настройка", ИмяНастройки);
	
	Модифицированность = Ложь;
	ОбновитьЗаголовок();
	
	ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Настройка", ИмяНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзНастроек(ИмяНастройки)
	
	Состояние(НСтр("ru = 'Загрузка настройки:'; en = 'Loading settings:'"),,ИмяНастройки,Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	
	УКО_ДанныеКлиент_Очистить(ЭтаФорма);
	
	МассивДанных = УКО_НастройкиВызовСервера_ЗагрузитьДанные(ИмяНастройки, УникальныйИдентификатор);
	ЗагрузитьДанныеИзМассива(МассивДанных, ДеревоДанных);
	РаскрытьВеткиДереваВСоответствииСДанными(ДеревоДанных);
	ОбновитьСтруктуруЗапросов(ПолучитьСтрокиДереваДанных(ДеревоДанных, "Перечисление.УКО_ЭлементыДанных.Запрос"));
	ОбновитьЭлементыПоследниеРабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Настройка", ИмяНастройки);
	
	РабочиеДанные("Перечисление.УКО_ТипыХраненияДанных.Настройка", ИмяНастройки);
	ОбновитьЗаголовок();
	
	ОчиститьРезультат(ТабличныйДокументРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации() Экспорт
	
	УКО_ДлительныеОперацииКлиент_СтандартныйОбработчикОжиданияДлительнойОперации(ЭтаФорма, ДлительнаяОперация,
		УКО_ДлительныеОперацииВызовСервера_ДанныеСостояния(ДлительнаяОперация.Идентификатор, ДлительнаяОперация.АдресРезультатаВыполнения));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыполненияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Свойство("ВремяВыполнения") Тогда
		ТекущиеДанные.ВремяВыполнения = Результат.ВремяВыполнения;
	КонецЕсли;
	
	ОшибкаПриВыполнении = Результат.ОшибкаПриВыполнении;
	ТекущиеДанные.ОшибкаПриВыполнении = ОшибкаПриВыполнении;
	
	Если Не ЗначениеЗаполнено(ОшибкаПриВыполнении) Тогда 
		
		Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоРежимВыполненияСРезультатом(Результат.РежимВыполнения) Тогда
			
			ОбновитьРезультатВыполнения(Результат);
			
		ИначеЕсли Результат.РежимВыполнения = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.ПолучениеИсполняемыхЗапросов" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Адрес", Результат.АдресИсполняемыхЗапросовСКД);
			
			УКО_ФормыКлиент_ОткрытьДополнительную("АнализИсполняемыхЗапросов", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьОшибку();
		
	КонецЕсли;
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезультатВыполнения(Результат)
	
	ОчиститьРезультат();
	ОбновитьТабличныйДокументРезультатСервер(Результат.АдресРезультата, УдаляемыеАдресаВременныхХранилищРезультата());
	СкорректироватьВыделениеВТабличномДокументеРезультата();
	
	ЗаполнитьЗначенияСвойств(ТекущийРезультат, Результат);
	ТекущийРезультат.Пустой = Ложь;
	ТекущийРезультат.АктуаленПоСтроке = ТекущаяСтрока.UID;
	ТекущийРезультат.ОкончаниеВыполненияНаКлиенте = ТекущаяДата();
	ТекущийРезультат.Адрес = Результат.АдресРезультата;
	ТекущийРезультат.АдресИсполняемыхЗапросовСКД = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ТекущийРезультат, "АдресИсполняемыхЗапросовСКД");
	РезультатКоличество = Результат.Количество;
	
	// Фиксация шапки в табличном документе
	Если Результат.Свойство("КоличествоЗапросовСРезультатом") Тогда
		
		ЗапросСОднимРезультатом = (Результат.КоличествоЗапросовСРезультатом = 1);
		ФиксацияШапкиДоступность = ЗапросСОднимРезультатом;
		ФиксацияШапки = ЗапросСОднимРезультатом;
		
	Иначе
		
		ФиксацияШапки = Ложь;
		ФиксацияШапкиДоступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ФиксацияШапкиТабличногоДокумента.Доступность = ФиксацияШапкиДоступность;
	Элементы.ФиксацияШапкиТабличногоДокумента.Пометка = ФиксацияШапки;
	УКО_ТабличныйДокументКлиентСервер_ЗафиксироватьШапку(ТабличныйДокументРезультат, ФиксацияШапки);
	
	УКО_ТабличныйДокументКлиентСервер_ОбновитьЭлементыПодменюУровеньГруппировок(Элементы, ТабличныйДокументРезультат, Элементы.ТабличныйДокументРезультатКонтекстноеМенюГруппировкиУровень);
	
	ТекущийЭлемент = Элементы.ПанельРезультат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьТабличныйДокументРезультатСервер(АдресРезультата, УдаляемыеАдреса = Неопределено)
	
	Если ЗначениеЗаполнено(УдаляемыеАдреса) Тогда
		ОбъектОбработки().УКО_ВременноеХранилище_Удалить(УдаляемыеАдреса);
	КонецЕсли;
	ТабличныйДокументРезультат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
КонецФункции

&НаСервере
Функция ЗапуститьВыполнениеНаСервере(Знач Данные, Режим, ИгнорироватьЛимитСтрок = Ложь, УникальныйИдентификатор, ФоновоеВыполнение = Истина, АдресРезультатаВыполнения = Неопределено)

	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПодготовитьДанныеПередВыполнением(Данные, ФоновоеВыполнение));
	ПараметрыВыполнения.Добавить(Режим);
	
	Если УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(Данные.Тип) Тогда
		
		ПолноеИмяМетода = "УКО_Запрос_ПолучитьРезультат";
		ПараметрыВыполнения.Добавить(ИгнорироватьЛимитСтрок);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("АдресРезультата", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
		ДополнительныеПараметры.Вставить("АдресДанныхРасшифровки", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
		ПараметрыВыполнения.Добавить(ДополнительныеПараметры);
		
	ИначеЕсли УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(Данные.Тип) Тогда

		ПолноеИмяМетода = "УКО_СКД_ПолучитьРезультат";
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("АдресРезультата", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
		ДополнительныеПараметры.Вставить("АдресСхемыКомпоновкиДанных", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
		ДополнительныеПараметры.Вставить("АдресДанныхРасшифровки", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
		ДополнительныеПараметры.Вставить("АдресИсполняемыхЗапросов", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
		ПараметрыВыполнения.Добавить(ДополнительныеПараметры);
		
	КонецЕсли;
	
 	Возврат ОбъектОбработки().УКО_ДлительныеОперации_Запустить(ПолноеИмяМетода, ПараметрыВыполнения, УникальныйИдентификатор, АдресРезультатаВыполнения, ФоновоеВыполнение);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПодготовкиСравнения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПервогоФайла = ДополнительныеПараметры.ИмяПервогоФайла;
	ИмяВторогоФайла = ДополнительныеПараметры.ИмяВторогоФайла;
	
	НаименованиеОперации = НСтр("ru = 'Сохранение файлов для сравнения'; en = 'Save files for comparison'");
	Состояние(НаименованиеОперации,, НСтр("ru = '(1/2) Сохранение файла эталон'; en = '(1/2) Saving the master file'"), Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	Результат.РезультатЭталон.Записать(ИмяПервогоФайла, ТипФайлаТабличногоДокумента.MXL);

	Состояние(НаименованиеОперации,, НСтр("ru = '(2/2) Сохранение файла новый'; en = '(2/2) Saving the file new'"), Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	Результат.РезультатНовый.Записать(ИмяВторогоФайла, ТипФайлаТабличногоДокумента.MXL);
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		УКО_ФормыКлиент_ПоказатьСравнениеФайлов(ИмяПервогоФайла, ИмяВторогоФайла, СпособСравненияФайлов.ТабличныйДокумент);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПодготовкуСравненияНаСервере(Знач ДанныеЭталон, Знач ДанныеНовый, УникальныйИдентификатор, ФоновоеВыполнение = Истина, АдресРезультатаВыполнения = Неопределено)

	ПолноеИмяМетода = "УКО_ОбщегоНазначения_ПодготовитьДанныеДляСравнения";
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПодготовитьДанныеПередВыполнением(ДанныеЭталон, ФоновоеВыполнение));
	ПараметрыВыполнения.Добавить(ПодготовитьДанныеПередВыполнением(ДанныеНовый, ФоновоеВыполнение));

	Возврат ОбъектОбработки().УКО_ДлительныеОперации_Запустить("УКО_ОбщегоНазначения_ПодготовитьДанныеДляСравнения", ПараметрыВыполнения, УникальныйИдентификатор, АдресРезультатаВыполнения, ФоновоеВыполнение);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОбъектОбработки().УКО_Формы_ДобавитьУсловноеОформление(УсловноеОформление, "ДеревоДанныхИмя", Новый Структура("Шрифт", УКО_ОбщегоНазначенияКлиентСервер_ШрифтЖирный120()), "ДеревоДанных.Выделение", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруЗапроса(Строка, Данные)
	
	Если ЗначениеЗаполнено(Данные) Тогда
		
		Для Каждого Элемент Из Данные Цикл 
			
			НачальныеДанные = УКО_ДанныеКлиентСервер_НовыйЭлемент("Перечисление.УКО_ЭлементыДанных.ПодЗапрос");
			НачальныеДанные.Вставить("ТекстИнициализации", Элемент.ТекстИнициализации);
			НачальныеДанные.Вставить("Текст", Элемент.Текст);
			НачальныеДанные.Вставить("Параметры", Элемент.Параметры);
			
			НоваяСтрока = ДобавитьСтрокуВДеревоДанных(Элемент.Представление, "Перечисление.УКО_ЭлементыДанных.ПодЗапрос", Строка, Ложь, НачальныеДанные,,Элемент.Картинка);
			
			ОбновитьСтруктуруЗапроса(НоваяСтрока, Элемент.Элементы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруЗапросов(Объект, ОбновлениеСтруктуры = Истина)
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ОбрабатываемыеСтроки = Объект;
	Иначе
		ОбрабатываемыеСтроки = Новый Массив;
		ОбрабатываемыеСтроки.Добавить(Объект);
	КонецЕсли;
	
	// Обновление структуры
	УдаляемыеСтроки = Новый Массив;
	
	ОбрабатываемыеСтрокиДанные = Новый Соответствие;
	Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл 
		
		ДанныеСтроки = УКО_ДанныеКлиент_Получить(ЭтаФорма, ОбрабатываемаяСтрока);
		Если ДанныеСтроки.Ошибка = Неопределено 
				И НЕ ДанныеСтроки.ТребуетсяПроверка Тогда
			ОбрабатываемыеСтрокиДанные.Вставить(ОбрабатываемаяСтрока.UID, ДанныеСтроки.Текст);
		КонецЕсли;
		
		Для Каждого УдаляемаяСтрока Из ОбрабатываемаяСтрока.ПолучитьЭлементы() Цикл 
			УдаляемыеСтроки.Добавить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	УКО_ДанныеКлиент_УдалитьСтроки(ЭтаФорма, УдаляемыеСтроки);
	
	Если ОбновлениеСтруктуры 
			И НастройкиОбработки.РазбиратьСтруктуруЗапроса Тогда
		
		СтруктурыСтрок = СтруктурыСтрокЗапросов(ОбрабатываемыеСтрокиДанные);
		Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтроки Цикл 
			ОбновитьСтруктуруЗапроса(ОбрабатываемаяСтрока, СтруктурыСтрок.Получить(ОбрабатываемаяСтрока.UID));
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктурыСтрокЗапросов(ОбрабатываемыеСтрокиДанные)
	
	Результат = Новый Соответствие;
	Для Каждого ОбрабатываемаяСтрока Из ОбрабатываемыеСтрокиДанные Цикл 
		Результат.Вставить(ОбрабатываемаяСтрока.Ключ, ОбъектОбработки().УКО_АнализЗапроса_РазборСтруктуры(ОбрабатываемаяСтрока.Значение));
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьГлавныйЗапрос(Строка)
	
	Родитель = Строка;
	Пока Истина Цикл 
		
		Если Родитель.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			Возврат Родитель;
		КонецЕсли;
		
		Родитель = Родитель.ПолучитьРодителя();

	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ВопросТекстЗапросаБудетПотерянЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		ОткрытьКонструкторЗапроса("");
	Иначе
		ПоказатьОшибку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередУдалениемСтрокДанныхЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭлементДеревоДанных = Элементы.ДеревоДанных;
	Если Результат = Истина Тогда
		
		Модифицированность = Истина;
		
		// Удаляем строки
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ЭлементДеревоДанных.ВыделенныеСтроки Цикл 
			УдаляемыеСтроки.Добавить(ДеревоДанных.НайтиПоИдентификатору(ВыделеннаяСтрока));
		КонецЦикла;
		
		УКО_ДанныеКлиент_УдалитьСтроки(ЭтаФорма, УдаляемыеСтроки);
		
		ПодключитьОбработчикОжидания("ОбновлениеЭлементовФормыПослеОжидания", 0.1, Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередУдалениемВнешнегоИсточникаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Истина Тогда
		
		УдаляемыеАдреса = Новый Массив; УдаляемыеСтроки = Новый Массив;
		Для Каждого ИдентификаторВыделеннойСтроки Из Элементы.ВнешниеИсточники.ВыделенныеСтроки Цикл 
			
			СтрокаВнешнийИсточник = ВнешниеИсточники.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
			ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, СтрокаВнешнийИсточник.UID);
			
			Если ОписаниеВнешнегоИсточника <> Неопределено Тогда
				
				УдаляемыеАдреса.Добавить(ОписаниеВнешнегоИсточника.Значение);
				
			КонецЕсли;
			
			УдаляемыеСтроки.Добавить(СтрокаВнешнийИсточник);
			УКО_ДанныеКлиент_УдалитьВнешнийИсточник(ЭтаФорма, ТекущаяСтрока, СтрокаВнешнийИсточник.UID);

		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл 
			ВнешниеИсточники.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		УКО_ВременноеХранилищеВызовСервера_Удалить(УдаляемыеАдреса);
		
		ОбновитьКоличествоВнешнихИсточников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЗначенияВнешнегоИсточникаЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		Модифицированность = Истина;
		
		ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, ДополнительныеПараметры.UID);

		Если ОписаниеВнешнегоИсточника = Неопределено Тогда
			ОписаниеВнешнегоИсточника = УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника();
		КонецЕсли;
		
		ОписаниеВнешнегоИсточника.Значение = Результат;
		УКО_ДанныеКлиент_ВставитьВнешнийИсточник(ЭтаФорма, ТекущаяСтрока, ДополнительныеПараметры.UID, ОписаниеВнешнегоИсточника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСложногоПараметраЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Истина;
	
	ИмяПараметра = ДополнительныеПараметры.Имя;
	НовоеЗначение = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра(ДополнительныеПараметры.ВидСложногоПараметра, Результат);
	
	УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ИмяПараметра, НовоеЗначение);
	ПараметрЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	ОбновитьСтрокуПараметра(ПараметрЗапросаТекущиеДанные, ИмяПараметра, ПараметрЗапросаТекущиеДанные.ТипЗначения, НовоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВнешниеИсточники()

	ВнешниеИсточники.Очистить();
	Для Каждого ДанныеВнешнегоИсточника Из УКО_ДанныеКлиент_ВнешниеИсточники(ТекущиеДанные) Цикл 
		
		ОписаниеВнешнегоИсточника = ДанныеВнешнегоИсточника.Значение;
		НоваяСтрока = ВнешниеИсточники.Добавить();
		НоваяСтрока.Имя = ОписаниеВнешнегоИсточника.Имя;
		НоваяСтрока.Тип = ОписаниеВнешнегоИсточника.Тип;
		НоваяСтрока.UID = ДанныеВнешнегоИсточника.Ключ;
		
		ОбновитьСтрокуВнешнийИсточник(НоваяСтрока);
		
	КонецЦикла;

	ОбновитьКоличествоВнешнихИсточников();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуВнешнийИсточник(Строка)
	
	Если Строка.Тип = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
		
		ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, Строка.UID);
		ПредставлениеВнешнегоИсточника = УКО_СтрокиКлиентСервер_Сокращенно(ОписаниеВнешнегоИсточника.Значение, 70);
		
	ИначеЕсли Строка.Тип = НСтр("ru = 'Значение'; en = 'Value'") Тогда
		
		ПредставлениеВнешнегоИсточника = НСтр("ru = '<Таблица значений>'; en = '<Table of values>'");
		
	КонецЕсли;
	
	Строка.Представление = ПредставлениеВнешнегоИсточника;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоВнешнихИсточников()
	
	КоличествоВнешнихИсточников = ВнешниеИсточники.Количество();
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьЗначениеВнешнегоИсточникаКТипу(Значение, ИзТипа, КТипу)
	
	Если ИзТипа = НСтр("ru = 'Значение'; en = 'Value'") Тогда 
		
		Если КТипу = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
			Возврат УКО_КодНаВстроенномЯзыкеВызовСервера_ТаблицаЗначений(Значение, "ТаблицаЗначений");
		КонецЕсли;
		
	ИначеЕсли ИзТипа = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда 
		
		Возврат УКО_КодНаВстроенномЯзыкеВызовСервера_ТаблицаЗначенийИзВыражения(Значение, УникальныйИдентификатор);

	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СохранениеНастройкиЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СохранитьДанныеВНастройки(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНастройкиЗавершена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеИзНастроек(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСравненияЗавершена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		
		ПараметрыСравнения = Результат;
		
		СтрокаЭталон = НайтиСтрокуПоUID(ДеревоДанных, ПараметрыСравнения.ОбъектЭталон);
		СтрокаНовый = НайтиСтрокуПоUID(ДеревоДанных, ПараметрыСравнения.ОбъектНовый);
		
		Если ПараметрыСравнения.ТипСравнения = "Перечисление.УКО_ВариантыСравненияДанных.Тексты" Тогда 
			Расширение = "txt";
		ИначеЕсли ПараметрыСравнения.ТипСравнения = "Перечисление.УКО_ВариантыСравненияДанных.Результаты" Тогда
			Расширение = "mxl";
		КонецЕсли;
		
		ИмяПервогоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ИмяВторогоФайла = ПолучитьИмяВременногоФайла(Расширение);
		
		ДанныеЭталон = ИнициализироватьДанныеПередВыполнением(СтрокаЭталон);
		ДанныеНовый = ИнициализироватьДанныеПередВыполнением(СтрокаНовый);
		
		НаименованиеОперации = НСтр("ru = 'Подготовка данных для сравнения'; en = 'Preparing data for comparison'");
		Если ПараметрыСравнения.ТипСравнения = "Перечисление.УКО_ВариантыСравненияДанных.Тексты" Тогда
			
			Состояние(НаименованиеОперации,, НСтр("ru = '(1/2) Сохранение файла эталон'; en = '(1/2) Saving the master file'"), Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
			УКО_ОбщегоНазначенияКлиентСервер_СохранитьТекстВФайл(ИмяПервогоФайла, ПолучитьТекстДляСравнения(ДанныеЭталон));
			Состояние(НаименованиеОперации,, НСтр("ru = '(2/2) Сохранение файла новый'; en = '(2/2) Saving the file new'"), Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
			УКО_ОбщегоНазначенияКлиентСервер_СохранитьТекстВФайл(ИмяВторогоФайла, ПолучитьТекстДляСравнения(ДанныеНовый));
			
			УКО_ФормыКлиент_ПоказатьСравнениеФайлов(ИмяПервогоФайла, ИмяВторогоФайла, СпособСравненияФайлов.ТекстовыйДокумент);
			
		ИначеЕсли ПараметрыСравнения.ТипСравнения = "Перечисление.УКО_ВариантыСравненияДанных.Результаты" Тогда
		
			ФоновоеВыполнение = УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне();
			
			ДополнительныеПараметры = Новый Структура("ИмяПервогоФайла, ИмяВторогоФайла", ИмяПервогоФайла, ИмяВторогоФайла);
			УКО_ДлительныеОперацииКлиент_НачатьВыполнение(ЭтаФорма, НаименованиеОперации, "ЗавершениеПодготовкиСравнения", ДлительнаяОперация, ФоновоеВыполнение, ДополнительныеПараметры); 
		
			Если ФоновоеВыполнение Тогда
				
				Результат = ЗапуститьПодготовкуСравненияНаСервере(ДанныеЭталон, ДанныеНовый, УникальныйИдентификатор);
				ЗаполнитьЗначенияСвойств(ДлительнаяОперация, Результат, "Идентификатор, АдресРезультатаВыполнения");
				
			Иначе
				
				Результат = ЗапуститьПодготовкуСравненияНаСервере(ДанныеЭталон, ДанныеНовый, УникальныйИдентификатор, Ложь);
				УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(ЭтаФорма, ДлительнаяОперация, Результат);

			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЗначенияПараметраЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Истина;
		
	ПараметрЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ПараметрЗапросаТекущиеДанные.Имя, Результат);
	ОбновитьСтрокуПараметра(ПараметрЗапросаТекущиеДанные, ПараметрЗапросаТекущиеДанные.Имя, ПараметрЗапросаТекущиеДанные.ТипЗначения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначенияПараметраЗавершен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеПараметры.Свойство("ВыборТипа") Тогда
		
		ЭлементЗначениеПараметра = Элементы.ПараметрыЗапроса.ТекущийЭлемент;
		ЭлементЗначениеПараметра.ОграничениеТипа = Результат;
		ЭлементЗначениеПараметра.ВыбиратьТип = Ложь;
		
		НовоеЗначение = Результат.ПривестиЗначение(Неопределено);
		
	Иначе
		
		НовоеЗначение = Результат;
		
	КонецЕсли;
	
	ПараметрЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ИмяПараметра = ПараметрЗапросаТекущиеДанные.Имя;
	УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ИмяПараметра, НовоеЗначение);
	ОбновитьСтрокуПараметра(ПараметрЗапросаТекущиеДанные, ИмяПараметра, ПараметрЗапросаТекущиеДанные.ТипЗначения, НовоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразованиеТипаЗначенияПараметраЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗапросаТекущиеДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ИмяПараметра = ПараметрЗапросаТекущиеДанные.Имя;
	
	СтароеЗначение = УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(ТекущиеДанные, ИмяПараметра, ПараметрЗапросаТекущиеДанные.ТипЗначения);
	НовоеЗначение = Неопределено;
	
	Если ТипЗнч(СтароеЗначение) = Тип("Дата") Тогда
		
		Если Результат.СодержитТип(Тип("Граница")) Тогда
			
			НовоеЗначение = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Граница",
													УКО_ЗапросКлиентСервер_ОписаниеГраницы(СтароеЗначение));
													
		ИначеЕсли Результат.СодержитТип(Тип("МоментВремени")) Тогда
			
			НовоеЗначение = УКО_ОбщегоНазначенияВызовСервера_НовыйМоментВремени(СтароеЗначение);
													
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтароеЗначение) = Тип("МоментВремени") Тогда
		
		Если Результат.СодержитТип(Тип("Дата")) Тогда
			
			НовоеЗначение = УКО_ЗапросВызовСервера_ДатаИзМоментаВремени(СтароеЗначение);
													
		ИначеЕсли Результат.СодержитТип(Тип("Граница")) Тогда
			
			НовоеЗначение = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Граница",
													УКО_ЗапросКлиентСервер_ОписаниеГраницы(СтароеЗначение));
													
		КонецЕсли;
		
	ИначеЕсли УКО_ОбщегоНазначенияКлиентСервер_ЭтоЗначениеПараметраГраница(СтароеЗначение) Тогда
		
		ОписаниеЗначенияПараметра = СтароеЗначение.Значение;
		
		Если Результат.СодержитТип(Тип("Дата")) Тогда
			
			НовоеЗначение = УКО_ЗапросВызовСервера_ДатаИзОписанияГраницы(ОписаниеЗначенияПараметра);
			
		ИначеЕсли Результат.СодержитТип(Тип("МоментВремени")) Тогда
			
			НовоеЗначение = УКО_ЗапросВызовСервера_МоментВремениИзОписанияГраницы(ОписаниеЗначенияПараметра);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Результат.ПривестиЗначение(Неопределено);
	КонецЕсли;
	
	УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ИмяПараметра, НовоеЗначение);
	ОбновитьСтрокуПараметра(ПараметрЗапросаТекущиеДанные, ИмяПараметра, ПараметрЗапросаТекущиеДанные.ТипЗначения, НовоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеЗаполненияПараметров(Имена, ИсточникСтрок)
	
	ДанныеЗаполнения = Новый Массив;
	Для Каждого СтрокаДерева Из ИсточникСтрок.ПолучитьЭлементы() Цикл 
		
		Если СтрокаДерева = ТекущаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			
			ЗначенияПараметров = ПодготовитьЗначенияПараметровДляЗаполнения(Имена, СтрокаДерева);
			
			Если ЗначениеЗаполнено(ЗначенияПараметров) Тогда
				
				ОписаниеСтроки = Новый Структура;
				ОписаниеСтроки.Вставить("Имя", СтрокаДерева.Имя);
				ОписаниеСтроки.Вставить("Выделение", СтрокаДерева.Выделение);
				ОписаниеСтроки.Вставить("Картинка", СтрокаДерева.Картинка);
				ОписаниеСтроки.Вставить("Параметры", ЗначенияПараметров);
				
				ДанныеЗаполнения.Добавить(ОписаниеСтроки);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.Тип = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда
			
			Строки = ПодготовитьДанныеЗаполненияПараметров(Имена, СтрокаДерева);
			
			Если ЗначениеЗаполнено(Строки) Тогда
				ОписаниеСтроки = Новый Структура;
				ОписаниеСтроки.Вставить("Имя", СтрокаДерева.Имя);
				ОписаниеСтроки.Вставить("Выделение", СтрокаДерева.Выделение);
				ОписаниеСтроки.Вставить("Картинка", СтрокаДерева.Картинка);
				ОписаниеСтроки.Вставить("Строки", Строки);
				
				ДанныеЗаполнения.Добавить(ОписаниеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьЗначенияПараметровДляЗаполнения(Имена, СтрокаДерева)
	
	НесколькоПараметров = (Имена.Количество() > 1);
	ЗначенияПараметров = Новый Соответствие;
	
	ДанныеСтроки = УКО_ДанныеКлиент_Получить(ЭтаФорма, СтрокаДерева);
	
	Для Каждого ПараметрИсточник Из ДанныеСтроки.ЗначенияПараметров Цикл 
		
		ДобавляемЭтоЗначение = Ложь;
		Если НесколькоПараметров Тогда
			
			Если Имена.Найти(ПараметрИсточник.Ключ) <> Неопределено 
					И ПодходящийПараметрДляЗаполнения(ПараметрИсточник.Ключ, ПараметрИсточник.Ключ, ТекущаяСтрока, СтрокаДерева) Тогда
				ДобавляемЭтоЗначение = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ПодходящийПараметрДляЗаполнения(Имена[0], ПараметрИсточник.Ключ, ТекущаяСтрока, СтрокаДерева) Тогда
				ДобавляемЭтоЗначение = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДобавляемЭтоЗначение Тогда
			ЗначенияПараметров.Вставить(ПараметрИсточник.Ключ, ПараметрИсточник.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаКлиенте
Функция ПодходящийПараметрДляЗаполнения(ИмяПриемник, ИмяИсточник, СтрокаПриемника, СтрокаИсточника)
	
	Результат = Ложь;
	
	Приемник = ДанныеПараметраЗапроса(СтрокаПриемника, ИмяПриемник);
	Источник = ДанныеПараметраЗапроса(СтрокаИсточника, ИмяИсточник);
	
	Если (Приемник.Значение <> Источник.Значение 
				ИЛИ  Приемник.ОписаниеТипов = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений")
			И (Приемник.ОписаниеТипов = Источник.ОписаниеТипов
				ИЛИ (ТипЗнч(Приемник.ОписаниеТипов) = Тип("ОписаниеТипов") И Приемник.ОписаниеТипов.СодержитТип(ТипЗнч(Источник.Значение)))
				ИЛИ (Приемник.ОписаниеТипов.СодержитТип(Тип("Дата")) 
							И (УКО_ОбщегоНазначенияКлиентСервер_ЭтоЗначениеПараметраГраница(Источник.Значение)
								ИЛИ ТипЗнч(Источник.Значение) = Тип("МоментВремени")))) Тогда
				
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнениеПараметровЗакончено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеПараметры.Свойство("Имя") Тогда
		
		ЗаполнитьЗначениеПараметра(ДополнительныеПараметры.Имя, Результат);
		
	Иначе
		
		Для Каждого ЗначениеПараметра Из Результат Цикл 
			ЗаполнитьЗначениеПараметра(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗакладкуПараметры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначениеПараметра(ИмяПараметраПриемника, Значение)
	
	СтароеЗначениеПараметра = ТекущиеДанные.ЗначенияПараметров.Получить(ИмяПараметраПриемника);
	
	Если ТипЗнч(СтароеЗначениеПараметра) = Тип("Структура")
			И СтароеЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
			
		УКО_ВременноеХранилищеВызовСервера_Удалить(СтароеЗначениеПараметра.Значение);

	КонецЕсли;
	
	ЗначениеПараметра = СкопироватьЗначениеПараметра(Значение);
	УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(ЭтаФорма, ТекущаяСтрока, ИмяПараметраПриемника, ЗначениеПараметра);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименованиеПараметраЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	УКО_ЗапросКлиентСервер_ПереименоватьПараметр(ТекущиеДанные, ДополнительныеПараметры.Имя, Результат);
	Модифицированность = Истина;
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Функция СкопироватьЗначениеПараметра(Результат)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
			НовоеЗначение = УКО_ОбщегоНазначенияКлиентСервер_СкопироватьОбъект (Результат);
		ИначеЕсли Результат.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
			НовоеЗначение = УКО_ОбщегоНазначенияКлиентСервер_СкопироватьОбъект (Результат);
			НовоеЗначение.Значение = УКО_ОбщегоНазначенияВызовСервера_КопияТаблицыЗначений(Результат.Значение, УникальныйИдентификатор);
		ИначеЕсли Результат.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
			НовоеЗначение = УКО_ОбщегоНазначенияКлиентСервер_СкопироватьОбъект(Результат);
		КонецЕсли;
		
	Иначе 
		
		НовоеЗначение = Результат;
		
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеЭлементовФормыПослеОжидания()

	ОбновитьЭлементыФормы();

КонецПроцедуры

&НаКлиенте
Процедура ЗапускОбработкиРезультата()
	
	ФоновоеВыполнение = УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне();
	НаименованиеОперации = НСтр("ru = 'Получение результата для обработки'; en = 'Getting the result for processing'");
	УКО_ДлительныеОперацииКлиент_НачатьВыполнение(ЭтаФорма, НаименованиеОперации, "ЗавершениеПолученияРезультатаДляОбработки", ДлительнаяОперация, ФоновоеВыполнение); 
	
	Данные = ИнициализироватьДанныеПередВыполнением(ТекущаяСтрока);
	
	Если ФоновоеВыполнение Тогда
		
		Результат = ЗапуститьПолучениеРезультатаДляОбработкиНаСервере(Данные, УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(ДлительнаяОперация, Результат, "Идентификатор, АдресРезультатаВыполнения");
		
	Иначе
		
		Результат = ЗапуститьПолучениеРезультатаДляОбработкиНаСервере(Данные, УникальныйИдентификатор, Ложь);
		УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(ЭтаФорма, ДлительнаяОперация, Результат);		

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПолучениеРезультатаДляОбработкиНаСервере(Знач Данные, УникальныйИдентификатор, ФоновоеВыполнение = Истина, АдресРезультатаВыполнения = Неопределено)

	ПолноеИмяМетода = "УКО_Запрос_ПолучитьРезультат";
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПодготовитьДанныеПередВыполнением(Данные, ФоновоеВыполнение));
	ПараметрыВыполнения.Добавить("Перечисление.УКО_РежимВыполненияЗапроса.ПолучениеРезультатаДляОбработки");
	ПараметрыВыполнения.Добавить(Истина); // Игнорировать лимит строк
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресРезультата", ОбъектОбработки().УКО_ВременноеХранилище_Пустое(УникальныйИдентификатор));
	ПараметрыВыполнения.Добавить(ДополнительныеПараметры);
	
	Возврат ОбъектОбработки().УКО_ДлительныеОперации_Запустить(ПолноеИмяМетода, ПараметрыВыполнения, УникальныйИдентификатор, АдресРезультатаВыполнения, ФоновоеВыполнение);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПолученияРезультатаДляОбработки(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат.ОшибкаПриВыполнении) Тогда
		
		ТекущиеДанные.ОшибкаПриВыполнении = Результат.ОшибкаПриВыполнении;
		ОбновитьЭлементыОшибки();
		ПоказатьОшибку();
		
	Иначе 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Алгоритмы", ТекущиеДанные.АлгоритмыОбработки);
		ПараметрыФормы.Вставить("АдресОбрабатываемыхДанных", Результат.АдресРезультата);
		ПараметрыФормы.Вставить("Данные", ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеАлгоритмовОбработкиРезультатаЗавершено", ЭтотОбъект, ДополнительныеПараметры);
		УКО_ФормыКлиент_ОткрытьДополнительную("ОбработкаРезультата", ПараметрыФормы, ЭтаФорма,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАлгоритмовОбработкиРезультатаЗавершено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Модифицированность = Истина;
	ТекущиеДанные.АлгоритмыОбработки = Результат;
	
КонецПроцедуры

&НаКлиенте
Функция ВставкаФункцииЯзыкаЗапросовВТекст(Элемент)
	
	ВставляемаяСтрока = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ВставляемаяСтрока.ПолучитьЭлементы()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ВставляемыйТекст", ВставляемаяСтрока.Представление);
	Результат.Вставить("СмещениеКурсора", ВставляемаяСтрока.СмещениеКурсора);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеВКомпоновщикНастроек(ДанныеСКД)
	
	СхемаКомпоновкиДанных = ОбъектОбработки().УКО_СКД_СхемаКомпоновкиДанных(ДанныеСКД.XMLСхемаКомпоновкиДанных);
	АдресВременногоХранилищаСхемыКомпоновкиДанных = ОбъектОбработки().УКО_ВременноеХранилище_Поместить(СхемаКомпоновкиДанных, АдресВременногоХранилищаСхемыКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаСхемыКомпоновкиДанных));
	
	Если ДанныеСКД.Свойство("XMLВариантОтчета") И ЗначениеЗаполнено(ДанныеСКД.XMLВариантОтчета) Тогда
		НастройкиВарианта = ОбъектОбработки().УКО_СКД_ВариантНастроек(ДанныеСКД.XMLВариантОтчета);
	Иначе
		НастройкиВарианта = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	
	Если ДанныеСКД.Свойство("XMLПользовательскиеНастройки") Тогда
		ПользовательскиеНастройки = ОбъектОбработки().УКО_СКД_ПользовательскиеНастройки(ДанныеСКД.XMLПользовательскиеНастройки);
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолныеДанныеСКД(Строка)
	
	Результат = Новый Структура;
	
	СтрокаВариантаОтчета = Неопределено;
	СтрокаПользовательскихНастроек = Неопределено;
	Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		
		СтрокаСхемыКомпоновкиДанных = Строка;
		
	ИначеЕсли Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда
		
		СтрокаВариантаОтчета = Строка;
		СтрокаСхемыКомпоновкиДанных = Строка.ПолучитьРодителя();
		
	ИначеЕсли Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" Тогда
		
		СтрокаПользовательскихНастроек = Строка;
		РодительСтроки = Строка.ПолучитьРодителя();
		
		Если РодительСтроки.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
			СтрокаСхемыКомпоновкиДанных = РодительСтроки;
		ИначеЕсли РодительСтроки.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда
			СтрокаВариантаОтчета = РодительСтроки;
			СтрокаСхемыКомпоновкиДанных = РодительСтроки.ПолучитьРодителя();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаСхемыКомпоновкиДанных <> Неопределено Тогда
		ДанныеСхемаКомпоновкиДанных = УКО_ДанныеКлиент_Получить(ЭтаФорма, СтрокаСхемыКомпоновкиДанных);
		Результат.Вставить("XMLСхемаКомпоновкиДанных", ДанныеСхемаКомпоновкиДанных.Текст);	
		Результат.Вставить("ИспользованиеВнешнихФункций", ДанныеСхемаКомпоновкиДанных.ИспользованиеВнешнихФункций);	
		Результат.Вставить("ВнешниеИсточники", ДанныеСхемаКомпоновкиДанных.ВнешниеИсточники);	
	КонецЕсли;
	
	Если СтрокаВариантаОтчета <> Неопределено Тогда
		Результат.Вставить("XMLВариантОтчета", УКО_ДанныеКлиент_Получить(ЭтаФорма, СтрокаВариантаОтчета).Текст);	
	КонецЕсли;
	
	Если СтрокаПользовательскихНастроек <> Неопределено Тогда
		Результат.Вставить("XMLПользовательскиеНастройки", УКО_ДанныеКлиент_Получить(ЭтаФорма, СтрокаПользовательскихНастроек).Текст);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзмененныеДанныеСтроки()
	
	Если ИдентификаторПоследнейВыделеннойСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ДеревоДанных.НайтиПоИдентификатору(ИдентификаторПоследнейВыделеннойСтроки);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" Тогда
		
		УКО_ДанныеКлиент_ИзменитьПоле(ЭтаФорма, Строка, "Текст", УКО_СКДВызовСервера_XMLТекст(КомпоновщикНастроек.ПользовательскиеНастройки));
		
	ИначеЕсли Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда
		
		УКО_ДанныеКлиент_ИзменитьПоле(ЭтаФорма, Строка, "Текст", УКО_СКДВызовСервера_XMLТекст(КомпоновщикНастроек.Настройки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьДанныеПередВыполнением(Строка)
	
	Результат = Новый Структура;
	
	Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
		
		Результат = УКО_ДанныеКлиентСервер_НовыйЭлемент("Перечисление.УКО_ЭлементыДанных.Запрос");
		ДанныеСтроки = УКО_ДанныеКлиент_Получить(ЭтаФорма, Строка);
		ДанныеГлавногоЗапроса = УКО_ДанныеКлиент_Получить(ЭтаФорма, ПолучитьГлавныйЗапрос(Строка));
		
		ЗаполнитьЗначенияСвойств(Результат, ДанныеГлавногоЗапроса);
		
		Результат.Текст = ДанныеСтроки.Текст;
		Результат.Вставить("ТекстИнициализации", ДанныеСтроки.ТекстИнициализации);
		
	ИначеЕсли Строка.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		Результат = УКО_ДанныеКлиент_Получить(ЭтаФорма, Строка);
		
	ИначеЕсли УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(Строка.Тип) Тогда
		
		ДанныеСКД = ПолныеДанныеСКД(Строка);
		Для Каждого ПараметрДанныхСКД Из ДанныеСКД Цикл 
			Результат.Вставить(ПараметрДанныхСКД.Ключ, ПараметрДанныхСКД.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("Тип", Строка.Тип);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстДляСравнения(Данные)
	
	Если Данные.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		Результат = Данные.Текст;
		
	ИначеЕсли Данные.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		
		Результат = Данные.XMLСхемаКомпоновкиДанных;
		
	ИначеЕсли Данные.Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда
		
		Результат = Данные.XMLВариантОтчета;
		
	ИначеЕсли Данные.Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" Тогда
		
		Результат = Данные.XMLПользовательскиеНастройки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводИдентификатораВложенногоЗапросаЗавершен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ГраницыВыделения = УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элементы.ТекстЗапроса);
	НачалоСтроки = ГраницыВыделения.НачалоСтроки; НачалоКолонки = ГраницыВыделения.НачалоКолонки;
	
	РезультатПреобразования = УКО_ЗапросВызовСервера_ПреобразоватьТекстЗапросаВоВложенный(Элементы.ТекстЗапроса.ВыделенныйТекст, Результат);
	
	Если ЗначениеЗаполнено(РезультатПреобразования.Ошибка) Тогда
		
		ПоказатьПредупреждение(, РезультатПреобразования.Ошибка,,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	Иначе 
		
		Элементы.ТекстЗапроса.ВыделенныйТекст = УКО_ЗапросКлиентСервер_СкорректироватьТабуляциюВставляемогоТекста(РезультатПреобразования.Текст, Элементы.ТекстЗапроса.ВыделенныйТекст);
		
		// Вернем выделение текста
		ГраницыВыделения = УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элементы.ТекстЗапроса);
		Элементы.ТекстЗапроса.УстановитьГраницыВыделения (НачалоСтроки, НачалоКолонки, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);
		
		ИзменяемыеПоля = Новый Структура;
		ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Ложь);
		ИзменяемыеПоля.Вставить("Текст", ТекстЗапроса);
		УКО_ДанныеКлиент_ИзменитьПоля(ЭтаФорма, ТекущаяСтрока, ИзменяемыеПоля);
		
		ПроверитьПоказатьОшибку(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеДобавленияНовогоЭлементаВДерево()
	ТекущийЭлемент = Элементы.Представление;
КонецПроцедуры

&НаКлиенте
Функция СписокДоступенДляПараметра(Значение, ОписаниеТиповЗначения)
	
	Возврат НЕ (ОписаниеТиповЗначения = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" 
					ИЛИ ТипЗнч(Значение) = Тип("МоментВремени")
					ИЛИ ТипЗнч(Значение) = Тип("Граница")
					ИЛИ УКО_ОбщегоНазначенияКлиентСервер_ЭтоЗначениеПараметраГраница(Значение));

КонецФункции

&НаКлиенте
Процедура ВводИдентификатораВнешнегоИсточникаЗавершен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВнешниеИсточникиТекущиеДанные = Элементы.ВнешниеИсточники.ТекущиеДанные;
	ВнешниеИсточникиТекущиеДанные.Имя = Результат;
	
	ОписаниеВнешнегоИсточника = УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(ТекущиеДанные, ВнешниеИсточникиТекущиеДанные.UID);
	ОписаниеВнешнегоИсточника.Имя = Результат;
	
	УКО_ДанныеКлиент_ВставитьВнешнийИсточник(ЭтаФорма, ТекущаяСтрока, ВнешниеИсточникиТекущиеДанные.UID, ОписаниеВнешнегоИсточника);
	
	Модифицированность = Истина;
		
	ВнешниеИсточники.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйТекущийРезультат(ТекущийРезультат)
	
	ТекущийРезультат = Новый Структура;
	ТекущийРезультат.Вставить("Пустой", Истина);
	ТекущийРезультат.Вставить("UID");
	ТекущийРезультат.Вставить("Адрес");
	ТекущийРезультат.Вставить("АдресДанныхРасшифровки");
	ТекущийРезультат.Вставить("АдресСхемыКомпоновкиДанных");
	ТекущийРезультат.Вставить("АдресИсполняемыхЗапросовСКД");
	ТекущийРезультат.Вставить("РежимВыполнения");
	ТекущийРезультат.Вставить("ВсеСтрокиВыведены");
	ТекущийРезультат.Вставить("АктуаленПоСтроке");
	ТекущийРезультат.Вставить("IDПроцесса");
	ТекущийРезультат.Вставить("НачалоВыполнения");
	ТекущийРезультат.Вставить("ОкончаниеВыполненияНаКлиенте");
	ТекущийРезультат.Вставить("ОписанияТиповПараметров");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускРегистрацииИзмененийВПланеОбмена()
	
	ФоновоеВыполнение = УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне();
	НаименованиеОперации = НСтр("ru = 'Получение результата для обработки'; en = 'Getting the result for processing'");
	УКО_ДлительныеОперацииКлиент_НачатьВыполнение(ЭтаФорма, НаименованиеОперации, "ЗавершениеПолученияРезультатаДляРегистрацииИзменений", ДлительнаяОперация, ФоновоеВыполнение); 
	
	Данные = ИнициализироватьДанныеПередВыполнением(ТекущаяСтрока);
	
	Если ФоновоеВыполнение Тогда
		
		Результат = ЗапуститьПолучениеРезультатаДляОбработкиНаСервере(Данные, УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(ДлительнаяОперация, Результат, "Идентификатор, АдресРезультатаВыполнения");
		
	Иначе
		
		Результат = ЗапуститьПолучениеРезультатаДляОбработкиНаСервере(Данные, УникальныйИдентификатор, Ложь);
		УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(ЭтаФорма, ДлительнаяОперация, Результат);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолученияРезультатаДляРегистрацииИзменений(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат.ОшибкаПриВыполнении) Тогда
		
		ТекущиеДанные.ОшибкаПриВыполнении = Результат.ОшибкаПриВыполнении;
		ОбновитьЭлементыОшибки();
		ПоказатьОшибку();
		
	Иначе 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Адрес", Результат.АдресРезультата);
		
		УКО_ФормыКлиент_ОткрытьДополнительную("ЗарегистрироватьИзмененияВПланеОбмена", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокиДереваДанных(Строка, ОтборТип)
	
	Результат = Новый Массив;
	Для Каждого ВложеннаяСтрока Из Строка.ПолучитьЭлементы() Цикл 
		
		Если ВложеннаяСтрока.Тип = ОтборТип Тогда
			Результат.Добавить(ВложеннаяСтрока);
		ИначеЕсли ВложеннаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда
			
			СтрокиГруппы = ПолучитьСтрокиДереваДанных(ВложеннаяСтрока, ОтборТип);
			Для Каждого СтрокаВГруппе Из СтрокиГруппы Цикл 
				Результат.Добавить(СтрокаВГруппе);
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяПроверкаСтроки()
	
	Если ТекущаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
		Результат = Ложь;
	Иначе
		Результат = ТекущиеДанные.ТребуетсяПроверка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УдаляемыеАдресаВременныхХранилищРезультата()
	
	Результат = Новый Массив;
	
	Результат.Добавить(ТекущийРезультат.Адрес);
	
	Если ЗначениеЗаполнено(ТекущийРезультат.АдресСхемыКомпоновкиДанных) Тогда 
		Результат.Добавить(ТекущийРезультат.АдресСхемыКомпоновкиДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийРезультат.АдресДанныхРасшифровки) Тогда 
		Результат.Добавить(ТекущийРезультат.АдресДанныхРасшифровки);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущийРезультат.АдресИсполняемыхЗапросовСКД) Тогда 
		Результат.Добавить(ТекущийРезультат.АдресИсполняемыхЗапросовСКД);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СкорректироватьВыделениеВТабличномДокументеРезультата()
	
	ТабличныйДокумент = ТабличныйДокументРезультат;
	Лево = ТабличныйДокумент.ТекущаяОбласть.Лево;
	Если Лево > ТабличныйДокумент.ШиринаТаблицы Тогда
		Лево = ТабличныйДокумент.ШиринаТаблицы;
	КонецЕсли;
	
	Верх = ТабличныйДокумент.ТекущаяОбласть.Верх;
	Если Верх > ТабличныйДокумент.ВысотаТаблицы Тогда
		Верх = ТабличныйДокумент.ВысотаТаблицы;
	КонецЕсли;
	
	Право = ТабличныйДокумент.ТекущаяОбласть.Право;
	Если Право > ТабличныйДокумент.ШиринаТаблицы Тогда
		Право = ТабличныйДокумент.ШиринаТаблицы;
	КонецЕсли;
	
	Низ = ТабличныйДокумент.ТекущаяОбласть.Низ;
	Если Низ > ТабличныйДокумент.ВысотаТаблицы Тогда
		Низ = ТабличныйДокумент.ВысотаТаблицы;
	КонецЕсли;
	
	Элементы.ТабличныйДокументРезультат.ТекущаяОбласть = ТабличныйДокумент.Область(Верх, Лево, Низ, Право);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеПередВыполнением(Знач Данные, ФоновоеВыполнение) Экспорт // Знач нужен т.к. при фоновом выполнении происходит изменение данных
	
	Если Не ФоновоеВыполнение Тогда
		Возврат Данные;
	КонецЕсли;
	
	Если Данные.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		Для Каждого Параметр Из Данные.Параметры Цикл
			
			ЗначениеПараметра = Данные.ЗначенияПараметров.Получить(Параметр.Ключ);
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
				
				Если ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
					ЗначениеПараметра.Значение = ПолучитьИзВременногоХранилища(ЗначениеПараметра.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Данные.Свойство("ВнешниеИсточники") Тогда
		
		Для Каждого ВременнаяТаблица Из Данные.ВнешниеИсточники Цикл 
			
			ОписаниеВнешнегоИсточника = ВременнаяТаблица.Значение;
			
			Если ОписаниеВнешнегоИсточника.Тип = НСтр("ru = 'Значение'; en = 'Value'") Тогда
				
				Если ЗначениеЗаполнено(ОписаниеВнешнегоИсточника.Значение) Тогда
					ОписаниеВнешнегоИсточника.Значение = ПолучитьИзВременногоХранилища(ОписаниеВнешнегоИсточника.Значение);
				Иначе
					ОписаниеВнешнегоИсточника.Значение = Неопределено;
				КонецЕсли;
				
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура ЭкспортФайлаЗакончен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ВыводРезультатаВТабличныйДокументНаСервер(ТабличныйДокумент);
	УКО_ТабличныйДокументКлиент_ПодготовитьДляЭкспорта(ТабличныйДокумент, Результат.Формат, ПоследняяАктивнаяОбласть);
	
	Если Результат.ОткрытьПослеСохранения Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗапускПриложения", ЭтотОбъект, Новый Структура("Команда", Результат.ПолноеИмяФайла));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("УКО_ОбщегоНазначенияКлиент_ПустойОбработчикОповещенийСтандартный", ЭтаФорма);
	КонецЕсли;
	
	ТабличныйДокумент.НачатьЗапись(ОписаниеОповещения, Результат.ПолноеИмяФайла, ТипФайлаТабличногоДокумента[Результат.Формат]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗапускПриложения(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УКО_ОбщегоНазначенияКлиент_ПустойОбработчикОповещенийСтандартный", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, ДополнительныеПараметры.Команда);

КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВоВнешнийОтчетФайлаЗакончен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ДвоичныеДанныеВнешнегоОтчета(ТекущиеДанные.Текст, Результат.Имя, Результат.Синоним);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УКО_ОбщегоНазначенияКлиент_ПустойОбработчикОповещенийДополнительныеПараметры", ЭтаФорма);
	ДвоичныеДанные.НачатьЗапись(ОписаниеОповещения, Результат.ПолноеИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ДвоичныеДанныеВнешнегоОтчета(XMLСхема, Имя, Синоним)
	
	Возврат ОбъектОбработки().УКО_Конфигуратор_ГенерироватьВнешнийОтчет(XMLСхема, Имя, Синоним);
	
КонецФункции

&НаСервере
Процедура ВыводРезультатаВТабличныйДокументНаСервер(ТабличныйДокумент)
	
	ТабличныйДокумент.Вывести(ТабличныйДокументРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыводВременныхТаблиц()

	ВыводВременныхТаблиц.Очистить();
	
	Для Каждого ДанныеВременнойТаблицы Из УКО_ДанныеКлиент_ВременныеТаблицы(ТекущиеДанные) Цикл 
		
		ИмяВременнойТаблицы = ДанныеВременнойТаблицы.Ключ;
		ОписаниеВременнойТаблицы = ДанныеВременнойТаблицы.Значение;
		ОписаниеВыводаВременнойТаблицы = УКО_ДанныеКлиентСервер_ПолучитьОписаниеВыводаВременнойТаблицы(ТекущиеДанные, ИмяВременнойТаблицы);
		
		НоваяСтрока = ВыводВременныхТаблиц.Добавить();
		НоваяСтрока.Имя = ИмяВременнойТаблицы;
		НоваяСтрока.Вывод = ОписаниеВыводаВременнойТаблицы.Вывод;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыводВременныхТаблиц(Вывод)
	
	Для Каждого ИдентификаторВыделеннойСтроки Из Элементы.ВыводВременныхТаблиц.ВыделенныеСтроки Цикл 
		
		ВыделеннаяСтрока = ВыводВременныхТаблиц.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		УстановитьДляСтрокиВыводВременныхТаблиц(ВыделеннаяСтрока, Вывод);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляСтрокиВыводВременныхТаблиц(Строка, Вывод)
	
	Строка.Вывод = Вывод;
	
	ОписаниеВыводаВременнойТаблицы = УКО_ДанныеКлиентСервер_ПолучитьОписаниеВыводаВременнойТаблицы(ТекущиеДанные, Строка.Имя);
	ОписаниеВыводаВременнойТаблицы.Вывод = Вывод;
	
	УКО_ДанныеКлиент_УстановитьОписаниеВыводаВременнойТаблицы(ЭтаФорма, ТекущиеДанные, Строка.Имя, ОписаниеВыводаВременнойТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНовыеДанные(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытьФайл(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытьДиалогВыбораНастройки(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаНастройкиЗавершена", ЭтотОбъект);
	УКО_ФормыКлиент_ОткрытьДиалогВыбораНастроекДанных("Перечисление.УКО_РежимДиалогаУправлениеДаннымиВНастройках.Загрузка", ЭтаФорма, РабочиеДанные, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытиеРазрешеноЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗакрытиеРазрешено = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытьПоследнийФайл(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Индекс = ДополнительныеПараметры;
	ИмяФайла = ПоследниеРабочиеДанные.Файлы[Индекс];
	ЗагрузитьДанныеИзФайла(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытьПоследнююНастройку(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Индекс = ДополнительныеПараметры;
	ИмяДанных = ПоследниеРабочиеДанные.Настройки[Индекс];
	ЗагрузитьДанныеИзНастроек(ИмяДанных);
	
КонецПроцедуры 

#КонецОбласти


&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаСервере
// Читает данные файла MCR из временного хранилища и помещает в иерархический массив структур
//
// Параметры:
//   ЧитаемыеДанные - Строка - Адрес временного хранилища содержащего данные 
//   				- ДвоичныеДанные - Двоичные данные 
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Массив	- Массив (иерархический) содержит структуры
//
Функция УКО_MCRФорматВызовСервера_Прочитать(ЧитаемыеДанные, УникальныйИдентификатор) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ЧитаемыеДанные) Тогда
		ФайлZipДвоичныеДанные = ПолучитьИзВременногоХранилища(ЧитаемыеДанные);
	Иначе
		ФайлZipДвоичныеДанные = ЧитаемыеДанные;
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ФайлZipДвоичныеДанные.ОткрытьПотокДляЧтения());
	КаталогДляРаспаковки = ПолучитьИмяВременногоФайла();
	
	ЭлементZip = ЧтениеZipФайла.Элементы[0]; //берем первый файл (всегда один)
	ЧтениеZipФайла.Извлечь(ЭлементZip, КаталогДляРаспаковки);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогДляРаспаковки + ПолучитьРазделительПути() + ЭлементZip.Имя);
	
	НовоеДеревоДанных = ОбъектОбработки().УКО_XML_ПрочитатьВДерево(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	// Удалим временные файлы
	УдалитьФайлы(КаталогДляРаспаковки);
	
	КорневойЭлемент = НовоеДеревоДанных.Строки[0];
	ВерсияДанныхФайла = КорневойЭлемент.Значение.Version;
	
	Если ВерсияДанныхФайла > УКО_ОбщегоНазначенияКлиентСервер_MCRПоддерживаемаяВерсия() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неподдерживаемая версия данных %1, требуется обновление.'; en = 'Unsupported version of data %1, update required.'"), ВерсияДанныхФайла);
	КонецЕсли;
	
	Данные = ОбъектОбработки().УКО_MCRФормат_ПрочитатьДанные(КорневойЭлемент);
	ОбъектОбработки().УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки(Данные, УникальныйИдентификатор);
	
	Возврат Данные;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это один из типов который может содержать сохраняемые подчиненные строки
//
// Параметры:
//   Тип - Перечисление.УКО_ЭлементыДанных - Тип
//
// Возвращаемое значение:
//   Булево - Истина, если это один из типов
//
Функция УКО_ДанныеКлиентСервер_ЭтоТипСтрокиСодержащийСохраняемыеСтроки(Тип) Экспорт
	
	Возврат	Тип = "Перечисление.УКО_ЭлементыДанных.Группа"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД";
				
КонецФункции
&НаКлиенте
// Обработчик завершения длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   ДлительнаяОперация - ДанныеДлительнойОперации - Данные операции
//   Результат - Структура - Результат выполнения
//
Процедура УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(Форма, ДлительнаяОперация, Результат) Экспорт
	
	Результат = Результат.Результат;
	
	// Оповещения (если окно неактивно)
	Если АктивноеОкно() <> Форма.Окно Тогда
		
		Если ДлительнаяОперация.ЗвуковойСигналПоОкончании Тогда
			#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент Тогда
				Сигнал();
			#КонецЕсли
		КонецЕсли;
		
		Если ДлительнаяОперация.УведомлениеОЗавершении Тогда
			Пояснение = СтрШаблон(НСтр("ru = 'Завершена длительная операция:
			|%1'; en = 'Completed a long-running operation:
			|%1'"), ДлительнаяОперация.Наименование);
			
			ПоказатьОповещениеПользователя(УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(), Форма.Окно.ПолучитьНавигационнуюСсылку(), Пояснение, Элементы.БиблиотекаКартинокУКО_Логотип32.Картинка, , Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ДлительнаяОперация.ИмяОбработчика, Форма, ДлительнаяОперация.ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Чтение целого число из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Число(Результат);
	
КонецФункции
&НаСервере
// Находит на сервере файл логов технологического журнала
//
// Параметры:
//   IDПроцесса - Число - ID процесса на сервере
//   КаталогЛогов - Строка - Каталог логов технологического журнала
//   ДатаСобытия - Дата - Дата, время события
//
// Возвращаемое значение:
//   Строка	- Полное имя файла, Неопределено - файл не найден
//
Функция УКО_АнализПланаЗапросаВызовСервера_ПолноеИмяLogФайлаТехнологическогоЖурнала(IDПроцесса, КаталогЛогов, ДатаСобытия) Экспорт
	
	КаталогЛоговЖурнала = Неопределено;
	
	НайденныеФайлы = НайтиФайлы(КаталогЛогов, "*.*");
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл 
		
		Если НайденныйФайл.ЭтоКаталог()
				И СтрНайти(НайденныйФайл.Имя, УКО_СтрокиКлиентСервер_ЧислоВСтроку(IDПроцесса)) Тогда
			КаталогЛоговЖурнала = НайденныйФайл.ПолноеИмя;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КаталогЛоговЖурнала) Тогда
		Возврат КаталогЛоговЖурнала + ПолучитьРазделительПутиСервера() + УКО_АнализПланаЗапросаВызовСервера_ИмяФайлаТехнологическогоЖурнала(КаталогЛоговЖурнала, ДатаСобытия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает значение свойства структуры
// Параметры:
//   Структура - Структура - Структура
//   Имя - Строка - Имя свойства
//   ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию, когда в данной структуре нет этого свойства
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры
Функция УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Структура = Неопределено, Имя = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	
	Если (ТипЗнч(Структура) = Тип("Структура")
				ИЛИ ТипЗнч(Структура) = Тип("ДанныеФормыСтруктура"))
			И Структура.Свойство(Имя) Тогда
		
		Значение = Структура[Имя];
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя расширения
//
// Возвращаемое значение:
//   Строка	- полное имя расширения
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения() Экспорт
	
	Возврат СтрШаблон("%1 %2", УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения());
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение строки до символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Символ - Строка - Стоп символ
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка до стоп символа
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(Строка, Символ, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = Неопределено Тогда
		Индекс = СтрНайти(Строка, Символ, , НачальныйИндекс);
	Иначе
		Индекс = СтрНайти(Строка, Символ, Направление, НачальныйИндекс);
	КонецЕсли;
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Открывает форму редактирования Границы
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - Граница - Значение
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеГраницы(Заголовок, Значение, ФормаВладелец, ОписаниеОповещенияЗавершение) Экспорт
	
	ПараметрыФормы = Новый Структура("Заголовок, Значение", Заголовок, Значение);
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеГраницы", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Сравнивает указанную версию с текущей и возвращает результат в виде числа
// 0 - Версии равна, -1 - текущая версия ниже, 1 - текущая версия выше
//
// Параметры:
//   ВерсияСравнения - Строка - версия которая сверяется с текущей (строка вида: 8.3.10.1089) 
//
// Возвращаемое значение:
//   Число - 0, Версии равна; -1, текущая версия ниже; 1, текущая версия выше.)
//
Функция УКО_ОбщегоНазначенияКлиентСервер_СравнениеВерсииПлатформыСТекущей(ВерсияСравнения) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущаяВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	МассивТекущаяВерсия = СтрРазделить(ТекущаяВерсияПлатформы, ".");
	МассивВерсияСравнения = СтрРазделить(ВерсияСравнения, ".");

	Результат = 0;
	Для Счетчик = 0 По МассивВерсияСравнения.ВГраница() Цикл
		
		Если Число(МассивТекущаяВерсия[Счетчик]) > Число(МассивВерсияСравнения[Счетчик]) Тогда
			Результат = 1; 
			Прервать;
		ИначеЕсли Число(МассивТекущаяВерсия[Счетчик]) < Число(МассивВерсияСравнения[Счетчик]) Тогда
			Результат = -1;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает начальный интервал ожидания
//
// Возвращаемое значение:
//   Число	- Начальный интервал ожидания
//
Функция УКО_ДлительныеОперацииКлиентСервер_НачальныйИнтервалОжидания() Экспорт
	
	Возврат 0.4;
	
КонецФункции
&НаКлиенте
// Открывает диалог вопрос с возможностью ставить "Больше не показывать"
//
// Параметры:
//	ОписаниеОповещенияОЗавершении - ОписаниеОповещения - Описание оповещения при завершении
//	Текст - Строка - Текст вопроса
//	Кнопки - СписокЗначений - Кнопки вопроса
//	КнопкаПоУмолчанию - Произвольный - Значение кнопки по умолчанию
//	Заголовок - Строка - Заголовок окна вопроса
//	ФормаВладелец - Форма - Форма владелец
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//		* ИмяНастройкиБольшеНеПоказывать - Строка - Имя настройки для "Больше не показывать"
//		* БольшеНеПоказывать - Булево - Больше не показывать данный вопрос
//
Процедура УКО_ФормыКлиент_ЗадатьВопрос(ОписаниеОповещенияОЗавершении, Текст, Кнопки, КнопкаПоУмолчанию, Заголовок, ФормаВладелец, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяНастройкиБольшеНеПоказывать = Неопределено;
	БольшеНеПоказывать = Ложь;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ИмяНастройкиБольшеНеПоказывать = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ИмяНастройкиБольшеНеПоказывать");
		БольшеНеПоказывать = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "БольшеНеПоказывать", Ложь);
	КонецЕсли;
	
	Если БольшеНеПоказывать Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КнопкаПоУмолчанию);
		
	Иначе 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Текст", Текст);
		ПараметрыФормы.Вставить("Заголовок", Заголовок);
		ПараметрыФормы.Вставить("Кнопки", Кнопки);
		ПараметрыФормы.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
		Если ЗначениеЗаполнено(ИмяНастройкиБольшеНеПоказывать) Тогда
			ПараметрыФормы.Вставить("ИмяНастройкиБольшеНеПоказывать", ИмяНастройкиБольшеНеПоказывать);
		КонецЕсли;
		
		УКО_ФормыКлиент_ОткрытьДополнительную("Вопрос", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст ошибки когда СКД пустая
//
// Возвращаемое значение:
//   Строка	- текст ошибки когда СКД пустая
//
Функция УКО_СКДКлиентСервер_ТекстОшибкиПустаяСхема() Экспорт

	ТекстОшибки = НСтр("ru = 'Ошибка разбора XML:  - [1,1]
	|Фатальная ошибка: 
	|Extra content at the end of the document'; en = 'XML parsing error: - [1,1]
	|Fatal error: 
	|Extra content at the end of the document'");
	
	Возврат ТекстОшибки;

КонецФункции 
&НаКлиентеНаСервереБезКонтекста
// Возвращает описание границы
//
// Параметры:
//   Значение - Граница, Дата, МоментВремени - Значение
//   Вид - Перечисление.УКО_ВидГраницы - Вид границы (по умолчанию: Включая)
//
// Возвращаемое значение:
//   Структура	- Описание границы
//
Функция УКО_ЗапросКлиентСервер_ОписаниеГраницы(Значение, Вид = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если Вид = Неопределено Тогда
		Вид = "Перечисление.УКО_ВидГраницы.Включая";
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Значение", Вид, Значение);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает email адрес поддержки расширения
// Возвращаемое значение:
//   Строка	- email адрес поддержки расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_emailРасширения() Экспорт
	
	Возврат "evg-lylyk@mail.ru";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Новое значение сложного параметра
//
// Параметры:
//   Вид - Перечисление.УКО_СложныйПараметрЗапроса - Вид
//   Значение - Произвольный - Значение
//   Представление - Строка - Представление
//
// Возвращаемое значение:
//   Структура - Данные сложного параметра
//
Функция УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра(Вид, Значение, Представление = "") Экспорт
	
	Если Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
		
		Представление = УКО_СтрокиКлиентСервер_Сокращенно(Значение, 70);
		
	ИначеЕсли Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		
		Представление = НСтр("ru = '<Таблица значений>'; en = '<Table of values>'");
		
	ИначеЕсли Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
		
		Если Значение.Вид = "Перечисление.УКО_ВидГраницы.Включая" Тогда
			ВидПредставление = НСтр("ru = 'Включая'; en = 'Including'");
		ИначеЕсли Значение.Вид = "Перечисление.УКО_ВидГраницы.Исключая" Тогда
			ВидПредставление = НСтр("ru = 'Исключая'; en = 'Excluding'");
		КонецЕсли;
		
		Представление = СтрШаблон("%1; %2", ВидПредставление, Значение.Значение);
		
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Значение, Представление", Вид, Значение, Представление);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение незначащих символов (пробел, табуляция, перенос строки)
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанные незначимые символы
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборНезначащихСимволов(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Читает данные файла DCR из временного хранилища и помещает в иерархический массив структур
//  формат представляет из себя текстовый файл со строкой ЗначениеВнутр в котором хранится ДеревоЗначений
//	Колонки: Данные, Имя, ТипСтроки. Все хранится к корневом элементе Отчеты
//
// Параметры:
//   АдресХранилища - Строка - Адрес временного хранилища содержащего данные 
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Массив	- Массив (иерархический) содержит структуры
//
Функция УКО_ЧтениеDCRВызовСервера_ПрочитатьИзВременногоХранилища(АдресХранилища, УникальныйИдентификатор) Экспорт
	
	ФайлДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЧтениеТекста = Новый ЧтениеТекста(ФайлДвоичныеДанные.ОткрытьПотокДляЧтения());
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	НовоеДеревоДанных = ЗначениеИзСтрокиВнутр(Текст);
	
	КорневойЭлементОтчеты = НовоеДеревоДанных.Строки[0];
	Данные = ОбъектОбработки().УКО_ЧтениеDCR_ПрочитатьДанные(КорневойЭлементОтчеты);
	ОбъектОбработки().УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки (Данные, УникальныйИдентификатор);
	
	Возврат Данные;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Форматирует текст укорачивая до заданной длины
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   Многострочная - Булево - Многострочное использование
//
// Возвращаемое значение:
//   Строка - Отформатированный текст
//
Функция УКО_СтрокиКлиентСервер_Сокращенно(Текст, Количество, Многострочная = Ложь) Экспорт
	
	ТекстМногострочный = УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Текст);
	
	Если ТекстМногострочный
		И НЕ Многострочная Тогда
		
		ПерваяСтрока = СтрПолучитьСтроку(Текст, 1);
		Результат = УКО_СтрокиКлиентСервер_Сократить(ПерваяСтрока, Количество, Истина);
		
	Иначе
		
		Результат = УКО_СтрокиКлиентСервер_Сократить(Текст, Количество);
		
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Выделить ячейки табличного документа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	ВыделеннаяОбласть - Структура - Выделенная область
//
Процедура УКО_ТабличныйДокументКлиентСервер_ВыделитьЯчейки(ТабличныйДокумент, ВыделеннаяОбласть) Экспорт
	
	ПерваяСтрока 		= ВыделеннаяОбласть.Верх;
	ПерваяКолонка 		= ВыделеннаяОбласть.Лево;
	ПоследняяСтрока 	= ВыделеннаяОбласть.Низ;
	ПоследняяКолонка 	= ВыделеннаяОбласть.Право;
	
	ЭталоннаяОбласть = ТабличныйДокумент.Область(ПерваяСтрока, ПерваяКолонка, ПерваяСтрока, ПерваяКолонка);
	ШрифтЭталоннойОбласти = ЭталоннаяОбласть.Шрифт;
	Если ШрифтЭталоннойОбласти = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ФлагЖирности = Не ШрифтЭталоннойОбласти.Жирный;
	Если ФлагЖирности = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для НомерСтроки = ПерваяСтрока По ПоследняяСтрока Цикл
		Для НомерКолонки = ПерваяКолонка По ПоследняяКолонка Цикл 
			ТекущаяОбластьРезультата = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ТекущийШрифт = ТекущаяОбластьРезультата.Шрифт;
			Если ТекущийШрифт <> Неопределено Тогда 
				ТекущаяОбластьРезультата.Шрифт = Новый Шрифт(ТекущийШрифт,,, ФлагЖирности);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов, ИсключатьNull = Истина) Экспорт
	
	Результат = ОписаниеТипов.Типы().Количество();
	Если ИсключатьNull Тогда
		
		Если ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
			Результат = Результат - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет строка многострочная?
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, если строка многострочная
//
Функция УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Строка) Экспорт
	
	Возврат Булево(СтрНайти(Строка, Символы.ПС));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Сокращает текст до N символов
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   ВсегдаДобавлятьЗавершение - Булево - Всегда добавлять завершающий символы ...
//
// Возвращаемое значение:
//   Строка - Сокращенная строка
//
Функция УКО_СтрокиКлиентСервер_Сократить(Текст, Количество, ВсегдаДобавлятьЗавершение = Ложь) Экспорт
	
	Завершение = "...";
	НормальнаяДлина = Количество - СтрДлина(Завершение);
	
	Длина = СтрДлина(Текст);
	Если Длина > НормальнаяДлина Тогда
		
		Результат = Лев(Текст, НормальнаяДлина) + Завершение;
		
	Иначе
		
		Результат = Текст;
		Если ВсегдаДобавлятьЗавершение Тогда
			Результат = Результат + Завершение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст "Параметр" на нужном языке
//
// Возвращаемое значение:
//   Строка - текст "Параметр" на нужном языке
//
Функция УКО_СтрокиКлиентСервер_ТекстПараметр() Экспорт
	
	Возврат НСтр("ru = 'Параметр'; en = 'Parameter'");
	
КонецФункции
&НаСервере
// Получает момент времени
//
// Параметры:
//   Адрес - Строка - Адрес таблицы значений во временном хранилище
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор к которому привязывается временное хранилище
//
// Возвращаемое значение:
//   Строка, Неопределено - Адрес таблицы значений во временном хранилище, Неопределено - в случае ошибки
//
Функция УКО_ОбщегоНазначенияВызовСервера_КопияТаблицыЗначений(Адрес, УникальныйИдентификатор) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		
		ТаблицаЗначений = ПолучитьИзВременногоХранилища(Адрес);
		Результат = ОбъектОбработки().УКО_ВременноеХранилище_Поместить(ТаблицаЗначений.Скопировать(), , УникальныйИдентификатор);
		
	Иначе 
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает описание внешнего источника
//
// Параметры:
//   Имя - Строка - Имя
//   Тип - Перечисление.УКО_ТипыЗначенийВнешнегоИсточника - Тип значения внешнего источника
//   Значение - Строка - Значение
//
// Возвращаемое значение:
//   Структура	- Описание внешнего источника
//
Функция УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(Имя = Неопределено, Тип = Неопределено, Значение = Неопределено) Экспорт
	
	Возврат Новый Структура("Имя, Тип, Значение", Имя, Тип, Значение);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает подсказку к описанию типа
//
// Параметры:
//   Код - Строка - Код
//   ПрерыватьПриОшибке - Булево - Прерывать при ошибке
//   Транзакция - Перечисление.УКО_ТипТранзакцииОбработкиРезультата - Транзакция
//
// Возвращаемое значение:
//   Структура	- Описание алгоритма
//
Функция УКО_MCRФорматКлиентСервер_ОписаниеАлгоритмаОбработки(Код = "", Знач ПрерыватьПриОшибке = Неопределено, Знач Транзакция = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Код", Код);
	
	Если ПрерыватьПриОшибке = Неопределено Тогда
		ПрерыватьПриОшибке = Ложь;
	КонецЕсли;
	Результат.Вставить("ПрерыватьПриОшибке", ПрерыватьПриОшибке);
	
	Если Транзакция = Неопределено Тогда
		Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.ПоСтроке";
	КонецЕсли;
	Результат.Вставить("Транзакция", Транзакция);
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает описание вывода временной таблицы
//
// Параметры:
//   Вывод - Перечисление.УКО_ВыводВременнойТаблицы - Вывод временной таблицы
//
// Возвращаемое значение:
//   Структура	- Описание вывода временной таблицы
//
Функция УКО_ДанныеКлиентСервер_ОписаниеВыводаВременнойТаблицы(Вывод = Неопределено) Экспорт
	
	Если Вывод = Неопределено Тогда
		Вывод = НСтр("ru = 'Выводить'; en = 'Output'");
	КонецЕсли;
	
	Возврат Новый Структура("Вывод", Вывод);
	
КонецФункции
&НаСервере
// Проверяет текст схемы компоновки данных
//
// Параметры:
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//	ИдентификаторРасшифровки - Число - Идентификатор расшифровки
//
// Возвращаемое значение:
//	Произвольный - Значение расшифровки области
//
Функция УКО_СКДВызовСервера_РасшифровкаОбласти(АдресДанныхРасшифровки, ИдентификаторРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	Возврат ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки].ПолучитьПоля()[0].Значение;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет, является ли значение, значение параметра типа граница (сложный параметр)
//
// Параметры:
//   Значение - Структура - Значение параметра (сложный параметр)
//
// Возвращаемое значение:
//   Булево - Истина, если значение - граница
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоЗначениеПараметраГраница(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип("Структура") 
				И Значение.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница";
	
КонецФункции
&НаСервере
// Формирует файл формата MCR и помещает во временное хранилище 
//
// Параметры:
//  Данные  - Массив - Дерево данных в виде массива структур
//
// Возвращаемое значение:
//   Строка	- Адрес двоичных данных файла во временном хранилище
//
Функция УКО_MCRФорматВызовСервера_ПоместитьДанныеВоВременноеХранилище(Данные) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ОбъектОбработки().УКО_MCRФормат_ДвоичныеДанныеMCR(Данные));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает тип поля по имени
//
// Параметры:
//   Имя - Строка - Имя поля
//
// Возвращаемое значение:
//   Тип - Тип поля
//
Функция УКО_MCRФорматКлиентСервер_ТипЗначенияПоля(Имя) Экспорт
	
	Если Имя = "Name" Тогда
		Результат = Тип("Строка");
	ИначеЕсли Имя = "Text" Тогда
		Результат = Тип("Строка");
	ИначеЕсли Имя = "Dedicated" Тогда
		Результат = Тип("Булево");
	ИначеЕсли Имя = "UsingExternalFunctions" Тогда
		Результат = Тип("Булево");
	ИначеЕсли Имя = "Deploy" Тогда
		Результат = Тип("Булево");
	ИначеЕсли Имя = "MaxCount" Тогда
		Результат = Тип("Число");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_РазборПропуститьСимвол(Строка, Символ, НачальныйИндекс, СмещатьИндекс = Истина)
	
	Результат = "";
	
	Если Сред(Строка, НачальныйИндекс, 1) = Символ Тогда
		
		Результат = Символ;
		
		Если СмещатьИндекс Тогда
			НачальныйИндекс = НачальныйИндекс + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает наименование выполняемой операции по режиму
//
// Параметры:
//  Режим  - Перечисление.УКО_РежимВыполненияЗапроса, Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных - Режим
//
// Возвращаемое значение:
//   Строка - Наименование выполняемой операции
//
Функция УКО_ОбщегоНазначенияКлиентСервер_НаименованиеВыполняемойОперации(Режим) Экспорт 
	
	Результат = Неопределено;
	
	Если Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Замер" Тогда
		
		Результат = НСтр("ru = 'Замер времени выполнения запроса'; en = 'Measurement of request execution time'");
		
	ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Замер" Тогда
		
		Результат = НСтр("ru = 'Замер времени выполнения схемы компоновки данных'; en = 'Measurement of execution time of data composition scheme'");
		
	ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Выполнение" Тогда
		
		Результат = НСтр("ru='Выполнение схемы компоновки данных';en='Execution of the data composition scheme'");
		
	ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.ПолучениеИсполняемыхЗапросов" Тогда
		
		Результат = НСтр("ru='Получение исполняемых запросов СКД';en='Receiving executable queries DCS'");
		
	ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение" Тогда
		
		Результат = НСтр("ru = 'Выполнение запроса'; en = 'Query execution'");
		
	ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц" Тогда
		
		Результат = НСтр("ru = 'Выполнение запроса (с временными таблицами)'; en = 'Query execution (with temporary tables)'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный символ
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = Сред(Строка, НачальныйИндекс, 1);
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = НачальныйИндекс + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет содержит ли описание типов тип ТаблицаЗначений
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
// Возвращаемое значение:
//   Булево - Истина, если тип содержит тип ТаблицаЗначений
Функция УКО_ОбщегоНазначенияКлиентСервер_СодержитТипТаблицаЗначений(ОписаниеТипов) Экспорт 
	
	Возврат ОписаниеТипов.СодержитТип(Тип("ТаблицаЗначений"))
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает информацию о ошибке в тексте запрос
//
// Параметры:
//   ТекстОшибки - Строка - Текст ошибки вида //{(1, 1)}: Ожидается ВЫБРАТЬ
//   АнализируетсяПланЗапроса - Булево - Анализируется план запроса (присутствуют маркировочные запросы)
//
// Возвращаемое значение:
//   Структура - Информация о ошибке
//   	*Текст - Строка - Текст ошибки
//   	*НомерСтроки - Число - Номер строки
//   	*НомерСтолбца - Число - Номер столбцы
Функция УКО_ЗапросКлиентСервер_ИнформацияООшибке(ТекстОшибки, АнализируетсяПланЗапроса = Ложь) Экспорт
	
	// Разбирает строку ошибки запроса
	// Например: {(19, 2)}: Синтаксическая ошибка "Справочник.Товары"
	// <<?>>Справочник.Товары КАК Товары	
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 1;
	Если УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(ТекстОшибки, Индекс) = "{" Тогда
		
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, "(", Индекс);
		НомерСтроки = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, ", ", Индекс);
		НомерСтолбца = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, ")}: ", Индекс);
		Текст = УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ТекстОшибки, "", Индекс);
		
		Если АнализируетсяПланЗапроса Тогда
			НомерСтроки = НомерСтроки - 1;
		КонецЕсли;
		
	Иначе 
		
		Текст = ТекстОшибки;
		НомерСтроки = 1; НомерСтолбца = 1;
		
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("Текст", Текст);
	Ошибка.Вставить("НомерСтроки", НомерСтроки);
	Ошибка.Вставить("НомерСтолбца", НомерСтолбца);
	
	Возврат Ошибка;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение набора символов
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НаборСимволов - Строка - Набор символов
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка
//
Функция УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Строка, НаборСимволов, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = "";
	
	Для Индекс = 1 По СтрДлина(НаборСимволов) Цикл 
		Результат = Результат + УКО_СтрокиКлиентСервер_РазборПропуститьСимвол (Строка, Сред(НаборСимволов, Индекс, 1), НачальныйИндекс, СмещатьИндекс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте

Функция УКО_ПроверкаОбновленийКлиент_РедакцияВерсии(Версия)
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		
		Результат = Неопределено;
		
	Иначе
		
		ВерсияДетально = СтрРазделить(Версия, ".");
		Результат = ВерсияДетально[1];
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает WebСайт расширения
// Возвращаемое значение:
//   Строка	- Веб-сайт расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_WebСайтРасширения() Экспорт
	
	Возврат "https://infostart.ru/public/835718/";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает информацию о ошибке строки данных
//
// Параметры:
//   ТекстОшибки - Строка - Текст ошибки вида 
//							Ошибка разбора XML:  - [2,4] Фатальная ошибка: Extra content at the end of the document
// Возвращаемое значение:
//   Структура - Информация о ошибке
//   	*Текст - Строка - Текст ошибки
//   	*НомерСтроки - Число - Номер строки
//   	*НомерСтолбца - Число - Номер столбцы
//
Функция УКО_СКДКлиентСервер_ИнформацияООшибке(ТекстОшибки) Экспорт
	
	// Разбирает строку ошибки СКД
	// Например: "Ошибка разбора XML:  - [1,1]
	// Фатальная ошибка: 
	// Document is empty"

	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 1;
	УКО_СтрокиКлиентСервер_РазборНайтиТекст(ТекстОшибки, " - [", Индекс);
	НомерСтроки = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
	УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, ",", Индекс);
	НомерСтолбца = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
	УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, "]", Индекс);
	УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(ТекстОшибки, Индекс);
	Текст = УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ТекстОшибки, "", Индекс);
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("НомерСтолбца", НомерСтолбца);
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает фрагмент текста запроса, отделяющего один запрос от другого (используется в пакетных запросах).
//
// Возвращаемое значение:
//  Строка - разделитель запросов. ///////////////////////////////////////////////////////////////////////////////
//
Функция УКО_ЗапросКлиентСервер_РазделительПакетов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборНезначащихСимволов()
	
	Возврат Символы.ПС + Символы.ВК + Символы.Таб + " ";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Найти текст, пропустить
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Текст - Строка - Искомый текст
//   НачальныйИндекс - Число - Начальный индекс
//   НомерВхождения - Число - Номер вхождения
//
// Возвращаемое значение:
//   Булево	- Истина, Искомый текст найден
//
Функция УКО_СтрокиКлиентСервер_РазборНайтиТекст(Строка, Текст, НачальныйИндекс = 1, НомерВхождения = 1) Экспорт
	
	Индекс = СтрНайти(Строка, Текст,, НачальныйИндекс, НомерВхождения);
	Если ЗначениеЗаполнено(Индекс) Тогда
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Строка, Текст, Индекс);
		НачальныйИндекс = Индекс;
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
&НаКлиенте
// Открывает форму редактирования типа значения
//
// Параметры:
//	Владелец - Форма/Элемент - Владелец
//	РежимРедактирования - Перечисление.УКО_РежимРедактированияТипаЗначения - Режим редактирования типа значения
//	Значение - Произвольный/ОписаниеТипов - Значение
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	 *Заголовок - Строка - Заголовок
//	 *ЗакрыватьПриВыборе - Булево - Закрывать при выборе
//	 *ИсключаемыеТипы - Строка - Исключаемые типы через запятую
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеТипаЗначения(Владелец, РежимРедактирования, Значение, ОписаниеОповещенияЗавершение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Значение", Значение);
	ПараметрыФормы.Вставить("Режим", РежимРедактирования);
	
	ПараметрыФормы.Вставить("Заголовок", УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "Заголовок", ""));
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ЗакрыватьПриВыборе", Истина));
	ПараметрыФормы.Вставить("ИсключаемыеТипы", УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ИсключаемыеТипы", ""));
	
	ВыборТипа = (РежимРедактирования = "Перечисление.УКО_РежимРедактированияТипаЗначения.ВыборТипа");
	ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("ВыборТипа", ВыборТипа);
	
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеТипаЗначения", ПараметрыФормы, Владелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиенте
// Открыть диалог выбора настроек данных
//
// Параметры:
//	Режим - РежимДиалогаВыбораНастроек - Режим диалога
//	ФормаВладелец - Форма - Форма владелец
//	РабочиеДанные - РабочиеДанные - Текущие рабочие данные обработки
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии
//
Процедура УКО_ФормыКлиент_ОткрытьДиалогВыбораНастроекДанных(Режим, ФормаВладелец, РабочиеДанные, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", Режим);
	
	Если РабочиеДанные.Тип = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда
		ПараметрыФормы.Вставить("РабочиеДанныеИмя", РабочиеДанные.Имя);
	КонецЕсли;
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ДиалогВыбораНастроек", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает последнюю поддерживаемую версию формата MCR
// Возвращаемое значение:
//   Строку - Последняя версия MCR
Функция УКО_ОбщегоНазначенияКлиентСервер_MCRПоддерживаемаяВерсия() Экспорт
	
	Возврат "1.9";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Процедура УКО_ОбщегоНазначенияКлиентСервер_ДобавитьЗначениеВМассив(Массив, Значение, ПроверкаДублирования = Истина)
	
	ДобавитьЗначение = (ПроверкаДублирования = Ложь) 
			ИЛИ Массив.Найти(Значение) = Неопределено;
		
	Если ДобавитьЗначение Тогда
		Массив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Получает значение поля по умолчанию по имени
//
// Параметры:
//   Имя - Строка - Имя поля
//
// Возвращаемое значение:
//   Произвольный - Значение поля по умолчанию
//
Функция УКО_MCRФорматКлиентСервер_ЗначениеПоляПоУмолчанию(Имя) Экспорт
	
	Если Имя = "Deploy" Тогда
		Результат = Истина;
	ИначеЕсли Имя = "UsingExternalFunctions" Тогда
		Результат = Ложь;
	ИначеЕсли Имя = "Dedicated" Тогда
		Результат = Ложь;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает версию расширения
// Возвращаемое значение:
//   Строка	- версию расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения() Экспорт
	
	Возврат "3.8.9";
	
КонецФункции
&НаКлиенте
// Очищает данные, заново инициализирует служебные переменные
//
// Параметры:
//  Форма - Форма - Форма
//
Процедура УКО_ДанныеКлиент_Очистить(Форма) Экспорт
	
	Форма.ВсеДанные = Новый Соответствие;
	Форма.ДеревоДанных.ПолучитьЭлементы().Очистить();
	
	Форма.Модифицированность = Ложь;
	Форма.ТекущиеДанные = Неопределено;
	Форма.ТекущаяСтрока = Неопределено;
	Форма.ИдентификаторПоследнейВыделеннойСтроки = Неопределено;

КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Собирает словарь перевода имен полей для указанного языка
//
// Параметры:
//   Язык - Строка - Код языка (ru, en)
//
// Возвращаемое значение:
//   Соответствие - Словарь перевода
//
Функция УКО_MCRФорматКлиентСервер_СловарьПереводаИменПолей(Язык) Экспорт
	
	Если Язык = "ru" Тогда
		ЯзыкПеревода = "en";
	Иначе
		ЯзыкПеревода = "ru";
	КонецЕсли;
	
	Поля = Новый Массив;
	Поля.Добавить("ru = 'Имя'; en = 'Name'");
	Поля.Добавить("ru = 'Тип'; en = 'Type'");
	Поля.Добавить("ru = 'Выделение'; en = 'Dedicated'");
	Поля.Добавить("ru = 'Текст'; en = 'Text'");
	Поля.Добавить("ru = 'Развернуто'; en = 'Deploy'");
	Поля.Добавить("ru = 'ЗначенияПараметров'; en = 'Parameters'");
	Поля.Добавить("ru = 'МаксимумСтрок'; en = 'MaxCount'");
	Поля.Добавить("ru = 'Строки'; en = 'Elements'");
	Поля.Добавить("ru = 'ВременныеТаблицы'; en = 'TemporaryTables'");
	Поля.Добавить("ru = 'ВнешниеИсточники'; en = 'ExternalSources'");
	Поля.Добавить("ru = 'АлгоритмыОбработки'; en = 'ProcessingAlgorithms'");
	Поля.Добавить("ru = 'ИспользованиеВнешнихФункций'; en = 'UsingExternalFunctions'");
	Поля.Добавить("ru = 'ВыводВременныхТаблиц'; en = 'OutputTemporaryTables'");
	
	Результат = Новый Соответствие;
	
	Для Каждого Поле Из Поля Цикл 
		Результат.Вставить(НСтр(Поле, Язык), НСтр(Поле, ЯзыкПеревода));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Добавляет в массив данные (с возможностью исключения дублей)
//
// Параметры:
//   Массив - Массив - Массив
//   ДобавляемыеЗначения - Массив - Массив добавляемых значений
//   ПроверкаДублирования - Булево - Проверка дублирования
//
Процедура УКО_ОбщегоНазначенияКлиентСервер_ДобавитьВМассив(Массив, ДобавляемыеЗначения, ПроверкаДублирования = Истина) Экспорт
	
	Если ТипЗнч(ДобавляемыеЗначения) = Тип("Массив") Тогда
		
		Для Каждого ДобавляемоеЗначение Из ДобавляемыеЗначения Цикл 
			УКО_ОбщегоНазначенияКлиентСервер_ДобавитьЗначениеВМассив(Массив, ДобавляемоеЗначение, ПроверкаДублирования);
		КонецЦикла;
		
	Иначе
		
		УКО_ОбщегоНазначенияКлиентСервер_ДобавитьЗначениеВМассив(Массив, ДобавляемыеЗначения, ПроверкаДублирования);
		
	КонецЕсли;
	
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Получает описание настроек вывода временной таблицы
//
// Параметры:
//   Данные - Данные - Данные
//   Имя - Строка - Имя временной таблицы
//
// Возвращаемое значение:
//   Структура	- Описание настроек вывода временной таблицы
//
Функция УКО_ДанныеКлиентСервер_ПолучитьОписаниеВыводаВременнойТаблицы(Данные, Имя) Экспорт
	
	ВыводВременныхТаблиц = Данные.ВыводВременныхТаблиц;
	
	Результат = ВыводВременныхТаблиц.Получить(Имя);
	Если Результат = Неопределено Тогда
		Результат = УКО_ДанныеКлиентСервер_ОписаниеВыводаВременнойТаблицы();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Открывает форму редактирования идентификатора
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Режим - Перечисление.УКО_РежимРедактированияИдентификатора - Режим редактирования
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//	НачальноеЗначение - Строка - Начальное значение идентификатора
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеИдентификатора(Заголовок, Режим, ФормаВладелец, ОписаниеОповещенияЗавершение, НачальноеЗначение = "", ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("Режим", Режим);
	ПараметрыФормы.Вставить("НачальноеЗначение", НачальноеЗначение);
	ПараметрыФормы.Вставить("ЗанятыеИдентификаторы", ЗанятыеИдентификаторы);
	
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеИдентификатора", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Добавляет табуляцию в многострочный текст
//
// Параметры:
//   Текст - Строка - Текст
//   ДобавлятьВПервуюСтрока - Булево - Добавлять в первую строку
//   Количество - Число - Количество добавляемых табуляций
//
// Возвращаемое значение:
//   Строка - Текст с добавленной табуляцией
//
Функция УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(Текст, ДобавлятьВПервуюСтрока = Истина, Количество = 1) Экспорт
	
	ВставляемыеСимволы = "";
	Для Счетчик = 1 По Количество Цикл 
		ВставляемыеСимволы = ВставляемыеСимволы + Символы.Таб;
	КонецЦикла;
	
	Результат = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + ВставляемыеСимволы);
	Если ДобавлятьВПервуюСтрока Тогда
		Результат = ВставляемыеСимволы + Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Число в виде строки
//
// Параметры:
//   Число - Число - Преобразуемое число
//
// Возвращаемое значение:
//   Строка - Число в виде строки
//
Функция УКО_СтрокиКлиентСервер_ЧислоВСтроку(Число) Экспорт
	
	Возврат Формат(Число, "ЧН=; ЧГ=");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
&НаКлиенте
// Начать выполнение длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   Наименование - Строка - Имя операции
//   ИмяОбработчика - Строка - Имя обработчика
//   ДлительнаяОперация - ДанныеДлительнойОперации - Данные операции
//   ФоновоеВыполнение - Булево - Выполнять в фоне
//   ДополнительныеПараметры - Структура - Дополнительные параметры
//
Процедура УКО_ДлительныеОперацииКлиент_НачатьВыполнение(Форма, Наименование, ИмяОбработчика, ДлительнаяОперация, ФоновоеВыполнение = Истина, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДлительнаяОперация = Неопределено Тогда
		ДлительнаяОперация = УКО_ДлительныеОперацииКлиент_ИнициализироватьДанные();
	КонецЕсли;
	
	ДлительнаяОперация.Наименование = Наименование;
	ДлительнаяОперация.ИмяОбработчика = ИмяОбработчика;
	ДлительнаяОперация.Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительнаяОперация.ДополнительныеПараметры = ДополнительныеПараметры;
	
	ДлительнаяОперация.УведомлениеОЗавершении = Форма.НастройкиОбработки.УведомлениеОЗавершенииДлительныхОпераций;
	ДлительнаяОперация.ЗвуковойСигналПоОкончании = Форма.НастройкиОбработки.ЗвуковойСигналПоОкончанииДлительныхОпераций;
	
	Если ФоновоеВыполнение Тогда
		
		Форма.Доступность = Ложь;
		ДлительнаяОперация.ИнтервалОжидания = УКО_ДлительныеОперацииКлиентСервер_НачальныйИнтервалОжидания();
		Форма.ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", ДлительнаяОперация.ИнтервалОжидания, Истина);
		
	Иначе
		
		Состояние(ДлительнаяОперация.Наименование,,,Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиенте
// Обработчик выбора в табличном документа
//
// Параметры:
//	Форма - Форма - Форма
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//	Область - ОбластьТабличногоДокумента - Область табличного документа
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура УКО_ТабличныйДокументКлиент_ОбработчикВыбор(Форма, АдресДанныхРасшифровки, Область, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, Область);
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		УКО_ФормыКлиент_ОткрытьТаблицуЗначений(УКО_ОбщегоНазначенияВызовСервера_АдресТаблицыЗначенийПоРасшифровке(АдресДанныхРасшифровки, Расшифровка.Значение), Форма, Ложь);
		
	ИначеЕсли Расшифровка <> Неопределено Тогда
		
		ПоказатьЗначение(, Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
// Получает момент времени из описания границы (значение сложного параметра)
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы (значение сложного параметра)
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция УКО_ЗапросВызовСервера_МоментВремениИзОписанияГраницы(ОписаниеГраницы) Экспорт
	
	Возврат ОбъектОбработки().УКО_Запрос_МоментВремениИзОписанияГраницы(ОписаниеГраницы);
	
КонецФункции
&НаКлиенте

Функция УКО_ПроверкаОбновленийКлиент_HttpЗапросКСерверу(Запрос)
	
	// Тест обновления
	//Путь = "G:\УКО\update";
	//ПолныйПуть = СтрЗаменить(Путь + Запрос, "/", "\");
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.Прочитать(ПолныйПуть);
	//Возврат ТекстовыйДокумент.ПолучитьТекст();
	
	Результат = Неопределено;
	
	Попытка
		
		HTTPСоединение = Новый HTTPСоединение(УКО_ПроверкаОбновленийКлиент_АдресСервера(),,,,,1);
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("User-Agent", "Mozilla/5.0");
		
		HTTPЗапрос = Новый HTTPЗапрос(Запрос, Заголовки);  
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);    
		
		Если Ответ.КодСостояния < 300 Тогда
			Результат = Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;

	Исключение
		
		НеОбрабатываемИсключение = Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код английского языка
// Возвращаемое значение:
//   Строка	- Код английского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Экспорт
	Возврат "en";
КонецФункции
&НаСервере
// Обработка автоподбора значения в форме
//
// Параметры:
//	Текст - Строка - Текст
//	ТипЗначения - ОписаниеТипов, Строка - Тип значения параметра
//	ДанныеВыбора - Неопределено, СписокЗначений - ДанныеВыбора
//
Процедура УКО_ФормыВызовСервера_АвтоПодборЗначения(Текст, ТипЗначения, ДанныеВыбора) Экспорт
	
	Если ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов")
		И ЗначениеЗаполнено(ТипЗначения.Типы()) Тогда
		
		Тип = ТипЗначения.Типы()[0];
		Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип) Тогда
			
			Если УКО_СтрокиКлиентСервер_ЭтоПредставлениеБитаяСсылка(Текст) Тогда
				
				// Получение UID битой ссылки
				Индекс = СтрНайти(Текст, ":");
				Если ЗначениеЗаполнено(Индекс) Тогда
					
					UIDБитойСсылки = УКО_СтрокиКлиентСервер_РазборПрочитатьШестнадцатеричноеЧисло(Текст, Индекс + 1);
					Ссылка = ОбъектОбработки().УКО_ОбщегоНазначения_СсылкаПоВнутреннемуUID(UIDБитойСсылки, Тип);
					
					УКО_ФормыВызовСервера_ВставкаОсобойСсылкиВДанныеВыбора(ДанныеВыбора, Ссылка, Текст);
					
				КонецЕсли;
				
			ИначеЕсли УКО_СтрокиКлиентСервер_ЭтоUID(Текст) Тогда
				
				УникальныйИдентификаторСсылки = Новый УникальныйИдентификатор(Текст);
				Ссылка = ОбъектОбработки().УКО_ОбщегоНазначения_СсылкаПоУникальномуИдентификатору(УникальныйИдентификаторСсылки, Тип);
					
				УКО_ФормыВызовСервера_ВставкаОсобойСсылкиВДанныеВыбора(ДанныеВыбора, Ссылка, СтрШаблон("%1 (%2)", Ссылка, Текст));
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
// Получает код для запроса
//
// Параметры:
//  Адрес  - Строка - Адрес во временном хранилище
//  Имя  - Строка - Имя
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для таблицы значений
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_ТаблицаЗначений(Адрес, Имя) Экспорт

	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		ТаблицаЗначений = ПолучитьИзВременногоХранилища(Адрес);
		УдалитьИзВременногоХранилища(Адрес);
	Иначе
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ДополнениеРезультата = Неопределено;
	КодНаВстроенномЯзыке = ОбъектОбработки().УКО_КодНаВстроенномЯзыке_Значение(ТаблицаЗначений, ДополнениеРезультата);
	Идентификатор = УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения (ОбъектОбработки().УКО_ОбщегоНазначения_КодЯзыкаПрограммирования());
	
	Если ДополнениеРезультата.ТребуетсяИнициализация Тогда
		КодНаВстроенномЯзыке = СтрШаблон(КодНаВстроенномЯзыке + "
		|%2 = %1;", Имя, Идентификатор);
	Иначе
		КодНаВстроенномЯзыке = СтрШаблон("%2 = %1;", КодНаВстроенномЯзыке, Идентификатор);
	КонецЕсли;
			
	Возврат КодНаВстроенномЯзыке;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код русского языка
// Возвращаемое значение:
//   Строка	- Код русского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() Экспорт
	Возврат "ru";
КонецФункции
&НаСервере

Функция УКО_АнализПланаЗапросаВызовСервера_ИмяФайлаТехнологическогоЖурнала(КаталогЛогов, Дата)
	
	ИмяБезРасширения = "";
	ИмяБезРасширенияПоСобытию = Формат(Дата, "ДФ=yyMMddHH");
	
	НайденныеФайлы = НайтиФайлы(КаталогЛогов, "*.log");
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл 
		
		Если НайденныйФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
			
		Если НайденныйФайл.ИмяБезРасширения <= ИмяБезРасширенияПоСобытию Тогда
			ИмяБезРасширения = Макс(ИмяБезРасширения, НайденныйФайл.ИмяБезРасширения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяБезРасширения + ".log";
	
КонецФункции
&НаКлиенте
// Выгрузить колонку коллекции
//
// Параметры:
//	Коллекция - КоллекцияФормы - Коллекция формы
//	Имя - Строка - Имя колонки
//	ИмяИсключение - Строка - Имя исключение
//
// Возвращаемое значение:
//	Массив - Массив значений колонки
//
Функция УКО_ФормыКлиент_ВыгрузитьКолонкуКоллекции(Коллекция, Имя, ИмяИсключение = "") Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Строка Из Коллекция Цикл 
		
		Если ИмяИсключение <> Строка[Имя] Тогда
			Результат.Добавить(Строка[Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Получает момент времени
//
// Параметры:
//   Дата - Дата - Дата
//   Ссылка - Ссылка - Ссылка (необязательный)
//
// Возвращаемое значение:
//   МоментВремени	- Момент времени
//
Функция УКО_ОбщегоНазначенияВызовСервера_НовыйМоментВремени(Дата, Ссылка = Неопределено) Экспорт
	
	Возврат Новый МоментВремени(Дата, Ссылка);
	
КонецФункции
&НаСервере
// Выделить ячейки табличного документа
//
// Параметры:
//	АдресТабличногоДокумента - Строка - Адрес табличного документа во временном хранилище
//	ВыделеннаяОбласть - Структура - Выделенная область
//
Процедура УКО_ТабличныйДокументВызовСервера_ВыделитьЯчейки(АдресТабличногоДокумента, ВыделеннаяОбласть) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресТабличногоДокумента) Тогда
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(АдресТабличногоДокумента);
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	УКО_ТабличныйДокументКлиентСервер_ВыделитьЯчейки(ТабличныйДокумент, ВыделеннаяОбласть);
	
КонецПроцедуры
&НаСервере
// Удаляет данные из временного хранилища
//
// Параметры:
//	Данные - Строка, Массив - Адрес во временном хранилище или массив адресов
//
Процедура УКО_ВременноеХранилищеВызовСервера_Удалить(Данные) Экспорт
	
	ОбъектОбработки().УКО_ВременноеХранилище_Удалить(Данные);
	
КонецПроцедуры
&НаКлиенте
// Получает структуру данных по Текущим данным
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - ДанныеФормыЭлементДерева - Данные строки по которым получается структура
//
// Возвращаемое значение:
//   Структура - Данные строки
//
Функция УКО_ДанныеКлиент_Получить(Форма, Строка) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ВсеДанные.Получить(Строка.UID);
	
КонецФункции
&НаКлиенте
// Удаляет внешний источник
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  UID - УникальныйИдентификатор - UID внешнего источника
//
Процедура УКО_ДанныеКлиент_УдалитьВнешнийИсточник(Форма, Строка, UID) Экспорт
	
	Данные = УКО_ДанныеКлиент_Получить(Форма, Строка);
	Форма.Модифицированность = Истина;

	Данные.ВнешниеИсточники.Удалить(UID);

КонецПроцедуры
&НаКлиенте
// Вставляет структуру данных для строки
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - ДанныеФормыЭлементДерева	- Данные строки по которым получается структура
//  Данные - Структура					- Устанавливаемые данные строки
//
Процедура УКО_ДанныеКлиент_Вставить(Форма, Строка, Данные) Экспорт
	
	Форма.ВсеДанные.Вставить(Строка.UID, Данные);
	
	Если Строка.Тип = "Перечисление.УКО_ЭлементыДанных.Группа" Тогда
		Возврат;
	КонецЕсли;
	
	НачальныеДанные = УКО_ДанныеКлиентСервер_НовыйЭлемент(Строка.Тип);
	НачальныеДанные.Вставить("Тип", Строка.Тип);
	
КонецПроцедуры	
&НаКлиентеНаСервереБезКонтекста
// Получает структуру данных по Текущим данным
//
// Параметры:
//  ТипСтроки - Перечисление.УКО_ЭлементыДанных - Тип строки
//  ДляСохранения - Булево - Для сохранения
//
// Возвращаемое значение:
//   Структура - Данные строки
//
Функция УКО_ДанныеКлиентСервер_НовыйЭлемент(ТипСтроки, ДляСохранения = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	Если ДляСохранения Тогда
		
		Результат.Вставить("Имя", Неопределено);
		Результат.Вставить("Выделение", Ложь);
		Результат.Вставить("Тип", Неопределено);
		Если УКО_ДанныеКлиентСервер_ЭтоТипСтрокиСодержащийСохраняемыеСтроки(ТипСтроки) Тогда
			Результат.Вставить("Развернуто", Истина);
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("Страница", "");
		
	КонецЕсли;
	
	Если ТипСтроки = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		Результат.Вставить("МаксимумСтрок", Неопределено); //Важно. Строка должна быть перед строкой Текст (т.к. при записи XML ошибка неверный порядок)
		Результат.Вставить("Текст", "");
		Результат.Вставить("ЗначенияПараметров", Новый Соответствие);
		Результат.Вставить("ВнешниеИсточники", Новый Соответствие);
		Результат.Вставить("ВыводВременныхТаблиц", Новый Соответствие);
		Результат.Вставить("АлгоритмыОбработки", Новый СписокЗначений);
		
		Если Не ДляСохранения Тогда
			
			Результат.Вставить("ТребуетсяПроверка", Ложь);
			Результат.Вставить("Параметры", Новый Соответствие);
			Результат.Вставить("ВременныеТаблицы", Новый Соответствие);
			Результат.Вставить("Ошибка", УКО_ЗапросКлиентСервер_ИнформацияООшибке(УКО_ЗапросКлиентСервер_ТекстОшибкиПустойЗапрос()));
			Результат.Вставить("ОшибкаПриВыполнении", "");
			Результат.Вставить("ВремяВыполнения", Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		
		Результат.Вставить("Текст", "");
		Результат.Вставить("ВнешниеИсточники", Новый Соответствие);
		Результат.Вставить("ИспользованиеВнешнихФункций", Ложь);
		
		Если Не ДляСохранения Тогда
			Результат.Вставить("ВремяВыполнения", Неопределено);
			Результат.Вставить("ТребуетсяПроверка", Ложь);
			Результат.Вставить("Ошибка", УКО_СКДКлиентСервер_ИнформацияООшибке(УКО_СКДКлиентСервер_ТекстОшибкиПустаяСхема()));
			Результат.Вставить("ОшибкаПриВыполнении", "");
		КонецЕсли;
		
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД" Тогда
		
		Результат.Вставить("Текст", "");
		
		Если Не ДляСохранения Тогда
			Результат.Вставить("ВремяВыполнения", Неопределено);
			Результат.Вставить("Ошибка", Неопределено);
			Результат.Вставить("ОшибкаПриВыполнении", Неопределено);
		КонецЕсли;
		
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД" Тогда
		
		Результат.Вставить("Текст", "");
		
		Если Не ДляСохранения Тогда
			Результат.Вставить("ВремяВыполнения", Неопределено);
			Результат.Вставить("Ошибка", Неопределено);
			Результат.Вставить("ОшибкаПриВыполнении", Неопределено);
		КонецЕсли;
		
	ИначеЕсли ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос" Тогда
		
		Результат.Вставить("ТекстИнициализации", "");
		Результат.Вставить("Текст", "");
		Результат.Вставить("ТребуетсяПроверка", Ложь);
		Результат.Вставить("Параметры", Новый Массив);
		Результат.Вставить("ВремяВыполнения", Неопределено);
		Результат.Вставить("Ошибка", Неопределено);
		Результат.Вставить("ОшибкаПриВыполнении", "");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает цвет текста гиперссылки
//
// Возвращаемое значение:
//   Цвет - Цвет текста
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаГиперссылки() Экспорт
	
	// https://ru.wikipedia.org/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A6%D0%B2%D0%B5%D1%82%D0%B0_%D1%81%D1%81%D1%8B%D0%BB%D0%BE%D0%BA
	// Голубая ссылка
	Возврат Новый Цвет(51,102,187); 
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст ошибки когда запрос пустой
// Возвращаемое значение:
//   Строка	- текст ошибки когда запрос пустой
Функция УКО_ЗапросКлиентСервер_ТекстОшибкиПустойЗапрос() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Ожидается ВЫБРАТЬ'; en = 'Expected to SELECT'");
	Возврат СтрШаблон("{(1, 1)}: %1", ТекстОшибки);
	
КонецФункции
&НаКлиенте
// Удаляет строки данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строки - Массив - Строки 
//
Процедура УКО_ДанныеКлиент_УдалитьСтроки(Форма, Строки) Экспорт
	
	ОчищаемыеАдресаВоВременноХранилище = Новый Массив;
	УКО_ДанныеКлиент_УдалитьСтрокиНаФорме(Форма, Строки, ОчищаемыеАдресаВоВременноХранилище);
	
	Если ЗначениеЗаполнено(ОчищаемыеАдресаВоВременноХранилище) Тогда
		УКО_ВременноеХранилищеВызовСервера_Удалить(ОчищаемыеАдресаВоВременноХранилище);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте

Процедура УКО_ДанныеКлиент_УдалитьСтрокиНаФорме(Форма, Строки, ОчищаемыеАдресаВоВременноХранилище)
	
	Для Каждого УдаляемаяСтрока Из Строки Цикл 
		
		ДанныеСтроки = УКО_ДанныеКлиент_Получить(Форма, УдаляемаяСтрока);
		
		// Собираем вложенные строки и удаляем
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ВложеннаяСтрока Из УдаляемаяСтрока.ПолучитьЭлементы() Цикл 
			УдаляемыеСтроки.Добавить(ВложеннаяСтрока);
		КонецЦикла;
		
		УКО_ДанныеКлиент_УдалитьСтрокиНаФорме(Форма, УдаляемыеСтроки, ОчищаемыеАдресаВоВременноХранилище);
		
		// Сбрасываем выделение строк
		Если Форма.ТекущаяСтрока = УдаляемаяСтрока Тогда 
			
			Форма.ТекущаяСтрока = Неопределено;
			Форма.ТекущиеДанные = Неопределено;
			Форма.Элементы.ДеревоДанных.ТекущаяСтрока = Неопределено; 
			
		КонецЕсли;
		
		// Собираем адреса временных хранилищ и удаляем
		Если УдаляемаяСтрока.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
			
			Для Каждого ПараметрЗапроса Из ДанныеСтроки.Параметры Цикл 
				
				Если ПараметрЗапроса.Значение = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
					ЗначениеПараметра = ДанныеСтроки.ЗначенияПараметров.Получить(ПараметрЗапроса.Ключ);
					Если ЗначениеПараметра <> Неопределено 
						И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
						ОчищаемыеАдресаВоВременноХранилище.Добавить(ЗначениеПараметра.Значение);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если УКО_ДанныеКлиентСервер_ЭтоТипСтрокиСИспользованиемВнешнихИсточников(УдаляемаяСтрока.Тип) Тогда

			Для Каждого ВнешнийИсточник Из УКО_ДанныеКлиент_ВнешниеИсточники(ДанныеСтроки) Цикл 
				
				ОписаниеВнешнегоИсточника = ВнешнийИсточник.Значение;
				
				Если ОписаниеВнешнегоИсточника.Тип = НСтр("ru = 'Значение'; en = 'Value'")
						И ЗначениеЗаполнено(ОписаниеВнешнегоИсточника.Значение) Тогда
					ОчищаемыеАдресаВоВременноХранилище.Добавить(ОписаниеВнешнегоИсточника.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Удаляем строку
		Форма.ВсеДанные.Удалить(УдаляемаяСтрока.UID);
		Родитель = УКО_ДанныеКлиент_ПолучитьРодителяСтроки(Форма, УдаляемаяСтрока);
		Родитель.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
// Возвращает внешние источники
//
// Параметры:
//  Данные - Данные - Данные
//
// Возвращаемое значение:
//   Соответствие - Данные внешних источников
//
Функция УКО_ДанныеКлиент_ВнешниеИсточники(Данные) Экспорт
	
	Возврат Данные.ВнешниеИсточники;
	
КонецФункции
&НаКлиенте
// Возвращает родителя строки (если нет родителя - корень) возвращает ДеревоДанных 
//
// Параметры:
//  Форма - Форма - Форма
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка для которой получаем родителя
//
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева, ДанныеФормыДерева - Родитель строки или ДеревоДанных если корень
//
Функция УКО_ДанныеКлиент_ПолучитьРодителяСтроки(Форма, СтрокаДерева) Экспорт
	
	РодительСтроки = СтрокаДерева.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда //Если родителя нет (корень) добавляем в дерево (корень)
		РодительСтроки = Форма.ДеревоДанных;
	КонецЕсли;
	
	Возврат РодительСтроки;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает шрифт жирный 120%
// Возвращаемое значение:
//   Шрифт - Шрифт
Функция УКО_ОбщегоНазначенияКлиентСервер_ШрифтЖирный120() Экспорт
	Возврат Новый Шрифт(,,Истина,,,,120);
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это один из типов в котором используются внешние источники
//
// Параметры:
//   Тип - Перечисление.УКО_ЭлементыДанных - Тип
//
// Возвращаемое значение:
//   Булево - Истина, если это один из типов
//
Функция УКО_ДанныеКлиентСервер_ЭтоТипСтрокиСИспользованиемВнешнихИсточников(Тип) Экспорт
	
	Возврат	Тип = "Перечисление.УКО_ЭлементыДанных.Запрос"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных";
				
КонецФункции
&НаКлиенте
// Изменяет поле данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  Имя - Строка - Имя поля
//  Значение - Произвольный - Устанавливаемое значение
//  УстанавливатьМодифицированность - Булево - Признак установки модифицированности
//
Процедура УКО_ДанныеКлиент_ИзменитьПоле(Форма, Строка, Имя, Значение, УстанавливатьМодифицированность = Истина) Экспорт
	
	Данные = УКО_ДанныеКлиент_Получить(Форма, Строка);

	Если Данные[Имя] <> Значение Тогда
		
		Данные.Вставить(Имя, Значение);
		
		Если УстанавливатьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если Форма.ТекущаяСтрока.UID = Форма.ТекущийРезультат.АктуаленПоСтроке Тогда
			Форма.ТекущийРезультат.АктуаленПоСтроке = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
// Изменяет поля данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  ИзменяемыеПоля - Структура - Изменяемые поля
//  УстанавливатьМодифицированность - Булево - Признак установки модифицированности
//
Процедура УКО_ДанныеКлиент_ИзменитьПоля(Форма, Строка, ИзменяемыеПоля, УстанавливатьМодифицированность = Истина) Экспорт
	
	Для Каждого ИзменяемоеПоле Из ИзменяемыеПоля Цикл 
		УКО_ДанныеКлиент_ИзменитьПоле(Форма, Строка, ИзменяемоеПоле.Ключ, ИзменяемоеПоле.Значение, УстанавливатьМодифицированность);
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
// Получает значение параметра
//
// Параметры:
//  Данные - Данные - Данные
//  Имя - Строка - Имя
//  ТипЗначения - ОписаниеТипов, Перечисление.УКО_СложныйПараметрЗапроса - Тип значения
//
// Возвращаемое значение:
//   Произвольный - Значение параметра
//
Функция УКО_ДанныеКлиент_ЗначениеПараметраЗапроса(Данные, Имя, ТипЗначения) Экспорт
	
	Результат = Данные.ЗначенияПараметров[Имя];

	Если Результат = Неопределено Тогда
		
		Если ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов") Тогда
			Результат = ТипЗначения.ПривестиЗначение(Результат);
		ИначеЕсли ТипЗначения = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
			Результат = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра(ТипЗначения, "");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Изменяет поля данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  Имя - Строка - Имя параметра
//  Значение - Произвольный - Устанавливаемое значение параметра
//
Процедура УКО_ДанныеКлиент_ВставитьЗначениеПараметраЗапроса(Форма, Строка, Имя, Значение) Экспорт
	
	Данные = УКО_ДанныеКлиент_Получить(Форма, Строка);
	Данные.ЗначенияПараметров.Вставить(Имя, Значение);
	Форма.Модифицированность = Истина;
	
	Если Форма.ТекущаяСтрока.UID = Форма.ТекущийРезультат.АктуаленПоСтроке Тогда
		Форма.ТекущийРезультат.АктуаленПоСтроке = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Возвращает описание внешнего источника
//
// Параметры:
//  Данные - Данные - Данные
//  UID - УникальныйИдентификатор - UID внешнего источника
//
// Возвращаемое значение:
//   Структура - Описание внешнего источника
//
Функция УКО_ДанныеКлиент_ОписаниеВнешнегоИсточника(Данные, UID) Экспорт
	
	Возврат Данные.ВнешниеИсточники.Получить(UID);	

КонецФункции
&НаКлиенте
// Вставляет внешний источник
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  UID - УникальныйИдентификатор - UID внешнего источника
//  Описание - Структура - Описание внешнего источника
//
Процедура УКО_ДанныеКлиент_ВставитьВнешнийИсточник(Форма, Строка, UID, Описание) Экспорт
	
	Данные = УКО_ДанныеКлиент_Получить(Форма, Строка);
	Форма.Модифицированность = Истина;
	
	Данные.ВнешниеИсточники.Вставить(UID, Описание);	

КонецПроцедуры
&НаКлиенте
// Возвращает временные таблицы
//
// Параметры:
//  Данные - Данные - Данные
//
// Возвращаемое значение:
//   Соответствие - Данные временных таблицы
//
Функция УКО_ДанныеКлиент_ВременныеТаблицы(Данные) Экспорт
	
	Возврат Данные.ВременныеТаблицы;
	
КонецФункции
&НаКлиенте
// Устанавливает описание настроек вывода временной таблицы
//
// Параметры:
//  Форма - Форма - Форма
//  Данные - Данные - Данные
//  Имя - Строка - Имя временной таблицы
//  Описание - Структура - Описание настроек вывода временной таблицы
//
Процедура УКО_ДанныеКлиент_УстановитьОписаниеВыводаВременнойТаблицы(Форма, Данные, Имя, Описание) Экспорт
	
	Форма.Модифицированность = Истина;
	Данные.ВыводВременныхТаблиц.Вставить(Имя, Описание);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Проверяет это один из типов строки СКД
//
// Параметры:
//   Тип - Перечисление.УКО_ЭлементыДанных - Тип
//
// Возвращаемое значение:
//   Булево - Истина, если это один из типов СКД
//
Функция УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(Тип) Экспорт
	
	Возврат	Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД";
				
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это один из типов строки запрос, вложенный запрос
//
// Параметры:
//   Тип - Перечисление.УКО_ЭлементыДанных - Тип
//
// Возвращаемое значение:
//   Булево - Истина, если это один из типов запрос
//
Функция УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиЗапрос(Тип) Экспорт

	Возврат	Тип = "Перечисление.УКО_ЭлементыДанных.Запрос"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ПодЗапрос";
				
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает основное расширение файлов данных, которое используется для сохранения
// Возвращаемое значение:
//   Строка - Основное расширение файлов данных
Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных() Экспорт
	Возврат "mcr";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это один из типов который может содержать сохраняемые подчиненные строки
//
// Параметры:
//   Тип - Перечисление.УКО_ЭлементыДанных - Тип
//
// Возвращаемое значение:
//   Булево - Истина, если это один из типов
//
Функция УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(Тип) Экспорт
	
	Возврат	Тип = "Перечисление.УКО_ЭлементыДанных.Группа"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД";
				
КонецФункции
&НаСервере
// Получает состояние фонового задания длительной операции
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания
//  АдресРезультатаВыполнения - Строка - Адрес результата выполнения
//
// Возвращаемое значение:
//   Структура	- Результат структурой
//		* Статус - УКО_ДлительныеОперацииКлиентСервер - Статус длительной операции
//
Функция УКО_ДлительныеОперацииВызовСервера_ДанныеСостояния(Идентификатор, АдресРезультатаВыполнения) Экспорт
	
	Возврат ОбъектОбработки().УКО_ДлительныеОперации_ДанныеСостояния(Идентификатор, АдресРезультатаВыполнения);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает сокращенный идентификатор расширения
// Возвращаемое значение:
//   Строка	- Сокращенный идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширенияСокращенный() Экспорт 
	
	Возврат "УКО";
	
КонецФункции
&НаКлиенте

Функция УКО_ОбщегоНазначенияКлиент_ОбработкаТекстаПоАлгоритму(Текст, ТипАлгоритма)
	
	НовыйТекст = "";
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	
	Если ТипАлгоритма = "Перечисление.УКО_АлгоритмыОбработкиТекста.Закомментировать" Тогда
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			НовыйТекст = НовыйТекст + "//" + СтрПолучитьСтроку(Текст, НомерСтроки);
			Если НомерСтроки <> КоличествоСтрок Тогда
				НовыйТекст = НовыйТекст + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипАлгоритма = "Перечисление.УКО_АлгоритмыОбработкиТекста.УбратьКомментарии" Тогда
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			
			Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
			// Ищем //
			ЗаменятьБлок = Истина;
			ПозицияСимволовКомментария = СтрНайти(Строка, "//");
			Если ПозицияСимволовКомментария <> 0 Тогда
				// Проверим есть ли другие значимые символы перед // может быть строка "Поле1 КАК Поле1, //Поле1"
				Для Сч = 1 По ПозицияСимволовКомментария - 1 Цикл 
					Если СтрНайти(" " + Символы.Таб, Сред(Строка,Сч, 1)) = 0 Тогда
						ЗаменятьБлок = Ложь;
					КонецЕсли;
				КонецЦикла;
			Иначе 
				ЗаменятьБлок = Ложь;
			КонецЕсли;
			
			Если ЗаменятьБлок Тогда
				НовыйТекст = НовыйТекст + Лев(Строка, ПозицияСимволовКомментария - 1) + Сред(Строка, ПозицияСимволовКомментария + 2);
			Иначе 
				НовыйТекст = НовыйТекст + Строка;
			КонецЕсли;
			
			Если НомерСтроки <> КоличествоСтрок Тогда
				НовыйТекст = НовыйТекст + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйТекст;
	
КонецФункции
&НаСервере
// Получает код на встроенном языке для значения
//
// Параметры:
//  Значение  - Произвольный - Произвольное значений
//
// Возвращаемое значение:
//   Строка - Код на встроенном языке для значения
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_Значение(Значение) Экспорт
	
	Возврат ОбъектОбработки().УКО_КодНаВстроенномЯзыке_Значение(Значение);
	
КонецФункции
&НаКлиенте
// Обработка команды выделить ячейки табличного документа
//
// Параметры:
//	АдресТабличногоДокумента - Строка - Адрес табличного документа во временном хранилище
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//
Процедура УКО_ТабличныйДокументКлиент_КомандаВыделитьЯчейки(АдресТабличногоДокумента, ТабличныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(АдресТабличногоДокумента) Тогда
		
		ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
		ВыделеннаяОбласть = Новый Структура;
		ВыделеннаяОбласть.Вставить("Лево", ТекущаяОбласть.Лево);
		ВыделеннаяОбласть.Вставить("Верх", ТекущаяОбласть.Верх);
		ВыделеннаяОбласть.Вставить("Право", ТекущаяОбласть.Право);
		ВыделеннаяОбласть.Вставить("Низ", ТекущаяОбласть.Низ);
		
		УКО_ТабличныйДокументКлиентСервер_ВыделитьЯчейки(ТабличныйДокумент, ВыделеннаяОбласть);
		УКО_ТабличныйДокументВызовСервера_ВыделитьЯчейки(АдресТабличногоДокумента, ВыделеннаяОбласть);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Инициализация структуры данных длительной операции
//
// Возвращаемое значение:
//   Структура - Данные длительной операции
//
Функция УКО_ДлительныеОперацииКлиент_ИнициализироватьДанные() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование");
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Состояние");
	Результат.Вставить("ДополнительныеПараметры");
	Результат.Вставить("Прогресс");
	Результат.Вставить("АдресРезультатаВыполнения");
	Результат.Вставить("ИнтервалОжидания");
	Результат.Вставить("Начало");
	Результат.Вставить("ИмяОбработчика");
	Результат.Вставить("УведомлениеОЗавершении");
	Результат.Вставить("ЗвуковойСигналПоОкончании");
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Обработчик ожидания длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   ДлительнаяОперация - ДанныеДлительнойОперации - Данные операции
//   СостояниеВыполнения - Структура - Состояние выполнения
//
Процедура УКО_ДлительныеОперацииКлиент_СтандартныйОбработчикОжиданияДлительнойОперации(Форма, ДлительнаяОперация, СостояниеВыполнения) Экспорт
	
	ОткрытаДополнительнаяФорма = (СтрНайти(Форма.ИмяФормы, "ДлительнаяОперация"));
	ЗаданиеЗавершено = Ложь;
	
	Если СостояниеВыполнения.Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Активно" Тогда
		
		ОписаниеСостоянииВыполнения = СостояниеВыполнения.Состояние;
		
		Если ОписаниеСостоянииВыполнения <> Неопределено Тогда
			
			Если ОписаниеСостоянииВыполнения.Свойство("Состояние") Тогда
				ДлительнаяОперация.Состояние = ОписаниеСостоянииВыполнения.Состояние;
			КонецЕсли;
			
			Если ОписаниеСостоянииВыполнения.Свойство("Индикатор") Тогда
				ДлительнаяОперация.Прогресс = ОписаниеСостоянииВыполнения.Индикатор;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстСостояния = ДлительнаяОперация.Состояние;
		// Обновление информации о выполнении
		Если ОткрытаДополнительнаяФорма Тогда
			
			ЭлементСостояние = Форма.Элементы.ДекорацияСостояние;
			ЭлементСостояние.Заголовок = ТекстСостояния;
			
			ТребуемаяВысота = СтрЧислоСтрок(ТекстСостояния);
			Если ЭлементСостояние.Высота <> ТребуемаяВысота Тогда
				ЭлементСостояние.Высота = ТребуемаяВысота;
			КонецЕсли;
			
			Форма.Индикатор = ДлительнаяОперация.Прогресс;
			
		Иначе
			
			ТекстСостояния = СтрПолучитьСтроку(ТекстСостояния, 1);
			Состояние(ДлительнаяОперация.Наименование, ДлительнаяОперация.Прогресс, ТекстСостояния, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
			
		КонецЕсли;
			
		ПрошлоСекунд = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДлительнаяОперация.Начало)/1000;
		Если ПрошлоСекунд > 5 И Не ОткрытаДополнительнаяФорма Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДлительнаяОперация", ДлительнаяОперация);
			ПараметрыФормы.Вставить("Прогресс", ДлительнаяОперация.Прогресс);
			
			Форма.Доступность = Истина;
			УКО_ФормыКлиент_ОткрытьДополнительную("ДлительнаяОперация", ПараметрыФормы, Форма);
			
		Иначе
			
			ДлительнаяОперация.ИнтервалОжидания = УКО_ДлительныеОперацииКлиентСервер_СледующийШагИнтервалаОжидания(ДлительнаяОперация.ИнтервалОжидания);
			Форма.ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", ДлительнаяОперация.ИнтервалОжидания, Истина);
			
		КонецЕсли;
		
	ИначеЕсли СостояниеВыполнения.Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Завершено" Тогда
		
		ЗаданиеЗавершено = Истина;
		
		Если ОткрытаДополнительнаяФорма Тогда
			ФормаИсточник = Форма.ВладелецФормы;
		Иначе
			ФормаИсточник = Форма;
		КонецЕсли;

		УКО_ДлительныеОперацииКлиент_ОбработкаЗавершенияДлительнойОперации(ФормаИсточник, ФормаИсточник.ДлительнаяОперация, СостояниеВыполнения.Результат);
		
	ИначеЕсли СостояниеВыполнения.Статус = "Перечисление.УКО_СтатусФоновогоЗадания.АварийноЗавершено" Тогда
		
		ЗаданиеЗавершено = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка в фоновом задании'; en = 'Error in background job'"),,УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	КонецЕсли;
	
	Если ЗаданиеЗавершено Тогда
		
		Если ОткрытаДополнительнаяФорма Тогда
			Форма.Закрыть();
		Иначе
			Форма.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Открывает форму редактирования выражения
//
// Параметры:
//	Заголовок - Строка - Дополнительный заголовок формы
//	Режим - РежимРедактированияВыражения - Режим редактирования выражения
//	Выражение - Строка - Выражение
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеВыражения(Заголовок, Режим, Выражение, ФормаВладелец, ОписаниеОповещенияЗавершение) Экспорт
	
	ПараметрыФормы = Новый Структура("Заголовок, Режим, Выражение", Заголовок, Режим, Выражение);
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеВыражения", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Получает следующий интервал ожидания
//
// Параметры:
//   ТекущийИнтервал - Число - Текущий интервал
//
// Возвращаемое значение:
//   Число	- Следующий интервал ожидания
//
Функция УКО_ДлительныеОперацииКлиентСервер_СледующийШагИнтервалаОжидания(ТекущийИнтервал) Экспорт
	
	Возврат Мин(ТекущийИнтервал * 1.5, 15);
	
КонецФункции
&НаКлиенте
// Открывает дополнительную/вспомогательную форму
//
// Параметры:
//	Имя - Строка - Имя формы
//	Параметры - Структура - Параметры формы (необязательный)
//	Владелец - Форма - Форма владелец
//	Уникальность - Произвольный - Уникальность (необязательный)
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии (необязательный)
//
Процедура УКО_ФормыКлиент_ОткрытьДополнительную(Имя, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Тогда
		ОбъектФорм = СтрШаблон("ВнешняяОбработка.%1%2.Форма.", УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения());
	Иначе
		ОбъектФорм = "ОбщаяФорма";
	КонецЕсли;
	
	ПолноеИмяФормы = СтрШаблон("%1.%2%3", ОбъектФорм, УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), Имя);
	
	Если Владелец = Неопределено Тогда
		РежимОткрытия = Неопределено;
	Иначе 
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, Параметры, Владелец, Уникальность,,,ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает префикс объектов расширения
// Возвращаемое значение:
//   Строка	- Префикс объектов расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения() Экспорт 
	
	Возврат "УКО_";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, это режим запуска программы
//
// Возвращаемое значение:
//   Булево	- Истина, Режим запуска внешняя обработка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Экспорт
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
// Обработчик оповещений формы для длительной операции
//
// Параметры:
//   Форма - Форма - Форма владелец
//   ИмяСобытия - Строка - Имя события
//   Параметр - Произвольный - Параметр оповещения
//   Источник - Форма - Источник оповещения
//
Процедура УКО_ДлительныеОперацииКлиент_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИзмененыНастройки" Тогда 
			
		УКО_НастройкиПользователяВызовСервера_ОбновитьЗначенияНастроек(Форма.НастройкиОбработки);
			
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(Представление, Расширение)
	
	Возврат СтрШаблон("%1 (%2)|%2", Представление, Расширение);
	
КонецФункции
&НаСервере
// Обновляет значение настроек
//
// Параметры:
//  Настройки  - Структура - Настройки
//
Процедура УКО_НастройкиПользователяВызовСервера_ОбновитьЗначенияНастроек(Настройки) Экспорт
	
	ОбъектОбработки().УКО_НастройкиПользователя_ОбновитьЗначенияНастроек(Настройки);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает строку фильтра для диалога выбора файла
//
// Параметры:
//   ВключаяВсеФайлы - Булево - Включать все файлы
//   ВключатьИмпортируемыеФорматы - Булево - Включать импортируемые форматы
//
// Возвращаемое значение:
//   Строку - Фильтр для диалога выбора файла
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайловДанных(ВключаяВсеФайлы = Ложь, ВключатьИмпортируемыеФорматы = Ложь) Экспорт
	
	ПоддерживаемыеФорматы = Новый СписокЗначений;
	ПоддерживаемыеФорматы.Добавить(СтрШаблон("*.%1", УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных()), НСтр("ru = 'Файлы данных'; en = 'Data files'"));
	Если ВключатьИмпортируемыеФорматы Тогда
		ПоддерживаемыеФорматы.Добавить("*.q1c", НСтр("ru = 'Файлы запросов от 1С'; en = 'Query files from 1C'"));
		ПоддерживаемыеФорматы.Добавить("*.dcr", НСтр("ru = 'Файлы СКД от 1С'; en = 'DCS files from 1C'"));
		ПоддерживаемыеФорматы.Добавить("*.erf", НСтр("ru = 'Файлы внешних отчетов (СКД)'; en = 'External report files (DCS)'"));
	КонецЕсли;
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы, ВключаяВсеФайлы);
	
КонецФункции
&НаСервере
// Проверяет текст запроса извлекает параметры
//
// Параметры:
//	Текст - Строка - Текст запроса
//
// Возвращаемое значение:
//	Структура - информация о проверке
//		*ТекстОшибки - Строка - Текст ошибки
//		*Параметры - ОписаниеПараметровЗапроса - Описание параметров запроса
//
Функция УКО_ЗапросВызовСервера_ПроверитьТекст(Текст) Экспорт
	
	Возврат ОбъектОбработки().УКО_Запрос_ПроверитьТекст(Текст);
	
КонецФункции
&НаКлиенте
// Инициализация формы для проверки обновлений
//
// Параметры:
//  Форма  - Форма - Форма
//
Процедура УКО_ПроверкаОбновленийКлиент_Инициализация(Форма) Экспорт
	
	ПроверкаОбновления = Форма["ПроверкаОбновления"];
	
	АктуальнаяВерсия = ПроверкаОбновления.АктуальнаяВерсия;
	ДатаПроверкиОбновления = ПроверкаОбновления.ДатаПроверкиОбновления;
	
	Если Не ЗначениеЗаполнено(ДатаПроверкиОбновления)
			ИЛИ (ТекущаяДата() - ДатаПроверкиОбновления) > 24*60*60 Тогда
			
		АктуальнаяВерсия = УКО_ПроверкаОбновленийКлиент_ПроверитьАктуальнуюВерсию();
		ПроверкаОбновления.АктуальнаяВерсия = АктуальнаяВерсия;
		ПроверкаОбновления.ДатаПроверкиОбновления = ТекущаяДата();
		
	КонецЕсли;
	
	ЭлементДоступноОбновление = Форма.Элементы["ПроверкаОбновления"];
	ВерсияРасширения = УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения();
	ЭлементДоступноОбновление.Видимость = ЗначениеЗаполнено(АктуальнаяВерсия) 
													И ВерсияРасширения < АктуальнаяВерсия;

	Если ЗначениеЗаполнено(АктуальнаяВерсия) 
			И УКО_ПроверкаОбновленийКлиент_РедакцияВерсии(ВерсияРасширения) <> УКО_ПроверкаОбновленийКлиент_РедакцияВерсии(АктуальнаяВерсия) Тогда
		ЦветТекста = УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаВажнойГиперссылки();
	Иначе
		ЦветТекста = УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаГиперссылки();
	КонецЕсли;
	
	ЭлементДоступноОбновление.ЦветТекста = ЦветТекста;
	
КонецПроцедуры
&НаСервере
// Преобразует текст запроса во вложенный дополняя ВЫБРАТЬ * ()
//
// Параметры:
//  Текст  - Строка - Текст запрос
//  ИмяЗапроса  - Строка - Имя запроса
//
// Возвращаемое значение:
//   Строка - Преобразованный текст запроса
//
Функция УКО_ЗапросВызовСервера_ПреобразоватьТекстЗапросаВоВложенный(Текст, ИмяЗапроса) Экспорт 
	
	Результат = Новый Структура;
	
	ТекстОшибки = "";
	
	СхемаЗапроса = Новый СхемаЗапроса();
	
	Попытка
		
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		
		КоличествоЗапросовВыборкиДанных = ОбъектОбработки().УКО_Запрос_КоличествоЗапросовВПакете(СхемаЗапроса, Истина);
		
		Если КоличествоЗапросовВыборкиДанных = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Нет запроса выборки данных'; en = 'There is no query of sample data'");
		ИначеЕсли КоличествоЗапросовВыборкиДанных > 1 Тогда
			ВызватьИсключение НСтр("ru = 'Несколько запросов выборки'; en = 'A few sample requests'");
		КонецЕсли;
		
		Поля = Новый Массив;
		Для Каждого Колонка Из СхемаЗапроса.ПакетЗапросов[0].Колонки Цикл 
			Поля.Добавить(СтрШаблон("%1.%2", ИмяЗапроса, Колонка.Псевдоним));
		КонецЦикла;
		
		// Во вложенном запросе недоступны ПОМЕСТИТЬ, АВТОУПОРЯДОЧИВАНИЕ
		СхемаПакетаВложенногоЗапроса = СхемаЗапроса.ПакетЗапросов[0];
		
		ТаблицаДляПомещения = СхемаПакетаВложенногоЗапроса.ТаблицаДляПомещения;
		СхемаПакетаВложенногоЗапроса.ТаблицаДляПомещения = "";
		Автопорядок = СхемаПакетаВложенногоЗапроса.Автопорядок;
		СхемаПакетаВложенногоЗапроса.Автопорядок = Ложь;
		
		СхемаПакетаВложенногоЗапроса.ОбщиеИтоги = Ложь;
		СхемаПакетаВложенногоЗапроса.ВыраженияИтогов.Очистить();
		СхемаПакетаВложенногоЗапроса.КонтрольныеТочкиИтогов.Очистить();
		
		// Если не везде используется первые, необходимо перенести упорядочивание
		ВездеВыбратьПервые = Истина;
		Для Каждого ОператорЗапроса Из СхемаПакетаВложенногоЗапроса.Операторы Цикл 
			
			Если ОператорЗапроса.КоличествоПолучаемыхЗаписей = Неопределено Тогда
				ВездеВыбратьПервые = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		УпорядочитьПоЭлементы = Новый Массив;
		Если Не ВездеВыбратьПервые Тогда
			
			УпорядочитьПоЭлементы = Новый Массив;
			Для Каждого ЭлементПорядок Из СхемаПакетаВложенногоЗапроса.Порядок Цикл 
				
				Если ЭлементПорядок.Направление = НаправлениеПорядкаСхемыЗапроса.ПоВозрастаниюИерархии Тогда
					ДополнениеПорядка = " ИЕРАРХИЯ";
				ИначеЕсли ЭлементПорядок.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию Тогда
					ДополнениеПорядка = " УБЫВ";
				ИначеЕсли ЭлементПорядок.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбываниюИерархии Тогда
					ДополнениеПорядка = " УБЫВ ИЕРАРХИЯ";
				Иначе
					ДополнениеПорядка = "";
				КонецЕсли;
				
				ПолеПорядка = ЭлементПорядок.Элемент.Псевдоним + ДополнениеПорядка;
				УпорядочитьПоЭлементы.Добавить(ПолеПорядка);
				
			КонецЦикла;
			
			СхемаПакетаВложенногоЗапроса.Порядок.Очистить();
			
		КонецЕсли;
		
		ТекстЗапроса = Новый Массив;
		
		ТекстЗапроса.Добавить("ВЫБРАТЬ");
		ТекстПоля = СтрСоединить(Поля, "," + Символы.ПС);
		ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстПоля));
		
		Если ЗначениеЗаполнено(ТаблицаДляПомещения) Тогда
			ТекстЗапроса.Добавить(СтрШаблон("ПОМЕСТИТЬ %1", ТаблицаДляПомещения));
		КонецЕсли;
		
		ТекстЗапроса.Добавить("ИЗ");
		
		ТекстВложенногоЗапроса = СхемаПакетаВложенногоЗапроса.ПолучитьТекстЗапроса();
		ТекстИсточника = СтрШаблон("(%1) КАК %2", ТекстВложенногоЗапроса, ИмяЗапроса);
		ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстИсточника));
		
		Если ЗначениеЗаполнено(УпорядочитьПоЭлементы) Тогда
			ТекстЗапроса.Добавить("УПОРЯДОЧИТЬ ПО");
			УпорядочитьПо = СтрСоединить(УпорядочитьПоЭлементы, "," + Символы.ПС);
			ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(УпорядочитьПо));
		КонецЕсли;
		
		Если Автопорядок Тогда
			ТекстЗапроса.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
		КонецЕсли;
		
		Результат.Вставить("Текст", СтрСоединить(ТекстЗапроса, Символы.ПС));
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат.Вставить("Ошибка", ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Получает дату из описания границы (значение сложного параметра)
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы (значение сложного параметра)
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция УКО_ЗапросВызовСервера_ДатаИзОписанияГраницы(ОписаниеГраницы) Экспорт
	
	Возврат ОбъектОбработки().УКО_Запрос_ДатаИзОписанияГраницы(ОписаниеГраницы);
	
КонецФункции
&НаСервере
// Возвращает описание границы
//
// Параметры:
//  Граница - Граница - Граница
//
// Возвращаемое значение:
//   Структура - Описание границы
//
Функция УКО_ЗапросВызовСервера_ОписаниеИзГраницы(Граница) Экспорт 
	
	Возврат ОбъектОбработки().УКО_Запрос_ОписаниеИзГраницы(Граница);
	
КонецФункции
&НаСервере
// Возвращает дату из момента времени
//
// Параметры:
//  МоментВремени - МоментВремени - Момент времени
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция УКО_ЗапросВызовСервера_ДатаИзМоментаВремени(МоментВремени) Экспорт
	
	Возврат МоментВремени.Дата;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Корректирует табуляцию вставляемого текста
// Параметры:
//   ВставляемыйТекст - Строка - Вставляемый текст
//   ИсходныйТекст - Строка - Исходный текст
// Возвращаемое значение:
//   Строка - Скорректированный текст
Функция УКО_ЗапросКлиентСервер_СкорректироватьТабуляциюВставляемогоТекста(ВставляемыйТекст, ИсходныйТекст) Экспорт
	
	// Определим уровень табуляции исходного текста
	ИсходныйТекстСтроки = СтрРазделить(ИсходныйТекст, Символы.ПС);
	КоличествоТабуляций = 0;
	
	Если ИсходныйТекстСтроки.Количество() >=2 Тогда
		
		АнализируемаяСтрока = ИсходныйТекстСтроки[1];
		Для НомерСимвола = 1 По СтрДлина(АнализируемаяСтрока) Цикл
			
			Если Сред(АнализируемаяСтрока, НомерСимвола, 1) <> Символы.Таб Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоТабуляций = КоличествоТабуляций + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ВставляемыйТекст, Ложь, КоличествоТабуляций - 1);
	
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Переименовывает параметр в тексте запроса
//
// Параметры:
//   Данные - Данные - Данные
//   СтароеИмя - Строка - Старое имя параметра
//   НовоеИмя - Строка - Новое имя параметра
//
Процедура УКО_ЗапросКлиентСервер_ПереименоватьПараметр(Данные, СтароеИмя, НовоеИмя) Экспорт
	
	Данные.Текст = УКО_ЗапросКлиентСервер_ПереименованиеПараметраВТекстеЗапроса(Данные.Текст, СтароеИмя, НовоеИмя);
	
	ПараметрыЗапроса = Данные.Параметры;
	
	ОписаниеТиповПараметраСНовымИменем = ПараметрыЗапроса.Получить(НовоеИмя);
	ОписаниеТиповПараметраСоСтарымИменем = ПараметрыЗапроса.Получить(СтароеИмя);
	
	Если ОписаниеТиповПараметраСНовымИменем = Неопределено Тогда
		
		ПараметрыЗапроса.Вставить(НовоеИмя, ОписаниеТиповПараметраСоСтарымИменем);
		ПараметрыЗапроса.Удалить(СтароеИмя);
		
		ЗначенияПараметровЗапроса = Данные.ЗначенияПараметров;
		СтароеЗначение = ЗначенияПараметровЗапроса.Получить(СтароеИмя);
		ЗначенияПараметровЗапроса.Вставить(НовоеИмя, СтароеЗначение);
		
	Иначе
		
		ПараметрыЗапроса.Удалить(СтароеИмя);
		ПараметрыЗапроса.Вставить(НовоеИмя, УКО_ОбщегоНазначенияКлиентСервер_СложитьОписанияТипов(ОписаниеТиповПараметраСНовымИменем, ОписаниеТиповПараметраСоСтарымИменем));
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ЗапросКлиентСервер_ПереименованиеПараметраВТекстеЗапроса(ТекстЗапроса, СтароеИмя, НовоеИмя)
	
	НовыйТекст = "";
	
	СтрокаПоиска = "&" + СтароеИмя;
	Индекс = СтрНайти(ТекстЗапроса, СтрокаПоиска);
	Если ЗначениеЗаполнено(Индекс) Тогда
		
		ИндексСледующегоСимвола = Индекс + СтрДлина(СтрокаПоиска);
		СледующийСимвол = Сред(ТекстЗапроса, ИндексСледующегоСимвола,1);
		
		Если СледующийСимвол = " " 
				ИЛИ СледующийСимвол = Символы.Таб
				ИЛИ СледующийСимвол = Символы.ПС
				ИЛИ СледующийСимвол = ")"
				ИЛИ СледующийСимвол = ","
				ИЛИ СледующийСимвол = "" Тогда
			НовыйТекст = Лев(ТекстЗапроса, Индекс - 1) + "&" + НовоеИмя + УКО_ЗапросКлиентСервер_ПереименованиеПараметраВТекстеЗапроса(Сред(ТекстЗапроса, ИндексСледующегоСимвола), СтароеИмя, НовоеИмя);
		КонецЕсли;
		
	Иначе
		
		НовыйТекст = НовыйТекст + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат НовыйТекст;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Добавляет одно описание типов к другому
//
// Параметры:
//  ОписаниеТиповПервый  - ОписаниеТипов - Первое описание типов
//  ОписаниеТиповВторой  - ОписаниеТипов - Второе описание типов
//
// Возвращаемое значение:
//   ОписаниеТипов - Результат сложения типов
//
Функция УКО_ОбщегоНазначенияКлиентСервер_СложитьОписанияТипов(ОписаниеТиповПервый, ОписаниеТиповВторой) Экспорт
	
	ДобавляемыеТипы = Новый Массив;
	Для Каждого Тип Из ОписаниеТиповВторой.Типы() Цикл 
		ДобавляемыеТипы.Добавить(Тип);
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(ОписаниеТиповПервый, ДобавляемыеТипы);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает по объекту метаданных доступны ли для него предопределенные элементы
//
// Параметры:
//   ИмяОбъекта - Строка - Имя объекта метаданных
//
// Возвращаемое значение:
//   Булево - Истина, доступны предопределенные элементы
//
Функция УКО_МетаданныеКлиентСервер_ОбъектCПредопределенными(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Справочник" 
				ИЛИ ИмяОбъекта = "Catalog"
				ИЛИ УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта)
				ИЛИ ИмяОбъекта = "ПланВидовХарактеристик"
				ИЛИ ИмяОбъекта = "ChartOfCharacteristicTypes"
				ИЛИ ИмяОбъекта = "ПланСчетов"
				ИЛИ ИмяОбъекта = "ChartOfAccounts"
				ИЛИ ИмяОбъекта = "ПланВидовРасчета"
				ИЛИ ИмяОбъекта = "ChartOfCalculationTypes";

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет этот объект перечисление
//
// Параметры:
//   ИмяОбъекта - Строка - Объект метаданных
//
// Возвращаемое значение:
//   Булево - Истина, это имя перечисление
//
Функция УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Перечисление" 
				ИЛИ ИмяОбъекта = "Enum";

КонецФункции
&НаСервере
// Таблица значений из выражения на встроенном языке
//
// Параметры:
//  Алгоритм  - Строка - Алгоритм
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Строка - Адрес таблицы значений во временном хранилище
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_ТаблицаЗначенийИзВыражения(Алгоритм, УникальныйИдентификатор) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		
		Результат = ОбъектОбработки().УКО_ОбщегоНазначения_ВычислитьРезультатВыражениеВБезопасномРежиме(Алгоритм);
		
	Исключение
		
		НеБудемОбрабатыватьИсключение = Истина;
		
	КонецПопытки;
	
	Если ТипЗнч(Результат) <> Тип("ТаблицаЗначений") Тогда
		Результат = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат ОбъектОбработки().УКО_ВременноеХранилище_Поместить(Результат, , УникальныйИдентификатор);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя переменной для возврата значений редактирование выражения
// Параметры:
//   КодЯзыка - Строка - Код языка
// Возвращаемое значение:
//   Строка	- Имя переменной
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения(КодЯзыка) Экспорт
	Возврат НСтр("ru = 'Результат'; en = 'Result'", КодЯзыка);
КонецФункции
&НаКлиенте

Функция УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, Область)
	
	Попытка
		Расшифровка = Область.Расшифровка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		Результат = УКО_СКДВызовСервера_РасшифровкаОбласти(АдресДанныхРасшифровки, Расшифровка);
		
	Иначе
		
		Результат = Расшифровка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаСервере
// Читает данные из хранилища системных настроек
//
// Параметры:
//	Имя - Строка - Имя настройки
//	УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//	Данные - Данные
//
Функция УКО_НастройкиВызовСервера_ЗагрузитьДанные(Имя, УникальныйИдентификатор) Экспорт
	
	Возврат ОбъектОбработки().УКО_Настройки_ЗагрузитьДанные(Имя, УникальныйИдентификатор);
	
КонецФункции
&НаСервере
// Получает значение параметра
//
// Параметры:
//  Значение  - Произвольный - Значение параметра
//  Имя  - Строка - Имя
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для значения параметра
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_ЗначениеПараметра(Значение, Имя = Неопределено) Экспорт

	Если ЭтоАдресВременногоХранилища(Значение) Тогда
		
		ЗначениеПараметра = ПолучитьИзВременногоХранилища(Значение);
		УдалитьИзВременногоХранилища(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда // Граница
		
		ЗначениеПараметра = ОбъектОбработки().УКО_Запрос_ГраницаИзОписания(Значение);
		
	Иначе
		
		ЗначениеПараметра = Значение;
		
	КонецЕсли;
	
	ДополнениеРезультата = Неопределено;

	КодНаВстроенномЯзыке = ОбъектОбработки().УКО_КодНаВстроенномЯзыке_Значение(ЗначениеПараметра, ДополнениеРезультата);
	Идентификатор = УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения (ОбъектОбработки().УКО_ОбщегоНазначения_КодЯзыкаПрограммирования());
	
	Если ДополнениеРезультата.ТребуетсяИнициализация Тогда
		
		КодНаВстроенномЯзыке = СтрШаблон(КодНаВстроенномЯзыке + "
									|%2 = %1;", Имя, Идентификатор);
	Иначе
		КодНаВстроенномЯзыке = СтрШаблон("%2 = %1;", КодНаВстроенномЯзыке, Идентификатор);
	КонецЕсли;
			
	Возврат УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Выражение", КодНаВстроенномЯзыке);

КонецФункции
&НаСервере
// Параметр из выражения на встроенном языке
//
// Параметры:
//  Алгоритм  - Строка - Алгоритм
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Произвольный - Значений параметра
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_ПараметрИзВыражения(Алгоритм, УникальныйИдентификатор) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		
		Результат = ОбъектОбработки().УКО_ОбщегоНазначения_ВычислитьРезультатВыражениеВБезопасномРежиме(Алгоритм);
		
	Исключение
		
		НеБудемОбрабатыватьИсключение = Истина;
		
	КонецПопытки;
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда 
		Результат = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений", ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор));
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, производится ли выполнение длительных операций в фоне
//
// Возвращаемое значение:
//   Булево	- Истина, длительные операции выполняются в фоне
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ВыполнениеДлительныхОперацийВФоне() Экспорт
	
	Возврат Ложь;
	//Возврат Не УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка();
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Создает временный каталог в каталоге временных файлов
//
// Возвращаемое значение:
//   Строка - Полное имя каталога
//
Функция УКО_ФайлыКлиентСервер_СоздатьВременныйКаталог() Экспорт
	
	Результат = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(Результат);
	
	Возврат Результат;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Переименовывает каталог
//
// Параметры:
//	СтароеИмя - Строка - Старое имя
//	НовоеИмя - Строка - Новое имя
//
Процедура УКО_ФайлыКлиентСервер_ПереименоватьКаталог(СтароеИмя, НовоеИмя) Экспорт 
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject"); 
	FSO.MoveFolder(СтароеИмя, НовоеИмя); 
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Получает полное имя дополняя путь именем
//
// Параметры:
//	Путь - Строка - Путь
//	Имя - Строка - Имя файла
//
// Возвращаемое значение:
//   Строка - Полное имя файла 
//
Функция УКО_ФайлыКлиентСервер_ПолноеИмя(Путь, Имя) Экспорт
	
	Возврат Путь + ПолучитьРазделительПути() + Имя;
	
КонецФункции
&НаСервере
// Возвращает сумму выделенных ячеек табличного документа.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//	КэшВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//
// Возвращаемое значение:
//	Число - Сумма значений ячеек.
//
Функция УКО_ТабличныйДокументВызовСервера_ВычислитьСуммуВыделенныхЯчеек(ТабличныйДокумент, КэшВыделеннойОбласти) Экспорт
	
	Если ТипЗнч(ТабличныйДокумент) = Тип("Строка") И ЭтоАдресВременногоХранилища(ТабличныйДокумент) Тогда
		АнализируемыйТабличныйДокумент = ПолучитьИзВременногоХранилища(ТабличныйДокумент);
	Иначе
		АнализируемыйТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				
				Попытка
					
					Ячейка = АнализируемыйТабличныйДокумент.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					
					Если Ячейка.Видимость = Истина Тогда
						
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							
							Сумма = Сумма + Ячейка.Значение;
							
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							
							ЧислоВЯчейке = Число(УКО_СтрокиКлиентСервер_ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
							Сумма = Сумма + ЧислоВЯчейке;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					НеБудемОбрабатыватьИсключение = Истина;
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Читает текст из файла
//
// Параметры:
//	Объект - Строка,Поток - Объект чтения
//
// Возвращаемое значение:
//   Строка - Прочитанный текст
//
Функция УКО_ФайлыКлиентСервер_ПрочитатьТекст(Объект) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(Объект);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Записывает текст в файл
//
// Параметры:
//	ПолноеИмяФайла - Строка - Полное имя файла
//	Текст - Строка - Текст
//
Процедура УКО_ФайлыКлиентСервер_ЗаписатьТекст(ПолноеИмяФайла, Текст) Экспорт
	
	ЗаписьТекст = Новый ЗаписьТекста(ПолноеИмяФайла);
	ЗаписьТекст.Записать(Текст);
	ЗаписьТекст.Закрыть();
	
КонецПроцедуры
&НаКлиенте

Функция УКО_ТабличныйДокументКлиент_НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// Не нашли нужную область в кэше, поэтому заново инициализируем кэш.
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура;
				СтруктураАдресВыделеннойОбласти.Вставить("Верх",  ВыделеннаяОбласть.Верх);
				СтруктураАдресВыделеннойОбласти.Вставить("Низ",   ВыделеннаяОбласть.Низ);
				СтруктураАдресВыделеннойОбласти.Вставить("Лево",  ВыделеннаяОбласть.Лево);
				СтруктураАдресВыделеннойОбласти.Вставить("Право", ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает картинку по описание типов
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка описания типов
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(ОписаниеТипов) Экспорт
	
	Если ОписаниеТипов = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	КонецЕсли;
	
	КоличествоТипов = УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов);
	
	Если КоличествоТипов = 0 Тогда 
		
		Картинка = Новый Картинка;
		
	ИначеЕсли КоличествоТипов > 1 Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAWUlEQVQ4T92OQQrAQAgD85o+pp/y" + Символы.ВК + Символы.ПС + "6WkVBFlCSdlDoYfJIeogSG5REYDNowBnUDEPVipcQe8l3dmCe85JdsnfBF2+oUIJ" + Символы.ВК + Символы.ПС + "jgBX5rypcAXqy4rvBYptgYssfYgLqgc0Wk0lF3MAAAAASUVORK5CYII="));
		
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов), ОписаниеТипов);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
&НаКлиенте
// Обработка команды выделить ячейки табличного документа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//	НаВстроенномЯзыке - Булево - На встроенном языке
//
Процедура УКО_ТабличныйДокументКлиент_КомандаКопироватьСсылку(ТабличныйДокумент, АдресДанныхРасшифровки, НаВстроенномЯзыке = Ложь) Экспорт
	
	Расшифровка = Неопределено;
	Если УКО_ТабличныйДокументКлиент_РасшифровкаЭтоСсылка(ТабличныйДокумент, АдресДанныхРасшифровки, Расшифровка) Тогда
		
		Если НаВстроенномЯзыке Тогда
			ТекстВБуферОбмена = УКО_КодНаВстроенномЯзыкеВызовСервера_Значение(Расшифровка);
		Иначе
			ТекстВБуферОбмена = Строка(Расшифровка.УникальныйИдентификатор());
		КонецЕсли;
		
		УКО_БуферОбменаКлиент_Копировать(ТекстВБуферОбмена);

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте

Функция УКО_ПроверкаОбновленийКлиент_ПроверитьАктуальнуюВерсию()
	
	Возврат УКО_ПроверкаОбновленийКлиент_HttpЗапросКСерверу("/version.txt");
	
КонецФункции
&НаСервере
// Сохраняет данные в хранилище системных настроек
//
// Параметры:
//	Имя - Строка - Имя настройки
//	Данные - Данные - Данные
//
Процедура УКО_НастройкиВызовСервера_СохранитьДанные(Имя, Знач Данные) Экспорт
	
	ОбъектОбработки().УКО_Настройки_СохранитьДанные(Имя, Данные);
	
КонецПроцедуры
&НаКлиенте
// Обработки команды доступно обновление
//
// Параметры:
//  Форма  - Форма - Форма
//
Процедура УКО_ПроверкаОбновленийКлиент_ОбработкаДоступноОбновление(Форма) Экспорт
	
	УКО_ФормыКлиент_ОткрытьДополнительную("ДоступноОбновление",, Форма);

КонецПроцедуры
&НаСервере
// Возвращает скрипт mailto для отправки информации в поддержку расширения
//
// Параметры:
//	ИнформацияОКлиенте - Структура - Информация о клиенте
//
// Возвращаемое значение:
//	Строка - Строка команды
//
Функция УКО_ОбщегоНазначенияВызовСервера_СкриптОтправкиПисьма(ИнформацияОКлиенте) Экспорт 
	
	// Справка по mailto: 'http://htmlcoder.visions.ru/HTML/?13'
	ШаблонПисьма = НСтр("ru = '<Содержание вопроса.
	|Пожалуйста подробно описывайте возникшую проблему. Спасибо за обращение>
	|
	|Доп. информация:
	| Клиент: %1
	| Конфигурация: %2
	| Система: %3'; en = '<Contents of the question.
	|Please describe the problem in detail. Thank you for contacting>
	|
	|Extra information:
	| Client: %1
	| Configuration: %2
	| System: %3'");
	
	ИнформацияКлиент = СтрШаблон(НСтр("ru = '%1, скорость соединения: %2, экраны: %3';
									|en = '%1, connection speed: %2, screens: %3'"),
									ИнформацияОКлиенте.ТипКлиента,
									ИнформацияОКлиенте.СкоростьСоединения,
									ИнформацияОКлиенте.Экраны);
	
	ИнформацияОКонфигурации = СтрШаблон(НСтр("ru = 'Использования модальности: %3, режим совместимости: %4';
											|en = 'Using modality: %3, compatibility mode: %4'"),
											Метаданные.ПодробнаяИнформация,
											Метаданные.Версия,
											Метаданные.РежимИспользованияМодальности,
											Метаданные.РежимСовместимости);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияОСистеме = СтрШаблон(НСтр("ru = 'Версия платформы 1С: %1, ОС: %2 (%3)
								|Железо: Процессор: %4, Память: %5 Мб';
								|en = 'Platform version 1C: %1, OS: %2 (%3)
								|Hardware: Processor: %4, Memory: %5 MB'"), 
								СистемнаяИнформация.ВерсияПриложения,
								СистемнаяИнформация.ВерсияОС,
								СистемнаяИнформация.ТипПлатформы,
								СистемнаяИнформация.Процессор,
								СистемнаяИнформация.ОперативнаяПамять);
								
	ТемаПисьма = УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения();
	ТекстПисьма = СтрШаблон(ШаблонПисьма, ИнформацияКлиент, ИнформацияОКонфигурации, ИнформацияОСистеме);
	
	Возврат СтрШаблон("mailto:%1?subject=%2&body=%3",
							УКО_ОбщегоНазначенияКлиентСервер_emailРасширения(),
							КодироватьСтроку(ТемаПисьма, СпособКодированияСтроки.КодировкаURL),
							КодироватьСтроку(ТекстПисьма, СпособКодированияСтроки.КодировкаURL));
	
КонецФункции
&НаКлиенте
// Обработка выделенного текста по алгоритму комментировать и др.
//
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы содержащий текст
//   Текст - Строка - Текст
//   ТипАлгоритма - ТипАлгоритма - Тип алгоритма
//
Процедура УКО_ОбщегоНазначенияКлиент_ОбработкаВыделенногоТекстаПоАлгоритму(Элемент, Текст, ТипАлгоритма) Экспорт 
	
	ГраницыВыделения = УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элемент);
	
	Если ГраницыВыделения.КонецКолонки = 1 И ГраницыВыделения.НачалоСтроки <> ГраницыВыделения.КонецСтроки Тогда
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки - 1;
	КонецЕсли;
	
	ВыделенныйТекст = "";
	Для НомерСтроки = ГраницыВыделения.НачалоСтроки По ГраницыВыделения.КонецСтроки Цикл 
		
		ВыделенныйТекст = ВыделенныйТекст + СтрПолучитьСтроку(Текст, НомерСтроки);
		Если НомерСтроки <> ГраницыВыделения.КонецСтроки Тогда
			ВыделенныйТекст = ВыделенныйТекст + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйВыделенныйФрагмент = УКО_ОбщегоНазначенияКлиент_ОбработкаТекстаПоАлгоритму(ВыделенныйТекст, ТипАлгоритма);
	
	ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(Текст, ГраницыВыделения.КонецСтроки));
	Элемент.УстановитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, 1, ГраницыВыделения.КонецСтроки, ДлинаПоследнейСтроки + 1);
	
	Элемент.ВыделенныйТекст = НовыйВыделенныйФрагмент;
	
	ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(НовыйВыделенныйФрагмент, СтрЧислоСтрок(НовыйВыделенныйФрагмент)));
	Элемент.УстановитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, 1, ГраницыВыделения.КонецСтроки, ДлинаПоследнейСтроки + 1);
	
КонецПроцедуры
&НаКлиенте
// Открывает форму редактирования списка значений
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - СписокЗначений - Значение
//	ОписаниеТипов - ОписаниеТипов - ОписаниеТипов
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеСпискаЗначений(Заголовок, Значение, ОписаниеТипов, ФормаВладелец, ОписаниеОповещенияЗавершение) Экспорт
	
	ПараметрыФормы = Новый Структура("Заголовок, Значение, ОписаниеТипов", Заголовок, Значение, ОписаниеТипов);
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеСпискаЗначений", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиенте
// Получает границы выделения текстового документа
//
// Параметры:
//	Элемент - Элемент - Элемент текстовый документ
//
// Возвращаемое значение:
//   Структура - Описание границы выделения
//
Функция УКО_ОбщегоНазначенияКлиент_ГраницыВыделенияТекстовогоДокумента(Элемент) Экспорт
	
	Результат = Новый Структура("НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки");
	Элемент.ПолучитьГраницыВыделения (Результат.НачалоСтроки, Результат.НачалоКолонки, Результат.КонецСтроки, Результат.КонецКолонки);
	
	Возврат Результат;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает картинку типа
//
// Параметры:
//  Тип  - Тип - Тип
//  ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(Тип, ОписаниеТипов = Неопределено) Экспорт
	
	Если Тип = Тип("Неопределено") Тогда 
		Картинка = Новый Картинка;
	ИначеЕсли Тип = Тип("Тип")
			ИЛИ Тип = Тип("ОписаниеТипов") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAABoSURBVDhPY/j//z8DJZgizSCLB6EB" + Символы.ВК + Символы.ПС + "mpqa/52dHLFikBx6eGF4wczMFKTZG6QwNjbyPwiD2CAxkBxBA2Ca0Q2AGULQAGQF" + Символы.ВК + Символы.ПС + "yC7AFdV4Y2EkGwCKiYryov+geAdhEBs5dpADdBAmZVKzNgDOWtNtpSsLpgAAAABJ" + Символы.ВК + Символы.ПС + "RU5ErkJggg=="));
	ИначеЕсли Тип = Тип("Число") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB+SURBVDhPY2AYBVhDwKFr538QdmnbAsbO7Vv/" + Символы.ВК + Символы.ПС + "EwoqkIIGmCKQJmQNaHyQHIp6mFq4JpgGm779YDEsBoCEMVyFYgDIC86tm8GuQncR" + Символы.ВК + Символы.ПС + "1Eb8BsA0gQzBYgBhLyDbTpYLQM4EGQKLDaRAhTkdvxfIiQW4HlC8w9IAsemAUDoZ" + Символы.ВК + Символы.ПС + "xPIAH+BkJrGgRacAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Строка") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB1SURBVDhPY2AYLOA/0CEg3ECpg0CGgIFD1044" + Символы.ВК + Символы.ПС + "m5ChIFthLoBrcmnbQrQByAqpawDIGyBs37kTb9ggewHkXbArkL1ASnjAwwvZAFLC" + Символы.ВК + Символы.ПС + "A6sBSC5Adi3+KAf5G2QzWhhgDXBC0YwsT3TU4jKUqgaQZRjxgUhswAAA9DFDYfgs" + Символы.ВК + Символы.ПС + "T48AAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Булево") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAFPSURBVDhPY2CgBvCfqN8QvsjwPwiHLTD47zhZ" + Символы.ВК + Символы.ПС + "/L/zFKn/QbP1/7tPUv7vPUn9v32X1P+AiQb/QWox7ARpJBZ4Nxv8p8gA4zwxTJc4" + Символы.ВК + Символы.ПС + "TZXA64CA7bL//bfJgtUYZoqBaRSXOEwSBwsG7ZX7H7xPDsUwkGan6RL/rVpFweL6" + Символы.ВК + Символы.ПС + "KRDasxrJKzADQIrcl8r+B2kCAeu9ImDN+rlC/09ePgIxIBliAMgl8LBwmAhxAUgR" + Символы.ВК + Символы.ПС + "yBC3JTJgQ9A1g9ToJSFcAjcgdK4B3NkgQ0A2YtMMUuRarA93CdyAoBkIA2AuUfcT" + Символы.ВК + Символы.ПС + "gTsbOVCcciAGgFwCNyAQmECIBQ7pemClIJfADfDtJN4A+0SIASCXwA0AJU/PKgNg" + Символы.ВК + Символы.ПС + "yEr8d8nT+68TLfJfL1b8v32G9n/jGPn/FrGq/3WCgXyg5tqpRWADQC7BSJGkugTD" + Символы.ВК + Символы.ПС + "AM9KiEtcS/UJusQ+URczU5GTswEMEielMbjVjwAAAABJRU5ErkJggg=="));
	ИначеЕсли Тип = Тип("ВидДвиженияНакопления") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAz0lEQVQ4T2P4//8/RRirICkYQyB4" + Символы.ВК + Символы.ПС + "n/x/EEYXx4UxBAJ3yP33WSMDZKKKw/C6dev+gzCMD5cAafTbJPsfRDvPkAQbYlIm" + Символы.ВК + Символы.ПС + "ClcIwiCNiYmJKGJwhtcKGbBGEDarFvlvkCeEYgA2zSCMwgFhx6kSYM3IYrg0gzCG" + Символы.ВК + Символы.ПС + "gIa/6H/dZGEgE8LHpxmEsQrCMCHNIIxVEISJ0QzCWAWJ1QzCGALYND9Ldvt/014N" + Символы.ВК + Символы.ПС + "ju84acDl4YpAGJfNIE2HxBjgeIYoL1wNikKQAch8YjBWQVIwVkHi8X8GAOxy2Avy" + Символы.ВК + Символы.ПС + "wzimAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("ВидДвиженияБухгалтерии")
			ИЛИ Тип = Тип("ВидСчета") Тогда 
		Картинка = БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли Тип = Тип("Дата") Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAGPSURBVDhPrZPLSwJRFMb7k3rRH1GuWrRrHbQO" + Символы.ВК + Символы.ПС + "bNIcpUarTdSqx6akkoxCQkMqyBatIoJIIyeK6F2Olho6z69zb1hN2gNq4Mc55zvn" + Символы.ВК + Символы.ПС + "fPfCcOvq/uPTk2Ne3MbAOFmXcL0zCuQPeV1LY/O2c3c3p0Eix9fRAHnNAyt/8qUW" + Символы.ВК + Символы.ПС + "X/DBbrAxAXmp69fE50W7wfxqDHJqH/LRD9BMNnMLaWSg2sAsXsEsXMFisQLVFf2t" + Символы.ВК + Символы.ПС + "rxZqGxjZNIxcGk/9XVAcLZznmRGY2WOU4rO8NqlvlZTvDbgRLTH4EsWK6fcGd3sw" + Символы.ВК + Символы.ПС + "PqBTrjiawSLTK7lVvKl9A/0yAY3QL7fxJHRCaWtCccpN9avGau0iATN/XsMgEoF2" + Символы.ВК + Символы.ПС + "GiOi7/EsSkuN0M6YHuO5SrmZkyENeT/9hZVlqMdhqGk7mdYG0pegUe81D8NQjiAF" + Символы.ВК + Символы.ПС + "PHaDueVFqKkgyqlZPPa003A9Jz/ejXIy+KaxnvFwgEG/y24wFQrx6+sXWzDu93+k" + Символы.ВК + Символы.ПС + "TxTsBpOhkFcY8MI/LBJu+AMuQqhC8jvRKzohiIL9Mf3lRb8A8+FJK+/UducAAAAA" + Символы.ВК + Символы.ПС + "SUVORK5CYII="));
		Если ОписаниеТипов <> Неопределено Тогда
			Если ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC42/Ixj3wAAAcNJREFUOE+NU9suQ0EUPf/iDyTiI0g8eheJROIbCK8IEW2K" + Символы.ВК + Символы.ПС + "JkhoXB4qxKWkfdC4tklzSvUitIi6t6Vu1Vq6hjk9cwgeTiYzZ9Zlr71Ha2/VNPPX" + Символы.ВК + Символы.ПС + "2T/YPDM/h16HE119g2LlnufWu9wr4PnVJTinZqEfxHGXu8dToYCrTAZBfR9Drmnw" + Символы.ВК + Символы.ПС + "v5XEICgrYCekowTgrfSO12IRVU19yD+/IPf4hLv7PHwb23SikAgC9/IiguF9BUx1" + Символы.ВК + Символы.ПС + "EkjwdSaH9E0G3o1d8L50orE2p2vmG5jKJKCyBJ9d3iJ1fgXb2KSRicaA9GjcsE1l" + Символы.ВК + Символы.ПС + "aZsEB6m0UJbgo9MLrPl3RLAixG77MLIPeVGzGUxlElS32RFKnAplghOpc4QiCfQ4" + Символы.ВК + Символы.ПС + "Rj4JOnoHBDhXX6sE5gnG0DAcxsJmRAFftzRiL54ULTYc3GSzKjgQE8p0YFaOHp0h" + Символы.ВК + Символы.ПС + "cniCQDhaccBa2GeZtucLTGUSSNsSvJdIYtHrr2TALnBIWHMkmRbKVttmsB47xsDo" + Символы.ВК + Символы.ПС + "RKULrIMT5i0PCdO2BmYFu1d8ykQqk7i6vqXUnK2rETXTNpXdHh86v8IzBsk823Ri" + Символы.ВК + Символы.ПС + "G3eJPrNVTJuBsWba/vUtSCL5Gtlntorrv1/jT8/1r7MPBZCljqnY77MAAAAASUVO" + Символы.ВК + Символы.ПС + "RK5CYII="));
			ИначеЕсли ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAIuSURBVDhPrZPbTxNREMb5Y3xXo/HZZ9TE8GB8" + Символы.ВК + Символы.ПС + "8UFNaGJMrHcboNuKULsGGxUTKTWxSm2slhDTJVVMhBB80BgKQu1l2ULbZQu90QK9" + Символы.ВК + Символы.ПС + "bbef52yhTSOoD57kl8nMOfPNZCanre1/HHnxkQEJDhT+Yx9WZyxAfkH194rR9y11" + Символы.ВК + Символы.ПС + "v30aBgmqGM8cRnhcj1qe3zfmfW1Eq8DEM4Tfav4Zr4NpFXC85xD2zyL88y+QN5lU" + Символы.ВК + Символы.ПС + "An1s7+8CypYIZVNEjdpdiL8bb9yXN/cWqGZCqGZDyPVokD55TGX7BQslE0TRa1d9" + Символы.ВК + Символы.ПС + "hdzXiuk/C6hCJIlCkwJ8BBarHc+dbthcHgy9csEw8BRahu1uDJLOoLr2vQWZ+FTA" + Символы.ВК + Символы.ПС + "PGhDKp1FYVlAIJrARjik2tMXtU0RKiDHJ1EhyPEp5HTnkD5xBD3sEyTTGZRW4yhK" + Символы.ВК + Символы.ПС + "Ig5csCAhRCEEI+BjCXR2mevDdIyNoSJwBE/TRjywjrhAj1zYRrGi4LhxFOO+KOYi" + Символы.ВК + Символы.ПС + "KaxkS7hlerwjMOpGOehCOdQKNzGFZZZBsSQjKOVxtKMT3gUJ00tZTOru4Bqz08GI" + Символы.ВК + Символы.ПС + "+w3K/pco+e3YuNGBVPshlWHHOxRkBQev2BpMCzl4fCJ+SFu4rGfrHVidTrV9OfYZ" + Символы.ВК + Символы.ПС + "1fXZBvoHg1gS1xEJCpib59XK3JcAPsz4sSIlcUqjqwsMOZ0GXa8B/WaG0I1+UxdB" + Символы.ВК + Символы.ПС + "p1qyLohrSfC+RdL2bfi+ziNGktvPX8XZm/ebq9zvV9N9X2IGcP2eBVq9Cdq7D2li" + Символы.ВК + Символы.ПС + "I/kXf1WIeuufWvwAAAAASUVORK5CYII="));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAABFSURBVDhPY2AYPiA7O/s/CMN8BOMj0Q14fYvL" + Символы.ВК + Символы.ПС + "ADQDcRtCyACQQVA12A0hwQC4N1G8NKQMIC8M8AYgUgiTnw6GT5Yg2ScAOrt7BzPC" + Символы.ВК + Символы.ПС + "tocAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAH5SURBVDhPrZPfT1JhGMf507qQOaVaxpRumZCQ" + Символы.ВК + Символы.ПС + "5fLGiyhlaxEGGmvFKjEhRTaXsxyWDLDjRpScZjWYVMOSOQMn1Fi1fuqn8542Fp20" + Символы.ВК + Символы.ПС + "G8/2XJy9z/t93u/387463X5+r5LnnCtxLxH3UZYiNrX+/Bfre857nexnpyaxGLGy" + Символы.ВК + Символы.ПС + "szHI90IfP8p3WLjVzsflU2TCnewpICa+L4RITR2nmhuglD5JadlDMtBOMW5hfvjg" + Символы.ВК + Символы.ПС + "/wVyD1xMnDcg3TCRvGZEnnYQPKsnpmzeVUB4E9MzSv0s3UYKdfA130NN7uZTYZSY" + Символы.ВК + Символы.ПС + "30hZsjHnNfDPHIR3Nq+SuNJGJetBCnawsWjlzXwnxUcuVeDlXTPjA81MDZm0NlTv" + Символы.ВК + Символы.ПС + "eaXRd5gva2MkAkaqj+28SypZZEeI+o7wNmohcEavliZIIfBkskv1Kc8OEuzXM+Nu" + Символы.ВК + Символы.ПС + "UZsTkxfw9R7A39fEyG4Cwvt20UEudZlxbxu5xAlycRvZmJUX9y08f6iIXjyEPGNW" + Символы.ВК + Символы.ПС + "c9CcIB0yU33azYe8l9TEMSoZO5UlO5tpG6VUF+Vnl+oo77lbtQLSdRPbhd4GAp+z" + Символы.ВК + Символы.ПС + "Perl+ZvEtKtFKyDS31Imbq3crBNYX7CyplweQWJd9jeQ0FgQ6YuJ30pzdQKVlF1l" + Символы.ВК + Символы.ПС + "L0jUVmcbSGgFhgxOQWA1HWbM0UTU04o4atjZzKhDjxwPMXz6N4mY0rufD1j3C7vu" + Символы.ВК + Символы.ПС + "vw0TxEc9AAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("МоментВремени") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADuSURBVDhPY/j//z9FGIXjbmHBEaqlZQaikcXxYTjDxdqa" + Символы.ВК + Символы.ПС + "N0lW9k4BH9/vZBmZ2/4GBjzICnFhBgcHh/8gDDTgfz4///8SLq7/QEP+u1pZgcUJ" + Символы.ВК + Символы.ПС + "YbhJIBeAbC7k5f2dIi19O1BPjxvZJlwYhROvoMAWpapqCqKRxfFhrIKkYKyCMKyS" + Символы.ВК + Символы.ПС + "1N+gXT0ZyMSUcwKKg+QxJJCxcd5EIIVdDoRB8lglYBhoA5DCLgfCIHmsEjAMUgDE" + Символы.ВК + Символы.ПС + "NhHVq8DOhYo1QPk2IHmsGmEYpADkV4a0mRgYGgbYNcIwSAHIJopcgC6GjAkaQI1Y" + Символы.ВК + Символы.ПС + "aAD5FV0chCFh0N8AAGaTn8a00cVlAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("Граница") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADzSURBVDhPY/j//z8KdnBwAFKoYvgwCidMQ4Pbxcrqf5CO" + Символы.ВК + Символы.ПС + "DheyOD4MZ8QrKIilSkndz+fn/58oJ3fTzdKSKEPATnawt//vYW7+v4CP738JF9f/" + Символы.ВК + Символы.ПС + "XCGh/y7W1v/BcgQw3KQYJSWxFCmpu3kCAiAXXHe3sOBEtgkXRuFEqqmxgmz2NzBg" + Символы.ВК + Символы.ПС + "QRbHhzEEQM5CF8OHMQSQDVBJ6m/Qrp4M5yNjJ6A4SB5DAtkA47yJcDY2DJLHEERz" + Символы.ВК + Символы.ПС + "AZyNDYPkMQTRDQBim4jqVWDnQsUaoHwbkDxBA0B+ZUibiYGhYUDYAJBNFLkAxsaG" + Символы.ВК + Символы.ПС + "CRpAjVhoAPkVxkfGkDDobwAAFxmTw3vLbs8AAAAASUVORK5CYII="));
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
&НаКлиенте
// Получает тип клиента строкой
//
// Возвращаемое значение:
//   Строка	- Представление типа клиента
Функция УКО_ОбщегоНазначенияКлиент_ПредставлениеТипаКлиента() Экспорт
	
	ТипКлиента = "";
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ТипКлиента = НСтр("ru = 'Толстый клиент'; en = 'Thick client'");
	#ИначеЕсли ТонкийКлиент Тогда
		ТипКлиента = НСтр("ru = 'Тонкий клиент'; en = 'Thin client'");
	#ИначеЕсли ВебКлиент Тогда
		ТипКлиента = НСтр("ru = 'WEB клиент'; en = 'Web client'");
	#КонецЕсли
	
	Возврат ТипКлиента;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это простой тип
//
// Параметры:
//   Тип - Тип - Тип
//
// Возвращаемое значение:
//   Булево - Если тип простой
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип)
	
	Результат = Тип = Тип("Null") ИЛИ Тип = Тип("Неопределено") ИЛИ Тип = Тип("Число") ИЛИ Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") 
				ИЛИ Тип = Тип("УникальныйИдентификатор") ИЛИ Тип = Тип("ХранилищеЗначения") ИЛИ Тип = Тип("Тип") ИЛИ Тип = Тип("МоментВремени") 
				ИЛИ Тип = Тип("Структура") ИЛИ Тип = Тип("ОписаниеТипов") ИЛИ Тип = Тип("ВидДвиженияБухгалтерии") ИЛИ Тип = Тип("ВидДвиженияНакопления")
				ИЛИ Тип = Тип("ВидСчета") ИЛИ Строка(Тип) = "НеизвестныйОбъект";
				
	#Если Сервер Тогда
		Результат = Результат ИЛИ Тип = Тип("РезультатЗапроса");
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Пустой обработчик оповещений
//
// Параметры:
//	Результат - Произвольный - Результат
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//
Процедура УКО_ОбщегоНазначенияКлиент_ПустойОбработчикОповещенийСтандартный(Результат, ДополнительныеПараметры) Экспорт 
	
	ПустойОбработчик = Истина;
	
КонецПроцедуры
&НаКлиенте
// Пустой обработчик оповещений
//
// Параметры:
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//
Процедура УКО_ОбщегоНазначенияКлиент_ПустойОбработчикОповещенийДополнительныеПараметры(ДополнительныеПараметры) Экспорт 
	
	ПустойОбработчик = Истина;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает адрес YouTube канала расширения
// Возвращаемое значение:
//   Строка	- Адрес YouTube канала расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_YouTubeКаналРасширения() Экспорт
	
	Возврат "https://www.youtube.com/channel/UC7sITw79ClRfZLLj7-smFAw";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверят текущую платформу, не ниже!
//
// Параметры:
//   Версия - Строка - версия которая сверяется с текущей например, "8.3.10.1089"
//
// Возвращаемое значение:
//   Булево - Истина, если версия ниже проверяемой.
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ВерсияПлатформыНеНиже(Версия) Экспорт 
	
	Возврат (УКО_ОбщегоНазначенияКлиентСервер_СравнениеВерсииПлатформыСТекущей(Версия) = -1);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает представление времени в миллисекундах
//
// Параметры:
//   ЧислоМиллисекунд - Число - Число миллисекунд
//
// Возвращаемое значение:
//   Строка - Представление времени в миллисекундах
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ПредставлениеВремениВМс(ЧислоМиллисекунд) Экспорт
	
	Если ЧислоМиллисекунд = Неопределено Тогда
		Возврат "<?>";
	ИначеЕсли ЧислоМиллисекунд = 0 Тогда
		Возврат НСтр("ru = '< 1 мс'; en = '< 1 ms'");
	ИначеЕсли ЧислоМиллисекунд < 100 Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 мс'; en = '%1 ms'"), Строка(ЧислоМиллисекунд));
	Иначе
		
		ВремяВСекундах = Окр(ЧислоМиллисекунд / 1000, 1);
		ВремяМинут = Цел(ВремяВСекундах / 60);
		ВремяВСекундах = ВремяВСекундах % 60;
		
		ЭлементыПредставления = Новый Массив;
		Представление = "";
		Если ЗначениеЗаполнено(ВремяМинут) Тогда
			ЭлементыПредставления.Добавить(СтрШаблон(НСтр("ru = '%1 мин.'; en = '%1 min.'"), Формат(ВремяМинут, "ЧГ=")));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВремяВСекундах) Тогда
			ЭлементыПредставления.Добавить(СтрШаблон(НСтр("ru = '%1 с.'; en = '%1 s.'"), ВремяВСекундах));
		КонецЕсли;
		
		Возврат СтрСоединить(ЭлементыПредставления, " ");
		
	КонецЕсли;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Описание типов строка)
// Параметры:
//   ДлинаСтроки - Число - Длина строки
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов строка
Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(ДлинаСтроки = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает цвет фона для элемента который редактируется/не редактируется
// Параметры:
//   Редактируется - Булево - Редактируется
// Возвращаемое значение:
//   Цвет - Цвет фона для элемента который редактируется/не редактируется
Функция УКО_ОбщегоНазначенияКлиентСервер_ЦветФонаЭлементРедактируется(Редактируется = Истина) Экспорт
	
	Если Редактируется Тогда
		Возврат Новый Цвет(255,255,255);
	Иначе
		Возврат Новый Цвет(240,240,240);
	КонецЕсли;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает первый файл из каталога по маске
//
// Параметры:
//	Путь - Строка - Путь
//	Маска - Строка - Маска файлов
//
// Возвращаемое значение:
//   Строка - Полное имя файла 
//
Функция УКО_ФайлыКлиентСервер_ПервыйИзКаталога(Путь, Маска = "*.*") Экспорт
	
	НайденныеФайлы = НайтиФайлы(Путь, Маска);
	Если ЗначениеЗаполнено(НайденныеФайлы) Тогда
		Результат = НайденныеФайлы[0].ПолноеИмя;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает шрифт жирный
// Возвращаемое значение:
//   Шрифт - Шрифт
Функция УКО_ОбщегоНазначенияКлиентСервер_ШрифтЖирный() Экспорт
	Возврат Новый Шрифт(,,Истина);
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает строку фильтра для диалога выбора файла
//
// Параметры:
//   ПоддерживаемыеФорматы - СписокЗначений - Формат (Представление..., Значение - Расширение)
//   ВключаяВсеФайлы - Булево - Включать все файлы
//
// Возвращаемое значение:
//   Строку - Фильтр для диалога выбора файла
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы, ВключаяВсеФайлы = Истина) Экспорт
	
	Фильтры = Новый Массив;
	
	Если ПоддерживаемыеФорматы.Количество() > 1 Тогда
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(НСтр("ru = 'Все поддерживаемые форматы'; en = 'All supported format'"), СтрСоединить(ПоддерживаемыеФорматы.ВыгрузитьЗначения(), ";")));
	КонецЕсли;
	
	Для Каждого ПоддерживаемыйФормат Из ПоддерживаемыеФорматы Цикл 
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(ПоддерживаемыйФормат.Представление, ПоддерживаемыйФормат.Значение));
	КонецЦикла;

	Если ВключаяВсеФайлы Тогда
		Фильтры.Добавить(УКО_ОбщегоНазначенияКлиентСервер_СтрокаФильтраФайлов(НСтр("ru = 'Все файлы'; en = 'All files'"), ПолучитьМаскуВсеФайлы()));
	КонецЕсли;
	
	Возврат СтрСоединить(Фильтры, "|");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Создает копию объекта
// Параметры:
//   Объект - Произвольный - Произвольный объект
// Возвращаемое значение:
//   Произвольный - Копия объекта
//
Функция УКО_ОбщегоНазначенияКлиентСервер_СкопироватьОбъект(Объект) Экспорт
	
	КопияОбъекта = Новый (ТипЗнч(Объект));
	Если ТипЗнч(Объект) = Тип ("Соответствие") Тогда
		
		Для Каждого Элемент Из Объект Цикл
			КопияОбъекта.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип ("Структура") Тогда
		
		Для Каждого Элемент Из Объект Цикл
			КопияОбъекта.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КопияОбъекта;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает представление ошибки в тексте
// Параметры:
//   Ошибка - Ошибка - Ошибка
// Возвращаемое значение:
//   Строка	- Представление ошибки в тексте
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ПредставлениеОшибкиВТексте(Ошибка) Экспорт
	
	Если ТипЗнч(Ошибка) = Тип("Строка") Тогда
		Результат = Ошибка;
	Иначе
		Результат = СтрШаблон("(%1, %2) %3", УКО_СтрокиКлиентСервер_ЧислоВСтроку(Ошибка.НомерСтроки), Ошибка.НомерСтолбца, Ошибка.Текст);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает список значений конструируя на основании значения (добавляем значение в список)
//
// Параметры:
//   Значение - Произвольный - Значение
//
// Возвращаемое значение:
//   СписокЗначений - Результат
//
Функция УКО_ОбщегоНазначенияКлиентСервер_НовыйСписокЗначений(Значение) Экспорт
	
	Результат = Новый СписокЗначений;
	Результат.Добавить(Значение);
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это режим выполнения с результатом
//
// Параметры:
//  Режим  - Перечисление.УКО_РежимВыполненияЗапроса, Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных - Режим выполнения
//
// Возвращаемое значение:
//   Булево - Истина, Режим выполнения с результатом
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоРежимВыполненияСРезультатом(Режим) Экспорт
	
	Возврат Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение"
		ИЛИ Режим = "Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц"
		ИЛИ Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Выполнение";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов, ИсключатьNull = Истина)
	
	Результат = Неопределено;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ИсключатьNull И Тип = Тип("Null") Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = Тип;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаСервереБезКонтекста
// Получает картинку по типу
//
// Параметры:
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип) Экспорт
	
	Если Тип = Тип("ТаблицаЗначений") Тогда 
		Результат = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъектаКоллекцииМетаданных = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(ОбъектМетаданных.ПолноеИмя());
			Результат = БиблиотекаКартинок[ИмяОбъектаКоллекцииМетаданных];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Обработка команды ссылка в СоответствияОбъектовИнформационныхБаз
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_КомандаСсылкаВСоответствияОбъектовИнформационныхБаз(ТабличныйДокумент, АдресДанныхРасшифровки) Экспорт
	
	Расшифровка = Неопределено;
	Если УКО_ТабличныйДокументКлиент_РасшифровкаЭтоСсылка(ТабличныйДокумент, АдресДанныхРасшифровки, Расшифровка, Истина) Тогда
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("УникальныйИдентификаторИсточника", Расшифровка);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.СоответствияОбъектовИнформационныхБаз.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Сохраняет текст в файл
//
// Параметры:
//   ИмяФайла - Строка - Полное имя файла
//   Текст - Строка - Сохраняемый текст
//
Процедура УКО_ОбщегоНазначенияКлиентСервер_СохранитьТекстВФайл(ИмяФайла, Текст) Экспорт 
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает цвет текста важной гиперссылки
//
// Возвращаемое значение:
//   Цвет - Цвет текста
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаВажнойГиперссылки() Экспорт
	
	Возврат Новый Цвет(125,0,0); 
	
КонецФункции
&НаКлиенте

Функция УКО_ПроверкаОбновленийКлиент_АдресСервера()
	
	Возврат "q92801lf.beget.tech";
	
КонецФункции
&НаСервере
// Возвращает XML текст для объекта системы компоновки данных
//
// Параметры:
//   Объект - СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,
//				ПользовательскиеНастройкиКомпоновкиДанных - Объект системы компоновки данных
//
// Возвращаемое значение:
//   Строка - XML текст объекта
//
Функция УКО_СКДВызовСервера_XMLТекст(Знач Объект) Экспорт // Знач - нужен иначе во внешней обработке не работает происходит изменение КомпоновщикНастроек.Настройки
	
	Возврат ОбъектОбработки().УКО_СКД_XMLТекст(Объект);
	
КонецФункции
&НаСервере
// Возвращает схему компоновки данных по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст схемы
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - Схема компоновки данных
//
Функция УКО_СКДВызовСервера_СхемаКомпоновкиДанных(Текст) Экспорт
	
	Возврат ОбъектОбработки().УКО_СКД_СхемаКомпоновкиДанных(Текст);

КонецФункции
&НаСервере
// Проверяет текст схемы компоновки данных
//
// Параметры:
//	Текст - Строка - XML текст схемы компоновки данных
//
// Возвращаемое значение:
//	Строка - Текст ошибки
//
Функция УКО_СКДВызовСервера_ПроверитьТекст(Текст) Экспорт
	
	Возврат ОбъектОбработки().УКО_СКД_ПроверитьТекст(Текст);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает строку фильтра для диалога выбора файла
// Возвращаемое значение:
//   Строку - Фильтр для диалога выбора файла
Функция УКО_СКДКлиентСервер_ФильтрФайловXML() Экспорт
	
	ПоддерживаемыеФорматы = Новый СписокЗначений;
	ПоддерживаемыеФорматы.Добавить("*.xml", НСтр("ru = 'Файл схемы компоновки данных'; en = 'Data layout diagram file'"));
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ФильтрФайлов(ПоддерживаемыеФорматы);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает короткое представление имени файла
// Параметры:
//   ПолноеИмяФайла - Строка - Полное имя файла
// Возвращаемое значение:
//   Строка - короткое представление имени файла
Функция УКО_СтрокиКлиентСервер_ПолноеИмяФайлаКратко(ПолноеИмяФайла) Экспорт
	
	ПозицияСимвола = СтрНайти(ПолноеИмяФайла, ПолучитьРазделительПути(), НаправлениеПоиска.СКонца);
	ПутьКФайлу = Лев(ПолноеИмяФайла, ПозицияСимвола - 1);
	ИмяФайла = Сред(ПолноеИмяФайла, ПозицияСимвола + 1);
	
	КраткоеПолноеИмяФайла = "";
	Если СтрДлина(ПутьКФайлу) > 7 Тогда
		ПутьКФайлу = Лев(ПутьКФайлу, 7) + "...";
		КраткоеПолноеИмяФайла = ПутьКФайлу + ПолучитьРазделительПути() + ИмяФайла;
	Иначе 
		КраткоеПолноеИмяФайла = ПолноеИмяФайла;
	КонецЕсли;	
	
	Возврат КраткоеПолноеИмяФайла;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст "Временная таблица" на нужном языке
//
// Возвращаемое значение:
//   Строка - текст "Временная таблица" на нужном языке
//
Функция УКО_СтрокиКлиентСервер_ИмяВнешнегоИсточника() Экспорт
	
	Возврат НСтр("ru = 'Таблица'; en = 'Table'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает новый идентификатор который генерируется с учетом используемых
//
// Параметры:
//   Префикс - Строка - Префикс
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Строка - Новый идентификатор
//
Функция УКО_СтрокиКлиентСервер_НовыйИдентификатор(Префикс, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	НачальныйНомер = 0;
	
	Для Каждого ИспользуемыйИдентификатор Из ЗанятыеИдентификаторы Цикл 
		
		Если СтрСравнить(Лев(ИспользуемыйИдентификатор, СтрДлина(Префикс)), Префикс) = 0 Тогда // Строка начинается с префикса
			
			ИспользуемыйНомер = Сред(ИспользуемыйИдентификатор, СтрДлина(Префикс) + 1);
			
			Если УКО_СтрокиКлиентСервер_ЭтоЦелоеЧисло(ИспользуемыйНомер) Тогда
				НачальныйНомер = Макс(НачальныйНомер, Число(ИспользуемыйНомер));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрШаблон("%1%2", Префикс, УКО_СтрокиКлиентСервер_ЧислоВСтроку(НачальныйНомер + 1));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет является ли строка UID
//
// Параметры:
//   ПроверяемаяСтрока - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, это UID
//
Функция УКО_СтрокиКлиентСервер_ЭтоUID(ПроверяемаяСтрока) Экспорт
	
	Попытка
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ПроверяемаяСтрока);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_ЭтоЦелоеЧисло(Строка)
	
	Результат = Истина;
	
	Для Счетчик = 1 По СтрДлина(Строка) Цикл 
		
		Если СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Счетчик, 1)) = 0 Тогда 
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Вычисляет суммы выделенных ячеек табличного документа.
//
// Параметры:
//	ПолеСумма - Число - Сумма ячеек.
//	Результат - ТабличныйДокумент - Табличный документ с ячейками.
//	КэшВыделеннойОбласти - Структура - Содержит ранее рассчитанные значения ячеек.
//	НеобходимоВычислятьНаСервере - Булево - Признак того, что необходим вызов сервера.
//
Процедура УКО_ТабличныйДокументКлиент_ВычислитьСуммуВыделенныхЯчеек(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если УКО_ТабличныйДокументКлиент_НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено.
				ИЛИ КэшВыделеннойОбласти.Свойство("T") Тогда // Выделен весь табличный документ (Ctrl+A).
				
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
				
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте.
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь)
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов.
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
									
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									
									ЧислоВЯчейке  = Число(УКО_СтрокиКлиентСервер_ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
									
								КонецЕсли;
							КонецЕсли;
							
						Исключение
							
							НеБудемОбрабатыватьИсключение = Истина;
							
						КонецПопытки;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
				
			Иначе
				
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше.
				НеобходимоВычислятьНаСервере = Истина;
				
			КонецЕсли;
		Иначе
			
			// Вычислим сумму ячеек на сервере.
			НеобходимоВычислятьНаСервере = Истина;
			
		КонецЕсли;
	Иначе
		
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработчик в табличном документе "ПриАктивизацииОбласти"
//
// Параметры:
//	Форма - Форма - Форма
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//
Процедура УКО_ТабличныйДокументКлиент_ПриАктивизацииОбластиОбработка(Форма, ТабличныйДокумент) Экспорт
	
	НеобходимоВычислятьНаСервере = Ложь;
	УКО_ТабличныйДокументКлиент_ВычислитьСуммуВыделенныхЯчеек(Форма["ПолеСумма"], ТабличныйДокумент, Форма["КэшВыделеннойОбласти"], НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		АдресРезультата = Форма.ТекущийРезультат.Адрес;
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
			Форма["ПолеСумма"] = УКО_ТабличныйДокументВызовСервера_ВычислитьСуммуВыделенныхЯчеек(АдресРезультата, Форма["КэшВыделеннойОбласти"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Выполняет замену символов в строке.
// Предназначена для простых случаев, например, для замены латиницы на похожие кириллические символы.
//
// Параметры:
//  ЗаменяемыеСимволы - Строка - строка символов, каждый из которых требует замены;
//  Значение          - Строка - исходная строка, в которой требуется замена символов;
//  СимволыЗамены     - Строка - строка символов, на каждый из которых нужно заменить символы параметра
//                               ЗаменяемыеСимволы.
// 
// Возвращаемое значение:
//  Строка - строка после замены символов.
//
Функция УКО_СтрокиКлиентСервер_ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены) Экспорт
	
	Результат = Значение;
	
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), Сред(СимволыЗамены, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Копирует текст в буфер обмена (Через HTML)
//
// Параметры:
//	Текст - Строка - Текст
Процедура УКО_БуферОбменаКлиент_Копировать(Текст) Экспорт
	
    ОбъектHTML = Новый COMОбъект("htmlfile");
    ОбъектHTML.ParentWindow.ClipboardData.Setdata("Text", Текст);
	
КонецПроцедуры
&НаКлиенте

Функция УКО_ТабличныйДокументКлиент_РасшифровкаЭтоСсылка(ТабличныйДокумент, АдресДанныхРасшифровки, Расшифровка = Неопределено, ИсключаяПеречисления = Ложь)

	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, ТекущаяОбласть);
	
	Если Расшифровка = Неопределено Тогда
		Результат = Ложь;
	Иначе
		Результат = УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка, ИсключаяПеречисления);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это является ли значение ссылкой
//
// Параметры:
//  Ссылка  - Ссылка - Ссылка
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, это ссылка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Ссылка, ИсключаяПеречисления = Ложь) Экспорт
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(ТипЗнч(Ссылка), ИсключаяПеречисления);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет это ссылочный тип
//
// Параметры:
//  Тип  - Тип - Тип
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, ссылочный тип
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип, ИсключаяПеречисления = Ложь) Экспорт
	
	ПростойТип = УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип);
	Результат = Не ПростойТип;
	Если ИсключаяПеречисления Тогда 
		
		#Если Сервер Тогда
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Результат = Ложь;  
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Обработка команды ссылка в ПубличныеИдентификаторыСинхронизируемыхОбъектов
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_КомандаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов(ТабличныйДокумент, АдресДанныхРасшифровки) Экспорт
	
	Расшифровка = Неопределено;
	Если УКО_ТабличныйДокументКлиент_РасшифровкаЭтоСсылка(ТабличныйДокумент, АдресДанныхРасшифровки, Расшифровка, Истина) Тогда
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("Ссылка", Расшифровка);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработка команды найти ссылки табличного документа
//
// Параметры:
//	Форма - Форма - Форма
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_НайтиСсылки(Форма, ТабличныйДокумент, АдресДанныхРасшифровки) Экспорт
	
	Расшифровка = Неопределено;
	Если УКО_ТабличныйДокументКлиент_РасшифровкаЭтоСсылка(ТабличныйДокумент, АдресДанныхРасшифровки, Расшифровка) Тогда
		
		Если Форма.ПодключенаОбработкаПоискаСсылок = Неопределено Тогда
			Форма.ПодключенаОбработкаПоискаСсылок = Истина;
			УКО_ОбщегоНазначенияВызовСервера_ПодключитьОбработкуПоискаСсылок();
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("RequiredObject", Расшифровка);
	    ОткрытьФорму("ВнешняяОбработка.StandardFindByRef.Форма", ПараметрыФормы,, Новый УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры
&НаСервере
// Подключает стандартную обработку поиска ссылок
//
Процедура УКО_ОбщегоНазначенияВызовСервера_ПодключитьОбработкуПоискаСсылок() Экспорт
	
	ВнешниеОбработки.Подключить("v8res://mngbase/StandardFindByRef.epf", "StandardFindByRef");
	
КонецПроцедуры
&НаСервере
// Получает адрес таблицы в расшифровки
//
// Параметры:
//  АдресДанныхРасшифровки  - Адрес - Адрес данных расшифровки во временном хранилище
//  ЗначениеРасшифровки  - Произвольный - Значение расшифровки
//
// Возвращаемое значение:
//   Строка - Адрес таблицы значений в расшифровке
//
Функция УКО_ОбщегоНазначенияВызовСервера_АдресТаблицыЗначенийПоРасшифровке(АдресДанныхРасшифровки, ЗначениеРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ТаблицаЗначений = ДанныеРасшифровки[ЗначениеРасшифровки].Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначений);
	
КонецФункции
&НаКлиенте
// Открывает таблицу значений в отдельной форме
//
// Параметры:
//	Адрес - Строка - Адрес значения
//	ФормаВладелец - Форма - Форма владелец
//	Редактирование - Булево - Возможность редактирования
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//		* ДополнениеЗаголовка - Строка - Дополнение заголовка
//		* НастройкаИндексацииКолонок - Булево - Настраивать индексацию колонок
//		* ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии
//
Процедура УКО_ФормыКлиент_ОткрытьТаблицуЗначений(Адрес, ФормаВладелец, Редактирование = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Адрес", Адрес);
	ПараметрыФормы.Вставить("Редактирование", Редактирование);
	
	ОписаниеОповещенияОЗакрытии = Неопределено;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		Если ДополнительныеПараметры.Свойство("ДополнениеЗаголовка") Тогда
			ПараметрыФормы.Вставить("ДополнениеЗаголовка", ДополнительныеПараметры.ДополнениеЗаголовка);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("НастройкаИндексацииКолонок") Тогда
			ПараметрыФормы.Вставить("НастройкаИндексацииКолонок", ДополнительныеПараметры.НастройкаИндексацииКолонок);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОписаниеОповещенияОЗакрытии") Тогда
			ОписаниеОповещенияОЗакрытии = ДополнительныеПараметры.ОписаниеОповещенияОЗакрытии
		КонецЕсли;
		
	КонецЕсли;
	
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеТаблицыЗначений", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры
&НаКлиенте
// Обработчик ПриАктивизацииОбласти в табличном документа
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	ОписаниеАктивнойОбласти - Структура - Описание активной области
//	АдресДанныхРасшифровки - Строка - Адрес данных расшифровки во временном хранилище
//
Процедура УКО_ТабличныйДокументКлиент_ОбработчикПриАктивизацииОбласти(Элемент, ТабличныйДокумент, ОписаниеАктивнойОбласти, АдресДанныхРасшифровки) Экспорт
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Расшифровка = УКО_ТабличныйДокументКлиент_РасшифровкаОбласти(АдресДанныхРасшифровки, ТекущаяОбласть);
	
	// Обновить элементы управления
	МенюГруппа = Элемент.КонтекстноеМеню.ПодчиненныеЭлементы.ТабличныйДокументРезультатКонтекстноеМенюГруппа;
	КнопкаКопироватьUIDСсылки = МенюГруппа.ПодчиненныеЭлементы.КнопкаКопироватьUIDСсылки;
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке = МенюГруппа.ПодчиненныеЭлементы.КнопкаКопироватьСсылкуКодНаВстроенномЯзыке;
	
	РасшифровкаЭтоСсылка = (Расшифровка <> Неопределено) И УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка);
	РасшифровкаЭтоСсылкаБезПеречислений = (Расшифровка <> Неопределено) И УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылка(Расшифровка, Ложь);
	
	КнопкаКопироватьUIDСсылки.Доступность = РасшифровкаЭтоСсылка;
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке.Доступность = РасшифровкаЭтоСсылка;
	
	Попытка
		
		КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов = МенюГруппа.ПодчиненныеЭлементы.КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов;
		КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз = МенюГруппа.ПодчиненныеЭлементы.КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз;
		КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов.Доступность = РасшифровкаЭтоСсылкаБезПеречислений И Не Расшифровка.Пустая();
		КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз.Доступность = РасшифровкаЭтоСсылкаБезПеречислений И Не Расшифровка.Пустая();
		
	Исключение
		
		НеОбрабатываемИсключение = Истина;
		
	КонецПопытки;
	
	// Снятие установка выделения
	НомерАктивнойСтроки = ТекущаяОбласть.Низ;
	
	КоличествоКолонок = 0;
	Пока Истина Цикл 
		
		ТипЛинии = ТабличныйДокумент.Область(НомерАктивнойСтроки, КоличествоКолонок + 1).ГраницаСправа.ТипЛинии;
		
		Если ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.Сплошная Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоКолонок = КоличествоКолонок + 1;
		
	КонецЦикла;
	
	УКО_ТабличныйДокументКлиент_ВосстановитьФонОбласти(ТабличныйДокумент, ОписаниеАктивнойОбласти);
	
	Если КоличествоКолонок > 0 Тогда
		АктивнаяСтрокаОбласть = ТабличныйДокумент.Область(НомерАктивнойСтроки, 1, НомерАктивнойСтроки, КоличествоКолонок);
		ОписаниеАктивнойОбласти = Новый Структура("НомерСтроки, КоличествоКолонок, ЦветФона", НомерАктивнойСтроки, КоличествоКолонок, АктивнаяСтрокаОбласть.ЦветФона);
		АктивнаяСтрокаОбласть.ЦветФона = WebЦвета.СветлоЗолотистый;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте

Процедура УКО_ТабличныйДокументКлиент_ВосстановитьФонОбласти(ТабличныйДокумент, ОписаниеАктивнойОбласти)
	
	Если ЗначениеЗаполнено(ОписаниеАктивнойОбласти) Тогда
		
		Если ОписаниеАктивнойОбласти.ЦветФона <> Неопределено Тогда // Иногда непонятным образом попадает значение неопределено (возможно при переключении результатов запрос, СКД) 
			СтрокаОбласть = ТабличныйДокумент.Область(ОписаниеАктивнойОбласти.НомерСтроки, 1, ОписаниеАктивнойОбласти.НомерСтроки, ОписаниеАктивнойОбласти.КоличествоКолонок);
			СтрокаОбласть.ЦветФона = ОписаниеАктивнойОбласти.ЦветФона;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Восстанавливает фон области табличного документа по описанию
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//	Формат - Строка - Формат выгрузки
//	ОписаниеАктивнойОбласти - Структура - Описание активной области
//
Процедура УКО_ТабличныйДокументКлиент_ПодготовитьДляЭкспорта(ТабличныйДокумент, Формат, ОписаниеАктивнойОбласти) Экспорт
	
	УКО_ТабличныйДокументКлиент_ВосстановитьФонОбласти(ТабличныйДокумент, ОписаниеАктивнойОбласти);
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	Если Формат = "MXL" Тогда
		
		// Установим защиту всех ячеек
		Для НомерСтроки = 1 По ВысотаТаблицы Цикл 
			ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, ШиринаТаблицы).Защита = Истина;
		КонецЦикла;
		
	ИначеЕсли СтрНайти(Формат, "XLS") Тогда
		
		// Убираем картинки колонок (проблема в том что при выгрузке в Excel колонки с картинкой в одной колонки их будет две)
		Для НомерСтроки = 1 По Мин(5, ВысотаТаблицы) Цикл 
			
			Для НомерСтолбца = 1 По ШиринаТаблицы Цикл 
				ТабличныйДокумент.Область(НомерСтроки, НомерСтолбца).Картинка = Неопределено;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Устанавливает фиксацию шапки табличного документа
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//   Зафиксировать - Булево - Признак фиксации
Процедура УКО_ТабличныйДокументКлиентСервер_ЗафиксироватьШапку(ТабличныйДокумент, Зафиксировать = Истина) Экспорт //ЗафиксироватьШапкуТабличногоДокумента
	
	Если Зафиксировать Тогда
		ТабличныйДокумент.ФиксацияСлева = 1;
		ТабличныйДокумент.ФиксацияСверху = 3;
	Иначе
		ТабличныйДокумент.ФиксацияСлева = 0;
		ТабличныйДокумент.ФиксацияСверху = 0;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Обновляем подменю уровень результата в табличном документе
//
// Параметры:
//  Элемент  - Элемент - Элемент
//  Форма  - Форма - Форма
//  ТабличныйДокумент  - ТабличныйДокумент - ТабличныйДокумент
//
Процедура УКО_ТабличныйДокументКлиентСервер_ОбновитьЭлементыПодменюУровеньГруппировок(Форма, ТабличныйДокумент, Элемент) Экспорт
	
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	КоличествоЭлементовУровеньГруппировки = Элемент.ПодчиненныеЭлементы.Количество();
	
	НомерУровня = 1;
	Для Каждого ЭлементПодменю Из Элемент.ПодчиненныеЭлементы Цикл 
		ЭлементПодменю.Видимость = (НомерУровня <= КоличествоУровнейГруппировокСтрок);
		НомерУровня = НомерУровня + 1;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
// Обработка очистки значения параметра в форме
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура УКО_ФормыКлиент_ОчисткаЗначенияПараметраВФорме(Элемент, СтандартнаяОбработка) Экспорт
	
	Если Элемент.КнопкаОчистки = Ложь Тогда
		Элемент.ВыбиратьТип = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработка выбора значения параметра в форме
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Элемент - Элемент - Элемент
//	Значение - Произвольный - Значение параметра
//	ОписаниеТипов - ОписаниеТипов - Описание типов параметра
//	СтандартнаяОбработка - Булево - Стандартная обработка
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения (завершение)
//	РедактированиеСписка - Булево - Редактирование списка
//
Процедура УКО_ФормыКлиент_ВводЗначенияПараметраВФорме(Заголовок, Элемент, Значение, ОписаниеТипов, СтандартнаяОбработка, ОписаниеОповещенияЗавершение, РедактированиеСписка = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемоеЗначение = УКО_ФормыКлиент_ПроверяемоеЗначениеПараметра(Значение, ОписаниеТипов);
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Тип") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Заголовок", Заголовок);
		УКО_ФормыКлиент_ОткрытьРедактированиеТипаЗначения(Элемент, "Перечисление.УКО_РежимРедактированияТипаЗначения.РедактированиеТипа",
											Значение, ОписаниеОповещенияЗавершение, ДополнительныеПараметры);

	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("УникальныйИдентификатор") Тогда
		
		УКО_ФормыКлиент_ОткрытьРедактированиеУникальногоИдентификатора(Заголовок, Значение, Элемент, ОписаниеОповещенияЗавершение);
		
	ИначеЕсли Элемент.ВыбиратьТип Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Заголовок", Заголовок);
		Если РедактированиеСписка Тогда
			ДополнительныеПараметры.Вставить("ИсключаемыеТипы", "Граница,МоментВремени");
		КонецЕсли;
		
		УКО_ФормыКлиент_ОткрытьРедактированиеТипаЗначения(Элемент, "Перечисление.УКО_РежимРедактированияТипаЗначения.ВыборТипа",
											ОписаниеТипов, ОписаниеОповещенияЗавершение, ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
// Открывает форму редактирования Уникального идентификатора
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - УникальныйИдентификатор - Уникальный идентификатор
//	Владелец - Форма/Элемент - Владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеУникальногоИдентификатора(Заголовок, Значение, Владелец, ОписаниеОповещенияЗавершение) Экспорт
	
	ПараметрыФормы = Новый Структура("Заголовок, Значение", Заголовок, Значение);
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеУникальногоИдентификатора", ПараметрыФормы, Владелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиенте

Функция УКО_ФормыКлиент_ПроверяемоеЗначениеПараметра(Значение, ОписаниеТипов)
	
	Если ТипЗнч(Значение) = Тип("Структура")
			ИЛИ ТипЗнч(Значение) = Тип("МоментВремени")
			ИЛИ ТипЗнч(Значение) = Тип("Граница")
			ИЛИ ОписаниеТипов = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		Результат = Значение;
	Иначе
		Результат = ОписаниеТипов.ПривестиЗначение(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Обработка активизации строки параметра в форме
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	Значение - Произвольный - Значение параметра
//	ОписаниеТипов - ОписаниеТипов - Описание типов параметра
//	РедактированиеСписка - Булево - Редактирование производится в списке
//
Процедура УКО_ФормыКлиент_АктивизацияСтрокиЗначенияПараметраВФорме(Элемент, Значение, Знач ОписаниеТипов, РедактированиеСписка = Ложь) Экспорт
	
	РедактированиеТекста = Ложь;
	КнопкаВыбора = Истина;
	КнопкаОчистки = Истина;
	КнопкаВыпадающегоСписка = Ложь;
	ОграничениеТипа = Ложь;
	Элемент.СписокВыбора.Очистить();
	
	ЗначениеСписок = (ТипЗнч(Значение) = Тип("СписокЗначений"));
	СложноеЗначение = (ТипЗнч(Значение) = Тип("Структура"));
	Если ТипЗнч(ОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		СоставнойТип = ОписаниеТипов.Типы().Количество() <> 1;
	Иначе
		СоставнойТип = Ложь;
	КонецЕсли;
	
	ПроверяемоеЗначение = УКО_ФормыКлиент_ПроверяемоеЗначениеПараметра(Значение, ОписаниеТипов);
	
	Если СоставнойТип Тогда
		ВыбиратьТип = (ПроверяемоеЗначение = Неопределено) И НЕ ЗначениеСписок;
	Иначе
		ВыбиратьТип = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("МоментВремени") Тогда
		
		Элемент.ОграничениеТипа = УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока();
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Граница") Тогда
		
		Элемент.ОграничениеТипа = УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока();
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Тип") Тогда
		
		Элемент.ОграничениеТипа = УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока();
		КнопкаОчистки = Ложь;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("УникальныйИдентификатор") Тогда
		
		КнопкаОчистки = Ложь;
		ОграничениеТипа = Истина;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Булево")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("ВидДвиженияНакопления")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("ВидДвиженияБухгалтерии")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("ВидСчета") Тогда
		
		КнопкаОчистки = Ложь;
		КнопкаВыбора = Ложь;
		КнопкаВыпадающегоСписка = Истина;
		ОграничениеТипа = Истина;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Строка")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("Число") Тогда
		
		РедактированиеТекста = Истина;
		ОграничениеТипа = Истина;
		КнопкаВыбора = Ложь;
		КнопкаВыпадающегоСписка = Ложь;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Дата") Тогда
		
		ОграничениеТипа = Истина;
		РедактированиеТекста = Истина;
		КнопкаВыпадающегоСписка = Истина;
		
		Если Не ЗначениеСписок Тогда
			Элемент.СписокВыбора.Добавить(Новый Структура("Тип", "ТекущаяДата"), СтрШаблон(НСтр("ru = 'Текущая дата, время (%1 ..)'; en = 'Current date, time (%1 ..)'"), Формат(ТекущаяДата(), "ДЛФ=D")));
		КонецЕсли;
		
	ИначеЕсли СложноеЗначение Тогда
		
		КнопкаОчистки = Ложь;
		
	Иначе
		
		ОграничениеТипа = Истина;
		РедактированиеТекста = Истина;
		КнопкаВыпадающегоСписка = Не ВыбиратьТип;
		
	КонецЕсли;
	
	Если ВыбиратьТип И ПроверяемоеЗначение = Неопределено Тогда
		КнопкаОчистки = Ложь;
	Иначе
		КнопкаОчистки = КнопкаОчистки ИЛИ СоставнойТип;
	КонецЕсли;
		
	Элемент.КнопкаОчистки = КнопкаОчистки;
	Элемент.КнопкаВыбора = КнопкаВыбора;
	Элемент.КнопкаВыпадающегоСписка = КнопкаВыпадающегоСписка;
	Элемент.РедактированиеТекста = РедактированиеТекста;
	Элемент.ВыбиратьТип = ВыбиратьТип;
	
	Если ВыбиратьТип Тогда
		Элемент.КартинкаКнопкиВыбора = Элементы.БиблиотекаКартинокУКО_ТипТип.Картинка;
	Иначе
		Элемент.КартинкаКнопкиВыбора = Новый Картинка;
	КонецЕсли;
	
	Если ОграничениеТипа Тогда
		Элемент.ОграничениеТипа = ОписаниеТипов;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработка выбора значения параметра в форме
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	ВыбранноеЗначение - Произвольный - Выбранное значение
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура УКО_ФормыКлиент_ОбработкаВыбораЗначенияПараметраВФорме(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Тип = "ТекущаяДата" Тогда
			
			ВыбранноеЗначение = ТекущаяДата();
			
		ИначеЕсли ВыбранноеЗначение.Тип = "ОсобаяСсылка" Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Обработка автоподбора значения в форме
//
// Параметры:
//	Текст - Строка - Текст
//	ТипЗначения - ОписаниеТипов, Строка - Тип значения параметра
//	ДанныеВыбора - Неопределено, СписокЗначений - ДанныеВыбора
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура УКО_ФормыКлиент_АвтоПодборЗначенияВФорме(Текст, ТипЗначения, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если УКО_СтрокиКлиентСервер_ЭтоUID(Текст)
		ИЛИ УКО_СтрокиКлиентСервер_ЭтоПредставлениеБитаяСсылка(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		УКО_ФормыВызовСервера_АвтоПодборЗначения(Текст, ТипЗначения, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Проверяет является ли строка представление битой ссылки
//
// Параметры:
//   ПроверяемаяСтрока - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, представление битой ссылки
//
Функция УКО_СтрокиКлиентСервер_ЭтоПредставлениеБитаяСсылка(ПроверяемаяСтрока) Экспорт
	
	Возврат СтрНачинаетсяС(ПроверяемаяСтрока, НСтр("ru = '<Объект не найден>'; en = '<Object not found>'"));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает пустой UID "00000000000000000000000000000000"
//
// Возвращаемое значение:
//   Строка - Пустой UID
//
Функция УКО_СтрокиКлиентСервер_ПустойUID() Экспорт
	
	Возврат "00000000000000000000000000000000";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение шестнадцатеричного числа из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьШестнадцатеричноеЧисло(Строка, НачальныйИндекс = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если НачальныйИндекс = Неопределено Тогда
		НачальныйИндекс = 1;
	КонецЕсли;
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовШестнадцатеричныеЦифры(), Сред(Строка, Индекс, 1)) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовШестнадцатеричныеЦифры()
	
	Возврат "0123456789ABCDEFabcdef";
	
КонецФункции
&НаСервере

Процедура УКО_ФормыВызовСервера_ВставкаОсобойСсылкиВДанныеВыбора(ДанныеВыбора, Ссылка, Текст)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ДанныеСсылки = Новый Структура();
		ДанныеСсылки.Вставить("Тип", "ОсобаяСсылка");
		ДанныеСсылки.Вставить("Ссылка", Ссылка);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ДанныеСсылки, Текст);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
// Открывает форму редактирования Момента времени
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - МоментВремени - Значение
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеМоментаВремени(Заголовок, Значение, ФормаВладелец, ОписаниеОповещенияЗавершение) Экспорт
	
	ПараметрыФормы = Новый Структура("Заголовок, Значение", Заголовок, Значение);
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеМоментаВремени", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиенте
// Показать сравнение файлов
//
// Параметры:
//	ИмяПервогоФайла - Строка - Имя первого файла
//	ИмяВторогоФайла - Строка - Имя второго файла
//	СпособСравнения - СпособСравнения - Способ сравнения
//
Процедура УКО_ФормыКлиент_ПоказатьСравнениеФайлов(ИмяПервогоФайла, ИмяВторогоФайла, СпособСравнения) Экспорт
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		
		СравнениеФайлов = Новый СравнениеФайлов;
		СравнениеФайлов.ПервыйФайл = ИмяПервогоФайла;
		СравнениеФайлов.ВторойФайл = ИмяВторогоФайла;
		СравнениеФайлов.СпособСравнения = СпособСравнения;
		
		СравнениеФайлов.ПоказатьРазличияМодально();
		
		НачатьУдалениеФайлов(, ИмяПервогоФайла);
		НачатьУдалениеФайлов(, ИмяВторогоФайла);
		
	#КонецЕсли
	
КонецПроцедуры
&НаСервере
// Читает данные файла ERF из временного хранилища и помещает в иерархический массив структур
//
// Параметры:
//   АдресХранилища - Строка - Адрес временного хранилища содержащего данные 
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Массив	- Массив (иерархический) содержит структуры
//
Функция УКО_ЧтениеERFВызовСервера_ПрочитатьИзВременногоХранилища(АдресХранилища, УникальныйИдентификатор) Экспорт
	
	ФайлERFДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ПолноеИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
	ФайлERFДвоичныеДанные.Записать(ПолноеИмяФайлаОтчета);
	ТекстСхемыКомпоновкиДанных = ОбъектОбработки().УКО_Конфигуратор_СхемаКомпоновкиДанныхИзВнешнегоОтчета(ПолноеИмяФайлаОтчета);
	УдалитьФайлы(ПолноеИмяФайлаОтчета);
	
	Данные = Новый Массив;
	НовыйЭлемент = Новый Структура;
	НовыйЭлемент.Вставить("Type", "DataCompositionSchema");
	НовыйЭлемент.Вставить("Text", ТекстСхемыКомпоновкиДанных);
	НовыйЭлемент.Вставить("Name", НСтр("ru = 'Схема компоновки данных'; en = 'Data composition schema'"));
	
	Данные.Добавить(НовыйЭлемент);
	
	ОбъектОбработки().УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки (Данные, УникальныйИдентификатор);
	
	Возврат Данные;
	
КонецФункции
&НаСервере
// Читает данные файла Q1C из временного хранилища и помещает в иерархический массив структур
//
// Параметры:
//   АдресХранилища - Строка - Адрес временного хранилища содержащего данные 
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Массив	- Массив (иерархический) содержит структуры
//
Функция УКО_ЧтениеQ1CВызовСервера_ПрочитатьИзВременногоХранилища(АдресХранилища, УникальныйИдентификатор) Экспорт
	
	ФайлXMLДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ФайлXMLДвоичныеДанные.ОткрытьПотокДляЧтения());  
	НовоеДеревоДанных = ОбъектОбработки().УКО_XML_ПрочитатьВДерево(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	КорневойЭлемент = НовоеДеревоДанных.Строки[0];
	Данные = ОбъектОбработки().УКО_ЧтениеQ1C_ПрочитатьДанные(КорневойЭлемент);
	ОбъектОбработки().УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки (Данные, УникальныйИдентификатор);
	
	Возврат Данные;
	
КонецФункции
