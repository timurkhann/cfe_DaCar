#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, Параметры.Заголовок);
	ОбъектОбработки().УКО_ПроверкаОшибокВФорме_Инициализировать(ЭтаФорма);
	
	Идентификатор = Параметры.НачальноеЗначение;
	Режим = Параметры.Режим;
	
	Если ЗначениеЗаполнено(Параметры.ЗанятыеИдентификаторы) Тогда
		ЗанятыеИдентификаторы.ЗагрузитьЗначения(Параметры.ЗанятыеИдентификаторы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ПриИзмененииИдентификатораПослеОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УКО_ПроверкаОшибокВФормеКлиент_ОбработкаНавигационнойСсылки(ЭтаФорма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОшибкиЗаполнения = ПроверкаЗаполнения();
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		
		УКО_ПроверкаОшибокВФормеКлиент_ТекущийЭлементПоПервой(ЭтаФорма, ОшибкиЗаполнения);
		
	Иначе
		
		Закрыть(Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	
	УКО_ПроверкаОшибокВФормеКлиент_Обновить(ЭтаФорма, ПроверкаЗаполнения());
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриИзмененииИдентификатораПослеОжидания()

	ОбновитьЭлементыФормы();

КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	Результат = Новый СписокЗначений;
	ЗанятыеИдентификаторыМассив = ЗанятыеИдентификаторы.ВыгрузитьЗначения();
	
	Если Режим = "Перечисление.УКО_РежимРедактированияИдентификатора.Идентификатор" Тогда
		ОшибкиИдентификатора = УКО_СтрокиКлиентСервер_ПроверкаИдентификатора(Идентификатор, ЗанятыеИдентификаторыМассив);
	ИначеЕсли Режим = "Перечисление.УКО_РежимРедактированияИдентификатора.Строка" Тогда
		ОшибкиИдентификатора = УКО_СтрокиКлиентСервер_ПроверкаИдентификатораСтрока(Идентификатор, ЗанятыеИдентификаторыМассив);
	КонецЕсли;
	
	Для Каждого ОшибкаИдентификатора Из ОшибкиИдентификатора Цикл
		Результат.Добавить("Идентификатор", ОшибкаИдентификатора);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет идентификатор
//
// Параметры:
//   Идентификатор - Строка - Идентификатор
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Массив - Ошибки проверки
//
Функция УКО_СтрокиКлиентСервер_ПроверкаИдентификатора(Идентификатор, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Ошибки = Новый Массив;
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	КорректныйИдентификатор = УКО_СтрокиКлиентСервер_ЭтоКорректныйИдентификатор(Идентификатор);
	Если Не КорректныйИдентификатор Тогда
		Ошибки.Добавить(НСтр("ru = 'Неверное имя. Имя должно состоять из одного слова, начинаться с буквы или ""_""
                              |и не содержать специальных символов кроме ""_""';
							  |en = 'Invalid name. The name must consist of one word, begin with a letter or ""_""
                              |and do not contain special characters except ""_""'"));
	КонецЕсли;
	
	ИдентификаторИспользуется = (ЗанятыеИдентификаторы.Найти(Идентификатор) <> Неопределено);
	Если ИдентификаторИспользуется Тогда
		Ошибки.Добавить(НСтр("ru = 'Идентификатор используется'; en = 'ID used'"));
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает цвет текста важной гиперссылки
//
// Возвращаемое значение:
//   Цвет - Цвет текста
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаВажнойГиперссылки() Экспорт
	
	Возврат Новый Цвет(125,0,0); 
	
КонецФункции
&НаКлиенте
// Обновляет данные элементов ошибок
//
// Параметры:
//  Форма - Форма - Форма
//  Ошибки - СписокЗначение - Ошибки Значение - имя элемента, Представление - Текст ошибки
//
Процедура УКО_ПроверкаОшибокВФормеКлиент_Обновить(Форма, Ошибки) Экспорт
	
	Результат = Новый Массив;
	КоличествоСтрок = 0;
	Для Каждого Ошибка Из Ошибки Цикл 
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат.Добавить(Символы.ПС);
		КонецЕсли;
		
		ТекстОшибки = Ошибка.Представление;
		КоличествоСтрок = КоличествоСтрок + СтрЧислоСтрок(ТекстОшибки);
		Результат.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки,, УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаВажнойГиперссылки(),, Ошибка.Значение));
		
	КонецЦикла;
	
	ЭлементОшибки = Форма.Элементы.Ошибки;
	КоличествоОшибок = Ошибки.Количество();
	
	Если ЭлементОшибки.Высота < КоличествоСтрок Тогда
		ЭлементОшибки.Высота = КоличествоСтрок;
	КонецЕсли;

	Форма.Ошибки = Новый ФорматированнаяСтрока(Результат);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиенте
// Обработчик события ОбработкаНавигационнойСсылки
//
// Параметры:
//  Форма - Форма - Форма
//  Элемент - Элемент - Элемент
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - Текст навигационной ссылки
//  СтандартнаяОбработка - Булево - Признак стандартной обработки
//
Процедура УКО_ПроверкаОшибокВФормеКлиент_ОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Форма.ТекущийЭлемент = Форма.Элементы[НавигационнаяСсылкаФорматированнойСтроки];
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
&НаКлиенте
// Устанавливает текущим первый элемент ошибки
//
// Параметры:
//  Форма - Форма - Форма
//  Ошибки - СписокЗначение - Ошибки Значение - имя элемента, Представление - Текст ошибки
//
Процедура УКО_ПроверкаОшибокВФормеКлиент_ТекущийЭлементПоПервой(Форма, Ошибки) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы[Ошибки[0].Значение];
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Проверяет является ли строка корректным идентификатором, строка вида СуммаКонтрагента, _Идентификатор
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, идентификатор корректный
//
Функция УКО_СтрокиКлиентСервер_ЭтоКорректныйИдентификатор(Строка) Экспорт
	
	ПервыйСимволСимволы = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	ПоследующиеСимволы = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	 
	Если ПустаяСтрока(Строка) ИЛИ Не СтрНайти(ПервыйСимволСимволы, Лев(Строка, 1)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч = 2 По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Сч, 1);
		
		Если Не СтрНайти(ПоследующиеСимволы, Символ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет идентификатор строка
//
// Параметры:
//   Идентификатор - Строка - Идентификатор строка
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Массив - Ошибки проверки
//
Функция УКО_СтрокиКлиентСервер_ПроверкаИдентификатораСтрока(Идентификатор, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Ошибки = Новый Массив;
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	Если Идентификатор = "" Тогда
		Ошибки.Добавить(НСтр("ru = 'Пустой идентификатор'; en = 'Empty id'"));
	КонецЕсли;
	
	ИдентификаторИспользуется = (ЗанятыеИдентификаторы.Найти(Идентификатор) <> Неопределено);
	Если ИдентификаторИспользуется Тогда
		Ошибки.Добавить(НСтр("ru = 'Идентификатор используется'; en = 'ID used'"));
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
