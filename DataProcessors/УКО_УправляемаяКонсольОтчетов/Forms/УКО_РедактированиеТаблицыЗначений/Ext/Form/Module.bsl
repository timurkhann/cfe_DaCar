
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытиеРазрешено;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ЗагрузкаИзБуфераОбмена.Картинка = Элементы.БиблиотекаКартинокУКО_ВставитьИзБуфераОбмена.Картинка;
	
	Редактирование = Параметры.Редактирование;
	
	Если Параметры.Свойство("ДополнениеЗаголовка") Тогда
		ДополнениеЗаголовка = Параметры.ДополнениеЗаголовка;
	КонецЕсли;
	
	// Заполнение данных
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда
		
		// Заполнение данных таблицы значений
		Адрес = Параметры.Адрес;
		ОбновитьДанныеТаблицыЗначений(ПолучитьИзВременногоХранилища(Адрес));
		
	КонецЕсли;
	
	// Изменение элементов управления 
	// ТаблицаЗначений
	Элементы.ТаблицаЗначений.ИзменятьПорядокСтрок = Редактирование;
	Элементы.ТаблицаЗначений.ИзменятьСоставСтрок = Редактирование;
	Элементы.ТаблицаЗначений.ТолькоПросмотр = Не Редактирование;
	// Колонки
	Элементы.КолонкиИндексировать.Видимость = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Параметры, "НастройкаИндексацииКолонок", Ложь);
	// Форма
	КоманднаяПанель.Видимость = Редактирование;
	Элементы.КоманднаяПанельТаблицы.Видимость = Редактирование;
	Элементы.СохранитьИЗакрыть.Видимость = Редактирование;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы 
		И ЗакрытиеРазрешено = Неопределено Тогда
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			
			ЗаголовокВопроса = НСтр("ru = 'Редактирование таблицы значений'; en = 'Editing the table of values'");
			ТекстВопроса = НСтр("ru = 'Имеются несохраненные данные при закрытии они будут потеряны. Продолжить?'; en = 'If you have unsaved data when you close it, it will be lost. Continue?'");

			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(Истина, НСтр("ru = 'Продолжить'; en = 'Continue'"));
			КнопкиВопроса.Добавить(Ложь, НСтр("ru = 'Отмена'; en = 'Cancel'"));
			
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросСохраненияЗавершение", ЭтотОбъект);
			
			УКО_ФормыКлиент_ЗадатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, КнопкиВопроса, Ложь, ЗаголовокВопроса, ЭтаФорма);
								
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКолонки

&НаКлиенте
Процедура КолонкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	КолонкиТекущиеДанные = Элементы.Колонки.ТекущиеДанные;
	ИспользуемыеИдентификаторы = УКО_ФормыКлиент_ВыгрузитьКолонкуКоллекции(Колонки, "Имя", КолонкиТекущиеДанные.Имя);
	УКО_ФормыКлиент_ОткрытьРедактированиеКолонкиТаблицыЗначений("Перечисление.УКО_РежимРедактированияКолонкиТаблицыЗначений.Изменение", КолонкиТекущиеДанные.Имя,
					КолонкиТекущиеДанные.Тип, КолонкиТекущиеДанные.Индексировать, ИспользуемыеИдентификаторы, ЭтаФорма, Новый ОписаниеОповещения("РедактированиеКолонкиЗакончено", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПередУдалением(Элемент, Отказ)
	
	УдалитьКолонкуСервер(Элемент.ТекущиеДанные.Имя);
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПриАктивизацииСтроки(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗначений

&НаКлиенте
Процедура ТаблицаЗначенийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаЗначенийРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.ВыбиратьТип Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыборТипаКолонкиЗавершен", ЭтотОбъект, ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Колонки'; en = 'Column'"));
		
		УКО_ФормыКлиент_ОткрытьРедактированиеТипаЗначения(Элемент, "Перечисление.УКО_РежимРедактированияТипаЗначения.ВыборТипа",
											Элемент.ДоступныеТипы, ОписаниеОповещенияЗавершение, ДополнительныеПараметры);
											
	КонецЕсли;
										
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаЗначенийРеквизитОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.ДоступныеТипы.Типы().Количество() > 1 Тогда
		Элемент.ВыбиратьТип = Истина;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
										
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереместитьКолонкуВверх(Команда)
	
	ПереместитьТекущуюКолонку(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКолонкуВниз(Команда)
	
	ПереместитьТекущуюКолонку(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	ЗакрытиеРазрешено = Истина;
	Закрыть(СохранитьТаблицуЗначенийВХранилище(ВладелецФормы.УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеЗначениеВСтрокуВнутр(Команда)
	
	Состояние(НСтр("ru = 'Подготовка данных файла'; en = 'Preparation of data file'"),,, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	ПолучитьФайл(ФайлТЗЗначениеВСтрокуВнутр());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзТабличногоДокумента(Команда)
	
	ЗапуститьПослеВопросаОчищатьТаблицуЗначений(Новый ОписаниеОповещения("ЗагрузитьИзТабличногоДокумента", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗначениеИзСтрокиВнутр(Команда)
	
	ЗапуститьПослеВопросаОчищатьТаблицуЗначений(Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗначениеСтрокиВнутр", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзБуфераОбмена(Команда)
	
	ЗапуститьПослеВопросаОчищатьТаблицуЗначений(Новый ОписаниеОповещения("ЗагрузитьИзБуфераОбмена", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонку(Команда)
	
	КолонкиТекущиеДанные = Элементы.Колонки.ТекущиеДанные;
	ИспользуемыеИдентификаторы = УКО_ФормыКлиент_ВыгрузитьКолонкуКоллекции(Колонки, "Имя");
	ИмяКолонки = УКО_СтрокиКлиентСервер_НовыйИдентификатор(НСтр("ru = 'Колонка'; en = 'Column'"), ИспользуемыеИдентификаторы);	
	УКО_ФормыКлиент_ОткрытьРедактированиеКолонкиТаблицыЗначений("Перечисление.УКО_РежимРедактированияКолонкиТаблицыЗначений.Добавление", ИмяКолонки,
					Неопределено, Неопределено, ИспользуемыеИдентификаторы, ЭтаФорма, Новый ОписаниеОповещения("ДобавлениеКолонкиЗакончено", ЭтотОбъект));
					
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитьКолонкиТаблицыЗначенийСервер(НовоеИмяКолонки, ТипКолонки, СтароеИмяКолонки = "")
	
	Если Не ЗначениеЗаполнено(СтароеИмяКолонки) Тогда //Новая колонка
		
		ОбъектОбработки().УКО_Формы_ДобавитьКолонкуВТаблицуЗначений(ЭтаФорма, "ТаблицаЗначений", НовоеИмяКолонки, ТипКолонки);
		
	Иначе
		
		ТЗ = РеквизитФормыВЗначение("ТаблицаЗначений");
		ЗначенияКолонки = ТЗ.ВыгрузитьКолонку(СтароеИмяКолонки);
		
		УдалитьКолонкуСервер(СтароеИмяКолонки);
		ОбъектОбработки().УКО_Формы_ДобавитьКолонкуВТаблицуЗначений(ЭтаФорма, "ТаблицаЗначений", НовоеИмяКолонки, ТипКолонки);
		
		ТЗ = РеквизитФормыВЗначение("ТаблицаЗначений");
		ТЗ.ЗагрузитьКолонку(ЗначенияКолонки, НовоеИмяКолонки);
		ЗначениеВРеквизитФормы(ТЗ, "ТаблицаЗначений");
		
		// Переместить элемент на нужное место
		ИндексТекущейКолонки = Элементы.Колонки.ТекущаяСтрока;
		ПоследняяКолонка = (ИндексТекущейКолонки = Колонки.Количество() - 1);
		Если Не ПоследняяКолонка Тогда
			ИмяСледующегоЭлемента = Колонки[ИндексТекущейКолонки + 1].Имя;
			Элементы.Переместить(Элементы["ТаблицаЗначений" + НовоеИмяКолонки], Элементы["ТаблицаЗначений"], Элементы["ТаблицаЗначений" + ИмяСледующегоЭлемента]);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкуСервер (Имя)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("ТаблицаЗначений." + Имя);
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	Элементы.Удалить(Элементы["ТаблицаЗначений" + Имя]);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыУправления()
	
	ТекстКоличествоСтрок = УКО_СтрокиКлиентСервер_ТекстНекотороеКоличествоСтрок(ТаблицаЗначений.Количество());
	Если Редактирование Тогда
		
		// Управление элементами порядка колонок
		КоличествоКолонок = Колонки.Количество();
		ИдентификаторТекущейСтрокиКолонки = Элементы.Колонки.ТекущаяСтрока;
		
		ДоступностьПереместитьКолонкуВверх = Ложь;
		ДоступностьПереместитьКолонкуВниз = Ложь;
		
		Если ИдентификаторТекущейСтрокиКолонки <> Неопределено Тогда
			ИндексТекущейСтрокиКолонки = Колонки.Индекс(Колонки.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиКолонки));
			ДоступностьПереместитьКолонкуВверх = КоличествоКолонок > 1 И ИндексТекущейСтрокиКолонки <> 0;
			ДоступностьПереместитьКолонкуВниз = КоличествоКолонок > 1 И ИндексТекущейСтрокиКолонки <> (КоличествоКолонок - 1);
		КонецЕсли;
		
		Элементы.КолонкиКонтекстноеМенюПереместитьКолонкуВверх.Доступность = ДоступностьПереместитьКолонкуВверх;
		Элементы.КолонкиКонтекстноеМенюПереместитьКолонкуВниз.Доступность = ДоступностьПереместитьКолонкуВниз;
		
	КонецЕсли;
	
	Если Редактирование Тогда
		ЗаголовокФормы = СтрШаблон(НСтр("ru = 'Редактирование таблицы значений %1 (%2)'; en = 'Editing the table of values %1 (%2)'"), ДополнениеЗаголовка, ТекстКоличествоСтрок);
	Иначе
		ЗаголовокФормы = СтрШаблон(НСтр("ru = 'Просмотр таблицы значений (%1)'; en = 'Viewing a table of values (%1)'"), ТекстКоличествоСтрок);
	КонецЕсли;
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, ЗаголовокФормы);
	
	// Редактирование колонок
	Элементы.ГруппаКолонки.Видимость = Редактирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТекущуюКолонку(Направление)
	
	ТекущиеДанные = Элементы.Колонки.ТекущиеДанные;
	
	ПереместитьКолонкуНаСервере(ТекущиеДанные.Имя, Направление);
	Колонки.Сдвинуть(Колонки.Индекс(ТекущиеДанные), Направление);
	
	Модифицированность = Истина;
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьКолонкуНаСервере(Имя, Направление)
	
	// Перемещение элемента
	ЭлементТаблицаЗначений = Элементы["ТаблицаЗначений"];
	ЭлементКолонка = Элементы["ТаблицаЗначений" + Имя];
	ИндексЭлементаТекущейКолонки = ЭлементТаблицаЗначений.ПодчиненныеЭлементы.Индекс(ЭлементКолонка);

	ЭлементПередКоторымВставляем = Неопределено;
	Если Направление = -1 Тогда
		ЭлементПередКоторымВставляем = ЭлементТаблицаЗначений.ПодчиненныеЭлементы[ИндексЭлементаТекущейКолонки + Направление];
	ИначеЕсли Направление = 1 Тогда
		Если (Колонки.Количество() - 1) <> (ИндексЭлементаТекущейКолонки + Направление) Тогда
			ЭлементПередКоторымВставляем = ЭлементТаблицаЗначений.ПодчиненныеЭлементы[ИндексЭлементаТекущейКолонки + 1 + Направление];
		КонецЕсли;
	КонецЕсли;
	Элементы.Переместить(ЭлементКолонка, ЭлементТаблицаЗначений, ЭлементПередКоторымВставляем);
	
КонецПроцедуры

&НаСервере
Функция СохранитьТаблицуЗначенийВХранилище(УникальныйИдентификатор)
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначений");
	
	Для Каждого Колонка Из Колонки Цикл 
		
		ИмяКолонки = Колонка.Имя;
		ИмяКолонкиВременной = ИмяКолонки + "ВременнаяКолонка";
		
		ТЗ.Колонки.Добавить(ИмяКолонкиВременной, Колонка.Тип);
		ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку(ИмяКолонки), ИмяКолонкиВременной);
		
		ТЗ.Колонки.Удалить(ИмяКолонки);
		ТЗ.Колонки[ИмяКолонкиВременной].Имя = ИмяКолонки;
		
		Если Колонка.Индексировать Тогда
			ТЗ.Индексы.Добавить(ИмяКолонки);
		КонецЕсли;

	КонецЦикла;
	
	Возврат ОбъектОбработки().УКО_ВременноеХранилище_Поместить(ТЗ, Адрес, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВопросСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ЗакрытиеРазрешено = Истина;
		Закрыть();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ФайлТЗЗначениеВСтрокуВнутр()
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗначений");
	Возврат ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеИзСтроки(ЗначениеВСтрокуВнутр(ТЗ)));
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаФайлаИзСтрокиВнутрЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзЗначениеИзСтрокиВнутр(Адрес);
	ОбновитьЭлементыУправления();

КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхИзЗначениеИзСтрокиВнутр(Значение)
	
	Если ЭтоАдресВременногоХранилища(Значение) Тогда
		ТЗСтрокаВнутр = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьИзВременногоХранилища(Значение));
	Иначе 
		ТЗСтрокаВнутр = Значение;
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗначений(ЗначениеИзСтрокиВнутр(ТЗСтрокаВнутр));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыЗначений(ТЗ, Обработать = Ложь)
	
	// Удаляем старые данные
	ОчиститьКолонкиТаблицыЗначений();
	
	ТипыКолонокОбработанные = Новый Соответствие;
	Если Обработать Тогда
		
		Для Каждого Колонка Из ТЗ.Колонки Цикл 
			
			МаксимальнаяДлина = 0;
			Для Каждого Строка Из ТЗ Цикл 
				ЗначениеПоля = Строка[Колонка.Имя];
				МаксимальнаяДлина = Макс(МаксимальнаяДлина, СтрДлина(ЗначениеПоля));
			КонецЦикла;
			
			Если МаксимальнаяДлина <= 100 Тогда
				ТипыКолонокОбработанные.Вставить(Колонка.Имя, УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(МаксимальнаяДлина));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавление колонок
	Для Каждого Колонка Из ТЗ.Колонки Цикл 
		
		НоваяКолонка = Колонки.Добавить();
		НоваяКолонка.Имя = Колонка.Имя;
		
		ТипКолонкиОбработанный = ТипыКолонокОбработанные.Получить(Колонка.Имя);
		Если ТипКолонкиОбработанный = Неопределено Тогда
			ТипЗначенияКолонки = Колонка.ТипЗначения;
		Иначе
			ТипЗначенияКолонки = ТипКолонкиОбработанный;
		КонецЕсли;
		
		НоваяКолонка.Тип = ТипЗначенияКолонки;
		НоваяКолонка.Индексировать = ОбъектОбработки().УКО_ОбщегоНазначения_КолонкаТаблицыЗначенийИндексируется(ТЗ, Колонка.Имя);
		
		ОбъектОбработки().УКО_Формы_ДобавитьКолонкуВТаблицуЗначений(ЭтаФорма, "ТаблицаЗначений", Колонка.Имя, ТипЗначенияКолонки);
		
	КонецЦикла;
	
	ТаблицаЗначений.Загрузить(ТЗ);
	КоличествоКолонок = ТЗ.Колонки.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКолонкиТаблицыЗначений()
	
	ИмяТаблицыЗначений = "ТаблицаЗначений";
	УдаляемыеРеквизиты = Новый Массив;
	
	Для Каждого Колонка Из Колонки Цикл 
		
		УдаляемыеРеквизиты.Добавить(ИмяТаблицыЗначений + "." +  Колонка.Имя);
		Элементы.Удалить(Элементы[ИмяТаблицыЗначений + Колонка.Имя]);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	Колонки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзТабличногоДокументаЗавершена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзТабличногоДокументаСервер(Результат);
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхИзТабличногоДокументаСервер(Адрес)
	
	ТЗ = ПолучитьИзВременногоХранилища(Адрес);
	ОбновитьДанныеТаблицыЗначений(ТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеКолонкиЗакончено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТекущиеДанные = Элементы.Колонки.ТекущиеДанные;
	ПоследнееИмяКолонки = КолонкиТекущиеДанные.Имя;
	ЗаполнитьЗначенияСвойств(КолонкиТекущиеДанные, Результат);
	
	Модифицированность = Истина;
	ИзменитьКолонкиТаблицыЗначенийСервер(Результат.Имя, Результат.Тип, ПоследнееИмяКолонки);
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКолонкиЗакончено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Колонки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	Модифицированность = Истина;
	ИзменитьКолонкиТаблицыЗначенийСервер(Результат.Имя, Результат.Тип);
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхИзБуфераОбменаСервер(Текст)
	
	// В буфере данные идут с разделителем табуляция
	ТЗ = Новый ТаблицаЗначений;
	Строки = СтрРазделить(Текст, Символы.ПС + Символы.ВК, Ложь);
	
	Если ЗначениеЗаполнено(Строки) Тогда
		
		// Собираем колонки
		ИдентификаторыКолонок = СтрРазделить(Строки[0], Символы.Таб);
		
		// Собираем идентификаторы проверяем корректность
		ИдентификаторыКорректны = Истина;
		Идентификаторы = Новый Массив;
		Для Каждого ИдентификаторКолонки Из ИдентификаторыКолонок Цикл 
			
			ИспользуемыйИдентификаторКолонки = СокрЛП(ИдентификаторКолонки);
			
			Идентификаторы.Добавить(ИспользуемыйИдентификаторКолонки);
			Если Не УКО_СтрокиКлиентСервер_ЭтоКорректныйИдентификатор(ИспользуемыйИдентификаторКолонки) Тогда
				ИдентификаторыКорректны = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ИдентификаторыКорректны Тогда
			
			// Идентификаторы не корректны создаем с именами Колонка1 и т.д.
			Для ИндексИдентификатора = 0 По Идентификаторы.ВГраница() Цикл 
				Идентификаторы[ИндексИдентификатора] = СтрШаблон(НСтр("ru = 'Колонка%1'; en = 'Column%1'"), 
															УКО_СтрокиКлиентСервер_ЧислоВСтроку(ИндексИдентификатора + 1));
			КонецЦикла;
			
		КонецЕсли;
		
		// Создаем колонки
		Для Каждого ИмяИдентификатора Из Идентификаторы Цикл 
			ТЗ.Колонки.Добавить(ИмяИдентификатора, УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
		КонецЦикла;
		
		// Загружаем данные
		Если ИдентификаторыКорректны Тогда
			НачальныйИндекс = 1;
		Иначе
			НачальныйИндекс = 0;
		КонецЕсли;
		
		Для ИндексСтроки = НачальныйИндекс По Строки.ВГраница() Цикл 
			
			НоваяСтрока = ТЗ.Добавить();
			ДанныеСтроки = СтрРазделить(Строки[ИндексСтроки], Символы.Таб);
			
			ИндексКолонки = 0;
			Для Каждого ЗначениеПоля Из ДанныеСтроки Цикл 
				
				НоваяСтрока[Идентификаторы[ИндексКолонки]] = ЗначениеПоля;
				ИндексКолонки = ИндексКолонки + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДанныеТаблицыЗначений(ТЗ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПослеВопросаОчищатьТаблицуЗначений(Обработчик)
	
	Если ЗначениеЗаполнено(Колонки) ИЛИ ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		ВариантыОтвета = Новый СписокЗначений;
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Да,		НСтр("ru = 'Продолжить'; en = 'Continue'"));
		ВариантыОтвета.Добавить(КодВозвратаДиалога.Отмена,	НСтр("ru = 'Отмена'; en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОчищатьТаблицуЗначенийЗавершение", ЭтотОбъект, Обработчик),
								НСтр("ru = 'При загрузке данные текущей таблицы значений будут потеряны?';
									|en = 'When loading, the data of the current value table will be lost?'"),
									ВариантыОтвета,, КодВозвратаДиалога.Да, УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
		
	Иначе 
		
		ВыполнитьОбработкуОповещения(Обработчик);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОчищатьТаблицуЗначенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТабличногоДокумента(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаИзТабличногоДокументаЗавершена", ЭтотОбъект);
	УКО_ФормыКлиент_ОткрытьДополнительную("ЗагрузкаВТаблицуЗначений",,ЭтаФорма,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗначениеСтрокиВнутр(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Состояние(НСтр("ru = 'Загрузка данных файла'; en = 'Load of data file'"),,, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗагрузкаФайлаИзСтрокиВнутрЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении,,,,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзБуфераОбмена(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Состояние(НСтр("ru = 'Загрузка данных из буфера обмена'; en = 'Download data from the clipboard'"),,, Элементы.БиблиотекаКартинокУКО_ДлительнаяОперацияАнимация48.Картинка);
	
	ТекстБуфераОбмена = УКО_БуферОбменаКлиент_Текст();
	
	Если СтрНачинаетсяС(ТекстБуфераОбмена, "{""#""") Тогда //{"#"
		ЗагрузкаДанныхИзЗначениеИзСтрокиВнутр(ТекстБуфераОбмена);
	Иначе
		ЗагрузкаДанныхИзБуфераОбменаСервер(ТекстБуфераОбмена);
	КонецЕсли;
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаКолонкиЗавершен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЭлементЗначение = Элементы.ТаблицаЗначений.ТекущийЭлемент;
	ЭлементЗначение.ОграничениеТипа = Результат;
	ЭлементЗначение.ВыбиратьТип = Ложь;
	
КонецПроцедуры

#КонецОбласти



&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает картинку по описание типов
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка описания типов
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(ОписаниеТипов) Экспорт
	
	Если ОписаниеТипов = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	КонецЕсли;
	
	КоличествоТипов = УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов);
	
	Если КоличествоТипов = 0 Тогда 
		
		Картинка = Новый Картинка;
		
	ИначеЕсли КоличествоТипов > 1 Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAWUlEQVQ4T92OQQrAQAgD85o+pp/y" + Символы.ВК + Символы.ПС + "6WkVBFlCSdlDoYfJIeogSG5REYDNowBnUDEPVipcQe8l3dmCe85JdsnfBF2+oUIJ" + Символы.ВК + Символы.ПС + "jgBX5rypcAXqy4rvBYptgYssfYgLqgc0Wk0lF3MAAAAASUVORK5CYII="));
		
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов), ОписаниеТипов);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
&НаКлиенте
// Получает текст из буфера обмена
//
// Возвращаемое значение:
//   Строка	- Содержимое буфера обмена
Функция УКО_БуферОбменаКлиент_Текст() Экспорт
	
	htmlfile = Новый COMОбъект("htmlfile");
    Возврат htmlfile.ParentWindow.ClipboardData.Getdata("Text");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет является ли строка корректным идентификатором, строка вида СуммаКонтрагента, _Идентификатор
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, идентификатор корректный
//
Функция УКО_СтрокиКлиентСервер_ЭтоКорректныйИдентификатор(Строка) Экспорт
	
	ПервыйСимволСимволы = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	ПоследующиеСимволы = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	 
	Если ПустаяСтрока(Строка) ИЛИ Не СтрНайти(ПервыйСимволСимволы, Лев(Строка, 1)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч = 2 По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Сч, 1);
		
		Если Не СтрНайти(ПоследующиеСимволы, Символ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Число в виде строки
//
// Параметры:
//   Число - Число - Преобразуемое число
//
// Возвращаемое значение:
//   Строка - Число в виде строки
//
Функция УКО_СтрокиКлиентСервер_ЧислоВСтроку(Число) Экспорт
	
	Возврат Формат(Число, "ЧН=; ЧГ=");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Описание типов строка)
// Параметры:
//   ДлинаСтроки - Число - Длина строки
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов строка
Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(ДлинаСтроки = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает значение свойства структуры
// Параметры:
//   Структура - Структура - Структура
//   Имя - Строка - Имя свойства
//   ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию, когда в данной структуре нет этого свойства
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры
Функция УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Структура = Неопределено, Имя = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	
	Если (ТипЗнч(Структура) = Тип("Структура")
				ИЛИ ТипЗнч(Структура) = Тип("ДанныеФормыСтруктура"))
			И Структура.Свойство(Имя) Тогда
		
		Значение = Структура[Имя];
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает текст "n строк" с верным окончанием
//
// Параметры:
//   Количество - Число - Количество строк
//
// Возвращаемое значение:
//   Строка - Текст "n строк" с верным окончанием
//
Функция УКО_СтрокиКлиентСервер_ТекстНекотороеКоличествоСтрок(Количество) Экспорт
	
	Возврат СтрокаСЧислом(НСтр("ru = '%1 строк; %1 строка; %1 строки; %1 строки; %1 строк; %1 строк';
								|en = '%1 rows; %1 row; %1 rows; %1 rows; %1 rows; %1 rows'"),	Количество, ВидЧисловогоЗначения.Количественное);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает новый идентификатор который генерируется с учетом используемых
//
// Параметры:
//   Префикс - Строка - Префикс
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Строка - Новый идентификатор
//
Функция УКО_СтрокиКлиентСервер_НовыйИдентификатор(Префикс, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	НачальныйНомер = 0;
	
	Для Каждого ИспользуемыйИдентификатор Из ЗанятыеИдентификаторы Цикл 
		
		Если СтрСравнить(Лев(ИспользуемыйИдентификатор, СтрДлина(Префикс)), Префикс) = 0 Тогда // Строка начинается с префикса
			
			ИспользуемыйНомер = Сред(ИспользуемыйИдентификатор, СтрДлина(Префикс) + 1);
			
			Если УКО_СтрокиКлиентСервер_ЭтоЦелоеЧисло(ИспользуемыйНомер) Тогда
				НачальныйНомер = Макс(НачальныйНомер, Число(ИспользуемыйНомер));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрШаблон("%1%2", Префикс, УКО_СтрокиКлиентСервер_ЧислоВСтроку(НачальныйНомер + 1));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_ЭтоЦелоеЧисло(Строка)
	
	Результат = Истина;
	
	Для Счетчик = 1 По СтрДлина(Строка) Цикл 
		
		Если СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Счетчик, 1)) = 0 Тогда 
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет, это режим запуска программы
//
// Возвращаемое значение:
//   Булево	- Истина, Режим запуска внешняя обработка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Экспорт
	
	Возврат Истина;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов, ИсключатьNull = Истина) Экспорт
	
	Результат = ОписаниеТипов.Типы().Количество();
	Если ИсключатьNull Тогда
		
		Если ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
			Результат = Результат - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповБезNull(ОписаниеТипов) Экспорт
	
	Возврат	Новый ОписаниеТипов(ОписаниеТипов,,"Null");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов, ИсключатьNull = Истина)
	
	Результат = Неопределено;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ИсключатьNull И Тип = Тип("Null") Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = Тип;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Получает картинку типа
//
// Параметры:
//  Тип  - Тип - Тип
//  ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(Тип, ОписаниеТипов = Неопределено) Экспорт
	
	Если Тип = Тип("Неопределено") Тогда 
		Картинка = Новый Картинка;
	ИначеЕсли Тип = Тип("Тип")
			ИЛИ Тип = Тип("ОписаниеТипов") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAABoSURBVDhPY/j//z8DJZgizSCLB6EB" + Символы.ВК + Символы.ПС + "mpqa/52dHLFikBx6eGF4wczMFKTZG6QwNjbyPwiD2CAxkBxBA2Ca0Q2AGULQAGQF" + Символы.ВК + Символы.ПС + "yC7AFdV4Y2EkGwCKiYryov+geAdhEBs5dpADdBAmZVKzNgDOWtNtpSsLpgAAAABJ" + Символы.ВК + Символы.ПС + "RU5ErkJggg=="));
	ИначеЕсли Тип = Тип("Число") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB+SURBVDhPY2AYBVhDwKFr538QdmnbAsbO7Vv/" + Символы.ВК + Символы.ПС + "EwoqkIIGmCKQJmQNaHyQHIp6mFq4JpgGm779YDEsBoCEMVyFYgDIC86tm8GuQncR" + Символы.ВК + Символы.ПС + "1Eb8BsA0gQzBYgBhLyDbTpYLQM4EGQKLDaRAhTkdvxfIiQW4HlC8w9IAsemAUDoZ" + Символы.ВК + Символы.ПС + "xPIAH+BkJrGgRacAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Строка") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB1SURBVDhPY2AYLOA/0CEg3ECpg0CGgIFD1044" + Символы.ВК + Символы.ПС + "m5ChIFthLoBrcmnbQrQByAqpawDIGyBs37kTb9ggewHkXbArkL1ASnjAwwvZAFLC" + Символы.ВК + Символы.ПС + "A6sBSC5Adi3+KAf5G2QzWhhgDXBC0YwsT3TU4jKUqgaQZRjxgUhswAAA9DFDYfgs" + Символы.ВК + Символы.ПС + "T48AAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Булево") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAFPSURBVDhPY2CgBvCfqN8QvsjwPwiHLTD47zhZ" + Символы.ВК + Символы.ПС + "/L/zFKn/QbP1/7tPUv7vPUn9v32X1P+AiQb/QWox7ARpJBZ4Nxv8p8gA4zwxTJc4" + Символы.ВК + Символы.ПС + "TZXA64CA7bL//bfJgtUYZoqBaRSXOEwSBwsG7ZX7H7xPDsUwkGan6RL/rVpFweL6" + Символы.ВК + Символы.ПС + "KRDasxrJKzADQIrcl8r+B2kCAeu9ImDN+rlC/09ePgIxIBliAMgl8LBwmAhxAUgR" + Символы.ВК + Символы.ПС + "yBC3JTJgQ9A1g9ToJSFcAjcgdK4B3NkgQ0A2YtMMUuRarA93CdyAoBkIA2AuUfcT" + Символы.ВК + Символы.ПС + "gTsbOVCcciAGgFwCNyAQmECIBQ7pemClIJfADfDtJN4A+0SIASCXwA0AJU/PKgNg" + Символы.ВК + Символы.ПС + "yEr8d8nT+68TLfJfL1b8v32G9n/jGPn/FrGq/3WCgXyg5tqpRWADQC7BSJGkugTD" + Символы.ВК + Символы.ПС + "AM9KiEtcS/UJusQ+URczU5GTswEMEielMbjVjwAAAABJRU5ErkJggg=="));
	ИначеЕсли Тип = Тип("ВидДвиженияНакопления") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAz0lEQVQ4T2P4//8/RRirICkYQyB4" + Символы.ВК + Символы.ПС + "n/x/EEYXx4UxBAJ3yP33WSMDZKKKw/C6dev+gzCMD5cAafTbJPsfRDvPkAQbYlIm" + Символы.ВК + Символы.ПС + "ClcIwiCNiYmJKGJwhtcKGbBGEDarFvlvkCeEYgA2zSCMwgFhx6kSYM3IYrg0gzCG" + Символы.ВК + Символы.ПС + "gIa/6H/dZGEgE8LHpxmEsQrCMCHNIIxVEISJ0QzCWAWJ1QzCGALYND9Ldvt/014N" + Символы.ВК + Символы.ПС + "ju84acDl4YpAGJfNIE2HxBjgeIYoL1wNikKQAch8YjBWQVIwVkHi8X8GAOxy2Avy" + Символы.ВК + Символы.ПС + "wzimAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("ВидДвиженияБухгалтерии")
			ИЛИ Тип = Тип("ВидСчета") Тогда 
		Картинка = БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли Тип = Тип("Дата") Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAGPSURBVDhPrZPLSwJRFMb7k3rRH1GuWrRrHbQO" + Символы.ВК + Символы.ПС + "bNIcpUarTdSqx6akkoxCQkMqyBatIoJIIyeK6F2Olho6z69zb1hN2gNq4Mc55zvn" + Символы.ВК + Символы.ПС + "fPfCcOvq/uPTk2Ne3MbAOFmXcL0zCuQPeV1LY/O2c3c3p0Eix9fRAHnNAyt/8qUW" + Символы.ВК + Символы.ПС + "X/DBbrAxAXmp69fE50W7wfxqDHJqH/LRD9BMNnMLaWSg2sAsXsEsXMFisQLVFf2t" + Символы.ВК + Символы.ПС + "rxZqGxjZNIxcGk/9XVAcLZznmRGY2WOU4rO8NqlvlZTvDbgRLTH4EsWK6fcGd3sw" + Символы.ВК + Символы.ПС + "PqBTrjiawSLTK7lVvKl9A/0yAY3QL7fxJHRCaWtCccpN9avGau0iATN/XsMgEoF2" + Символы.ВК + Символы.ПС + "GiOi7/EsSkuN0M6YHuO5SrmZkyENeT/9hZVlqMdhqGk7mdYG0pegUe81D8NQjiAF" + Символы.ВК + Символы.ПС + "PHaDueVFqKkgyqlZPPa003A9Jz/ejXIy+KaxnvFwgEG/y24wFQrx6+sXWzDu93+k" + Символы.ВК + Символы.ПС + "TxTsBpOhkFcY8MI/LBJu+AMuQqhC8jvRKzohiIL9Mf3lRb8A8+FJK+/UducAAAAA" + Символы.ВК + Символы.ПС + "SUVORK5CYII="));
		Если ОписаниеТипов <> Неопределено Тогда
			Если ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC42/Ixj3wAAAcNJREFUOE+NU9suQ0EUPf/iDyTiI0g8eheJROIbCK8IEW2K" + Символы.ВК + Символы.ПС + "JkhoXB4qxKWkfdC4tklzSvUitIi6t6Vu1Vq6hjk9cwgeTiYzZ9Zlr71Ha2/VNPPX" + Символы.ВК + Символы.ПС + "2T/YPDM/h16HE119g2LlnufWu9wr4PnVJTinZqEfxHGXu8dToYCrTAZBfR9Drmnw" + Символы.ВК + Символы.ПС + "v5XEICgrYCekowTgrfSO12IRVU19yD+/IPf4hLv7PHwb23SikAgC9/IiguF9BUx1" + Символы.ВК + Символы.ПС + "EkjwdSaH9E0G3o1d8L50orE2p2vmG5jKJKCyBJ9d3iJ1fgXb2KSRicaA9GjcsE1l" + Символы.ВК + Символы.ПС + "aZsEB6m0UJbgo9MLrPl3RLAixG77MLIPeVGzGUxlElS32RFKnAplghOpc4QiCfQ4" + Символы.ВК + Символы.ПС + "Rj4JOnoHBDhXX6sE5gnG0DAcxsJmRAFftzRiL54ULTYc3GSzKjgQE8p0YFaOHp0h" + Символы.ВК + Символы.ПС + "cniCQDhaccBa2GeZtucLTGUSSNsSvJdIYtHrr2TALnBIWHMkmRbKVttmsB47xsDo" + Символы.ВК + Символы.ПС + "RKULrIMT5i0PCdO2BmYFu1d8ykQqk7i6vqXUnK2rETXTNpXdHh86v8IzBsk823Ri" + Символы.ВК + Символы.ПС + "G3eJPrNVTJuBsWba/vUtSCL5Gtlntorrv1/jT8/1r7MPBZCljqnY77MAAAAASUVO" + Символы.ВК + Символы.ПС + "RK5CYII="));
			ИначеЕсли ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAIuSURBVDhPrZPbTxNREMb5Y3xXo/HZZ9TE8GB8" + Символы.ВК + Символы.ПС + "8UFNaGJMrHcboNuKULsGGxUTKTWxSm2slhDTJVVMhBB80BgKQu1l2ULbZQu90QK9" + Символы.ВК + Символы.ПС + "bbef52yhTSOoD57kl8nMOfPNZCanre1/HHnxkQEJDhT+Yx9WZyxAfkH194rR9y11" + Символы.ВК + Символы.ПС + "v30aBgmqGM8cRnhcj1qe3zfmfW1Eq8DEM4Tfav4Zr4NpFXC85xD2zyL88y+QN5lU" + Символы.ВК + Символы.ПС + "An1s7+8CypYIZVNEjdpdiL8bb9yXN/cWqGZCqGZDyPVokD55TGX7BQslE0TRa1d9" + Символы.ВК + Символы.ПС + "hdzXiuk/C6hCJIlCkwJ8BBarHc+dbthcHgy9csEw8BRahu1uDJLOoLr2vQWZ+FTA" + Символы.ВК + Символы.ПС + "PGhDKp1FYVlAIJrARjik2tMXtU0RKiDHJ1EhyPEp5HTnkD5xBD3sEyTTGZRW4yhK" + Символы.ВК + Символы.ПС + "Ig5csCAhRCEEI+BjCXR2mevDdIyNoSJwBE/TRjywjrhAj1zYRrGi4LhxFOO+KOYi" + Символы.ВК + Символы.ПС + "KaxkS7hlerwjMOpGOehCOdQKNzGFZZZBsSQjKOVxtKMT3gUJ00tZTOru4Bqz08GI" + Символы.ВК + Символы.ПС + "+w3K/pco+e3YuNGBVPshlWHHOxRkBQev2BpMCzl4fCJ+SFu4rGfrHVidTrV9OfYZ" + Символы.ВК + Символы.ПС + "1fXZBvoHg1gS1xEJCpib59XK3JcAPsz4sSIlcUqjqwsMOZ0GXa8B/WaG0I1+UxdB" + Символы.ВК + Символы.ПС + "p1qyLohrSfC+RdL2bfi+ziNGktvPX8XZm/ebq9zvV9N9X2IGcP2eBVq9Cdq7D2li" + Символы.ВК + Символы.ПС + "I/kXf1WIeuufWvwAAAAASUVORK5CYII="));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAABFSURBVDhPY2AYPiA7O/s/CMN8BOMj0Q14fYvL" + Символы.ВК + Символы.ПС + "ADQDcRtCyACQQVA12A0hwQC4N1G8NKQMIC8M8AYgUgiTnw6GT5Yg2ScAOrt7BzPC" + Символы.ВК + Символы.ПС + "tocAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAH5SURBVDhPrZPfT1JhGMf507qQOaVaxpRumZCQ" + Символы.ВК + Символы.ПС + "5fLGiyhlaxEGGmvFKjEhRTaXsxyWDLDjRpScZjWYVMOSOQMn1Fi1fuqn8542Fp20" + Символы.ВК + Символы.ПС + "G8/2XJy9z/t93u/387463X5+r5LnnCtxLxH3UZYiNrX+/Bfre857nexnpyaxGLGy" + Символы.ВК + Символы.ПС + "szHI90IfP8p3WLjVzsflU2TCnewpICa+L4RITR2nmhuglD5JadlDMtBOMW5hfvjg" + Символы.ВК + Символы.ПС + "/wVyD1xMnDcg3TCRvGZEnnYQPKsnpmzeVUB4E9MzSv0s3UYKdfA130NN7uZTYZSY" + Символы.ВК + Символы.ПС + "30hZsjHnNfDPHIR3Nq+SuNJGJetBCnawsWjlzXwnxUcuVeDlXTPjA81MDZm0NlTv" + Символы.ВК + Символы.ПС + "eaXRd5gva2MkAkaqj+28SypZZEeI+o7wNmohcEavliZIIfBkskv1Kc8OEuzXM+Nu" + Символы.ВК + Символы.ПС + "UZsTkxfw9R7A39fEyG4Cwvt20UEudZlxbxu5xAlycRvZmJUX9y08f6iIXjyEPGNW" + Символы.ВК + Символы.ПС + "c9CcIB0yU33azYe8l9TEMSoZO5UlO5tpG6VUF+Vnl+oo77lbtQLSdRPbhd4GAp+z" + Символы.ВК + Символы.ПС + "Perl+ZvEtKtFKyDS31Imbq3crBNYX7CyplweQWJd9jeQ0FgQ6YuJ30pzdQKVlF1l" + Символы.ВК + Символы.ПС + "L0jUVmcbSGgFhgxOQWA1HWbM0UTU04o4atjZzKhDjxwPMXz6N4mY0rufD1j3C7vu" + Символы.ВК + Символы.ПС + "vw0TxEc9AAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("МоментВремени") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADuSURBVDhPY/j//z9FGIXjbmHBEaqlZQaikcXxYTjDxdqa" + Символы.ВК + Символы.ПС + "N0lW9k4BH9/vZBmZ2/4GBjzICnFhBgcHh/8gDDTgfz4///8SLq7/QEP+u1pZgcUJ" + Символы.ВК + Символы.ПС + "YbhJIBeAbC7k5f2dIi19O1BPjxvZJlwYhROvoMAWpapqCqKRxfFhrIKkYKyCMKyS" + Символы.ВК + Символы.ПС + "1N+gXT0ZyMSUcwKKg+QxJJCxcd5EIIVdDoRB8lglYBhoA5DCLgfCIHmsEjAMUgDE" + Символы.ВК + Символы.ПС + "NhHVq8DOhYo1QPk2IHmsGmEYpADkV4a0mRgYGgbYNcIwSAHIJopcgC6GjAkaQI1Y" + Символы.ВК + Символы.ПС + "aAD5FV0chCFh0N8AAGaTn8a00cVlAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("Граница") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADzSURBVDhPY/j//z8KdnBwAFKoYvgwCidMQ4Pbxcrqf5CO" + Символы.ВК + Символы.ПС + "DheyOD4MZ8QrKIilSkndz+fn/58oJ3fTzdKSKEPATnawt//vYW7+v4CP738JF9f/" + Символы.ВК + Символы.ПС + "XCGh/y7W1v/BcgQw3KQYJSWxFCmpu3kCAiAXXHe3sOBEtgkXRuFEqqmxgmz2NzBg" + Символы.ВК + Символы.ПС + "QRbHhzEEQM5CF8OHMQSQDVBJ6m/Qrp4M5yNjJ6A4SB5DAtkA47yJcDY2DJLHEERz" + Символы.ВК + Символы.ПС + "AZyNDYPkMQTRDQBim4jqVWDnQsUaoHwbkDxBA0B+ZUibiYGhYUDYAJBNFLkAxsaG" + Символы.ВК + Символы.ПС + "CRpAjVhoAPkVxkfGkDDobwAAFxmTw3vLbs8AAAAASUVORK5CYII="));
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
&НаКлиенте
// Открывает дополнительную/вспомогательную форму
//
// Параметры:
//	Имя - Строка - Имя формы
//	Параметры - Структура - Параметры формы (необязательный)
//	Владелец - Форма - Форма владелец
//	Уникальность - Произвольный - Уникальность (необязательный)
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии (необязательный)
//
Процедура УКО_ФормыКлиент_ОткрытьДополнительную(Имя, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если УКО_ОбщегоНазначенияКлиентСервер_РежимЗапускаВнешняяОбработка() Тогда
		ОбъектФорм = СтрШаблон("ВнешняяОбработка.%1%2.Форма.", УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения());
	Иначе
		ОбъектФорм = "ОбщаяФорма";
	КонецЕсли;
	
	ПолноеИмяФормы = СтрШаблон("%1.%2%3", ОбъектФорм, УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения(), Имя);
	
	Если Владелец = Неопределено Тогда
		РежимОткрытия = Неопределено;
	Иначе 
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, Параметры, Владелец, Уникальность,,,ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	
КонецПроцедуры
&НаСервереБезКонтекста
// Получает картинку по типу
//
// Параметры:
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип) Экспорт
	
	Если Тип = Тип("ТаблицаЗначений") Тогда 
		Результат = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъектаКоллекцииМетаданных = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(ОбъектМетаданных.ПолноеИмя());
			Результат = БиблиотекаКартинок[ИмяОбъектаКоллекцииМетаданных];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Открывает форму редактирования типа значения
//
// Параметры:
//	Владелец - Форма/Элемент - Владелец
//	РежимРедактирования - Перечисление.УКО_РежимРедактированияТипаЗначения - Режим редактирования типа значения
//	Значение - Произвольный/ОписаниеТипов - Значение
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	 *Заголовок - Строка - Заголовок
//	 *ЗакрыватьПриВыборе - Булево - Закрывать при выборе
//	 *ИсключаемыеТипы - Строка - Исключаемые типы через запятую
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеТипаЗначения(Владелец, РежимРедактирования, Значение, ОписаниеОповещенияЗавершение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Значение", Значение);
	ПараметрыФормы.Вставить("Режим", РежимРедактирования);
	
	ПараметрыФормы.Вставить("Заголовок", УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "Заголовок", ""));
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ЗакрыватьПриВыборе", Истина));
	ПараметрыФормы.Вставить("ИсключаемыеТипы", УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ИсключаемыеТипы", ""));
	
	ВыборТипа = (РежимРедактирования = "Перечисление.УКО_РежимРедактированияТипаЗначения.ВыборТипа");
	ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("ВыборТипа", ВыборТипа);
	
	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеТипаЗначения", ПараметрыФормы, Владелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает префикс объектов расширения
// Возвращаемое значение:
//   Строка	- Префикс объектов расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ПрефиксРасширения() Экспорт 
	
	Возврат "УКО_";
	
КонецФункции
&НаКлиенте
// Открывает форму редактирования колонки таблицы значений
//
// Параметры:
//	Режим - УКО_РежимРедактированияКолонкиТаблицыЗначений - Режим редактирования
//	Идентификатор - Строка - Идентификатор
//	ОписаниеТипов - ОписаниеТипов - Описание типов
//	Индексировать - Булево - Индексировать
//	ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//	Владелец - Форма/Элемент - Владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура УКО_ФормыКлиент_ОткрытьРедактированиеКолонкиТаблицыЗначений(Режим, Идентификатор, ОписаниеТипов, Индексировать, ЗанятыеИдентификаторы, Владелец, ОписаниеОповещенияЗавершение) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", Режим);
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыФормы.Вставить("ОписаниеТипов", ОписаниеТипов);
	ПараметрыФормы.Вставить("Индексировать", Индексировать);
	ПараметрыФормы.Вставить("ЗанятыеИдентификаторы", ЗанятыеИдентификаторы);

	УКО_ФормыКлиент_ОткрытьДополнительную("РедактированиеКолонкиТаблицыЗначений", ПараметрыФормы, Владелец,, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры
&НаКлиенте
// Выгрузить колонку коллекции
//
// Параметры:
//	Коллекция - КоллекцияФормы - Коллекция формы
//	Имя - Строка - Имя колонки
//	ИмяИсключение - Строка - Имя исключение
//
// Возвращаемое значение:
//	Массив - Массив значений колонки
//
Функция УКО_ФормыКлиент_ВыгрузитьКолонкуКоллекции(Коллекция, Имя, ИмяИсключение = "") Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Строка Из Коллекция Цикл 
		
		Если ИмяИсключение <> Строка[Имя] Тогда
			Результат.Добавить(Строка[Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
// Открывает диалог вопрос с возможностью ставить "Больше не показывать"
//
// Параметры:
//	ОписаниеОповещенияОЗавершении - ОписаниеОповещения - Описание оповещения при завершении
//	Текст - Строка - Текст вопроса
//	Кнопки - СписокЗначений - Кнопки вопроса
//	КнопкаПоУмолчанию - Произвольный - Значение кнопки по умолчанию
//	Заголовок - Строка - Заголовок окна вопроса
//	ФормаВладелец - Форма - Форма владелец
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//		* ИмяНастройкиБольшеНеПоказывать - Строка - Имя настройки для "Больше не показывать"
//		* БольшеНеПоказывать - Булево - Больше не показывать данный вопрос
//
Процедура УКО_ФормыКлиент_ЗадатьВопрос(ОписаниеОповещенияОЗавершении, Текст, Кнопки, КнопкаПоУмолчанию, Заголовок, ФормаВладелец, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяНастройкиБольшеНеПоказывать = Неопределено;
	БольшеНеПоказывать = Ложь;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ИмяНастройкиБольшеНеПоказывать = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "ИмяНастройкиБольшеНеПоказывать");
		БольшеНеПоказывать = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "БольшеНеПоказывать", Ложь);
	КонецЕсли;
	
	Если БольшеНеПоказывать Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КнопкаПоУмолчанию);
		
	Иначе 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Текст", Текст);
		ПараметрыФормы.Вставить("Заголовок", Заголовок);
		ПараметрыФормы.Вставить("Кнопки", Кнопки);
		ПараметрыФормы.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
		Если ЗначениеЗаполнено(ИмяНастройкиБольшеНеПоказывать) Тогда
			ПараметрыФормы.Вставить("ИмяНастройкиБольшеНеПоказывать", ИмяНастройкиБольшеНеПоказывать);
		КонецЕсли;
		
		УКО_ФормыКлиент_ОткрытьДополнительную("Вопрос", ПараметрыФормы, ФормаВладелец,, ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
