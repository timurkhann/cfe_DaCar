#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.Копировать.Картинка = Элементы.БиблиотекаКартинокУКО_КопироватьВБуферОбмена.Картинка;
	
	Данные = Параметры.Данные;
	Тип = Параметры.Тип;
	
	ЭтаЗапрос = (Параметры.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос");
	ЭтоСхемаКомпоновкиДанных = (Параметры.Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных");
	
	Язык = ОбъектОбработки().УКО_ОбщегоНазначения_КодЯзыкаПрограммирования();
	ОбъектОбработки().УКО_Формы_ЗаполнитьСписокВыбораЯзыкПрограммирования (Элементы.Язык);
	
	Если ЭтаЗапрос Тогда
		
		ДобавлятьКомментарии = Истина;
		ИмяФункции = НСтр("ru = 'ВыполнитьЗапрос'; en = 'ExecuteQuery'", Язык);
		
		КоличествоЗапросов = ОбъектОбработки().УКО_Запрос_КоличествоЗапросовВПакете(Данные.Текст);
		КоличествоЗапросовСВременнымиТаблицами = ОбъектОбработки().УКО_Запрос_КоличествоЗапросовВПакете(Данные.Текст, , Ложь);
		КоличествоЗапросовСРезультатом = ОбъектОбработки().УКО_Запрос_КоличествоЗапросовВПакете(Данные.Текст, Ложь);
		ЕстьЗапросыСозданияВременнойТаблицы = (КоличествоЗапросовСВременнымиТаблицами > 0);
		ЕстьЗапросыСРезультатом = (КоличествоЗапросовСРезультатом > 0);
		
		МенеджерВременныхТаблиц = ЕстьЗапросыСозданияВременнойТаблицы;
		МенеджерВременныхТаблицДоступен = ЕстьЗапросыСозданияВременнойТаблицы И (КоличествоЗапросов <> КоличествоЗапросовСВременнымиТаблицами);
		
		Элементы.МенеджерВременныхТаблиц.Доступность = МенеджерВременныхТаблицДоступен;
		
		ВидРезультата = "Перечисление.УКО_ВидРезультатаЗапроса.Запрос";
		СписокВыбораВидРезультата = Элементы.ВидРезультата.СписокВыбора;
		СписокВыбораВидРезультата.Добавить("Перечисление.УКО_ВидРезультатаЗапроса.Запрос");
		Если КоличествоЗапросов > 1 Тогда
			Элементы.ВидРезультата.СписокВыбора.Добавить("Перечисление.УКО_ВидРезультатаЗапроса.Пакет", НСтр("ru = 'Пакет'; en = 'Package'"));
		КонецЕсли;
		Элементы.ВидРезультата.Видимость = СписокВыбораВидРезультата.Количество() > 1;
		
	ИначеЕсли ЭтоСхемаКомпоновкиДанных Тогда
		
		ИспользуетсяВОтчете = Истина;
		ВыводРезультатаВ = "Перечисление.УКО_ВариантыВыводаРезультатаСКД.ТабличныйДокумент";
		
	КонецЕсли;
	
	Элементы.ГруппаЗапрос.Видимость = ЭтаЗапрос;
	Элементы.ГруппаСхемаКомпоновкиДанных.Видимость = ЭтоСхемаКомпоновкиДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарииПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерВременныхТаблицПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРезультатаПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВФункциюПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФункцииПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();

КонецПроцедуры

&НаКлиенте
Процедура ВыборкаПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРезультатаПриИзменении(Элемент)
	
	Если ВидРезультата = "Перечисление.УКО_ВидРезультатаЗапроса.Пакет" Тогда
		ПроверкаРезультата = Ложь;
		Выборка = Ложь;
	КонецЕсли;
	
	ОбновитьЭлементыУправления();

КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВОтчетеПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();

КонецПроцедуры

&НаКлиенте
Процедура ВыводРезультатаВПриИзменении(Элемент)
	
	ОбновитьЭлементыУправления();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Копировать(Команда)
	
	УКО_БуферОбменаКлиент_Копировать(КодНаВстроенномЯзыке);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьЭлементыУправления()
	
	ЭтаЗапрос = (Тип = "Перечисление.УКО_ЭлементыДанных.Запрос");
	ЭтоСхемаКомпоновкиДанных = (Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных");

	Если ЭтаЗапрос Тогда
		
		ДополнениеЗаголовка = НСтр("ru = 'Запрос'; en = 'Query'");
		
		ВидРезультатаЗапрос = (ВидРезультата = "Перечисление.УКО_ВидРезультатаЗапроса.Запрос");
		Элементы.ПроверкаРезультата.Доступность = ВидРезультатаЗапрос;
		Элементы.Выборка.Доступность = ВидРезультатаЗапрос;
		
		Настройки = Новый Структура;
		Настройки.Вставить("ДобавлятьКомментарии", ДобавлятьКомментарии);
		Настройки.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
		Настройки.Вставить("ВидРезультата", ВидРезультата);
		Настройки.Вставить("ПроверкаРезультата", ПроверкаРезультата);
		Настройки.Вставить("ВключитьВФункцию", ВключитьВФункцию);
		Настройки.Вставить("ИмяФункции", ИмяФункции);
		Настройки.Вставить("Выборка", Выборка);
		Настройки.Вставить("Язык", Язык);
		
		КодНаВстроенномЯзыке = УКО_КодНаВстроенномЯзыкеВызовСервера_Запрос(Данные, Настройки);
		
	ИначеЕсли ЭтоСхемаКомпоновкиДанных Тогда
		
		ДополнениеЗаголовка = НСтр("ru = 'Схема компоновки данных'; en = 'Data composition schema'");
		
		Настройки = Новый Структура;
		Настройки.Вставить("ДобавлятьКомментарии", ДобавлятьКомментарии);
		Настройки.Вставить("ИспользуетсяВОтчете", ИспользуетсяВОтчете);
		Настройки.Вставить("ВыводРезультатаВ", ВыводРезультатаВ);
		Настройки.Вставить("Язык", Язык);
		
		КодНаВстроенномЯзыке = УКО_КодНаВстроенномЯзыкеВызовСервера_СхемаКомпоновкиДанных(Данные, Настройки);
		
	КонецЕсли;
	
	УКО_ФормыКлиентСервер_Заголовок(ЭтаФорма, СтрШаблон(НСтр("ru = 'Код на встроенном языке (%1)'; en = 'Code in the built-in language (%1)'"), ДополнениеЗаголовка));

КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает по объекту метаданных доступны ли для него предопределенные элементы
//
// Параметры:
//   ИмяОбъекта - Строка - Имя объекта метаданных
//
// Возвращаемое значение:
//   Булево - Истина, доступны предопределенные элементы
//
Функция УКО_МетаданныеКлиентСервер_ОбъектCПредопределенными(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Справочник" 
				ИЛИ ИмяОбъекта = "Catalog"
				ИЛИ УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта)
				ИЛИ ИмяОбъекта = "ПланВидовХарактеристик"
				ИЛИ ИмяОбъекта = "ChartOfCharacteristicTypes"
				ИЛИ ИмяОбъекта = "ПланСчетов"
				ИЛИ ИмяОбъекта = "ChartOfAccounts"
				ИЛИ ИмяОбъекта = "ПланВидовРасчета"
				ИЛИ ИмяОбъекта = "ChartOfCalculationTypes";

КонецФункции
&НаКлиенте
// Копирует текст в буфер обмена (Через HTML)
//
// Параметры:
//	Текст - Строка - Текст
Процедура УКО_БуферОбменаКлиент_Копировать(Текст) Экспорт
	
    ОбъектHTML = Новый COMОбъект("htmlfile");
    ОбъектHTML.ParentWindow.ClipboardData.Setdata("Text", Текст);
	
КонецПроцедуры
&НаСервере
// Получает код для схемы компоновки данных
//
// Параметры:
//  Данные  - Данные - Данные
//  Настройки  - Структура - Настройки генерации текста
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для схемы компоновки данных
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_СхемаКомпоновкиДанных(Данные, Настройки) Экспорт
	
	Возврат	ОбъектОбработки().УКО_КодНаВстроенномЯзыке_СхемаКомпоновкиДанных(Данные, Настройки);
	
КонецФункции
&НаСервере
// Получает код для запроса
//
// Параметры:
//  Данные  - Данные - Данные
//  Настройки  - Структура - Настройки генерации текста
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для запроса
//
Функция УКО_КодНаВстроенномЯзыкеВызовСервера_Запрос(Данные, Настройки) Экспорт
	
	Возврат	ОбъектОбработки().УКО_КодНаВстроенномЯзыке_Запрос(Данные, Настройки);
	
КонецФункции
&НаСервере
// Вычисляет значение выражения на встроенном языке
//
// Параметры:
//  Алгоритм  - Строка - Алгоритм на встроенном языке
//  Комментарий  - Строка - Комментарий
//
// Возвращаемое значение:
//   Произвольный - Результат вычисления выражения на встроенном языке
//
Функция УКО_ОбщегоНазначенияВызовСервера_ВычислитьВыражениеНаВстроенномЯзыке(Алгоритм, Комментарий) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		
		Результат = ОбъектОбработки().УКО_ОбщегоНазначения_ВычислитьРезультатВыражениеВБезопасномРежиме(Алгоритм);
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке().Причина.Описание;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СтрШаблон(НСтр("ru = 'Вычисление выражения (%1):
		|%2
		|Ошибка: %3'; en = 'The computation of the expression (%1):
		|%2
		|Error: %3'"), Комментарий, Алгоритм, ОписаниеОшибки);
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код английского языка
// Возвращаемое значение:
//   Строка	- Код английского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Экспорт
	Возврат "en";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает версию расширения
// Возвращаемое значение:
//   Строка	- версию расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения() Экспорт
	
	Возврат "3.8.9";
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает код русского языка
// Возвращаемое значение:
//   Строка	- Код русского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() Экспорт
	Возврат "ru";
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Определяет этот объект перечисление
//
// Параметры:
//   ИмяОбъекта - Строка - Объект метаданных
//
// Возвращаемое значение:
//   Булево - Истина, это имя перечисление
//
Функция УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Перечисление" 
				ИЛИ ИмяОбъекта = "Enum";

КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Проверяет строка многострочная?
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, если строка многострочная
//
Функция УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Строка) Экспорт
	
	Возврат Булево(СтрНайти(Строка, Символы.ПС));
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает Число в виде строки
//
// Параметры:
//   Число - Число - Преобразуемое число
//
// Возвращаемое значение:
//   Строка - Число в виде строки
//
Функция УКО_СтрокиКлиентСервер_ЧислоВСтроку(Число) Экспорт
	
	Возврат Формат(Число, "ЧН=; ЧГ=");
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя расширения
//
// Возвращаемое значение:
//   Строка	- полное имя расширения
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения() Экспорт
	
	Возврат СтрШаблон("%1 %2", УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения());
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Возвращает имя переменной для возврата значений редактирование выражения
// Параметры:
//   КодЯзыка - Строка - Код языка
// Возвращаемое значение:
//   Строка	- Имя переменной
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения(КодЯзыка) Экспорт
	Возврат НСтр("ru = 'Результат'; en = 'Result'", КодЯзыка);
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Добавляет табуляцию в многострочный текст
//
// Параметры:
//   Текст - Строка - Текст
//   ДобавлятьВПервуюСтрока - Булево - Добавлять в первую строку
//   Количество - Число - Количество добавляемых табуляций
//
// Возвращаемое значение:
//   Строка - Текст с добавленной табуляцией
//
Функция УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(Текст, ДобавлятьВПервуюСтрока = Истина, Количество = 1) Экспорт
	
	ВставляемыеСимволы = "";
	Для Счетчик = 1 По Количество Цикл 
		ВставляемыеСимволы = ВставляемыеСимволы + Символы.Таб;
	КонецЦикла;
	
	Результат = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + ВставляемыеСимволы);
	Если ДобавлятьВПервуюСтрока Тогда
		Результат = ВставляемыеСимволы + Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
// Обновляет заголовок формы
//
// Параметры:
//  Форма - Форма - Форма
//  Заголовок - Строка - Заголовок формы
//  Дополнение - Булево - Дополнять заголовок названием расширения
//
Процедура УКО_ФормыКлиентСервер_Заголовок(Форма, Заголовок, Дополнение = Ложь) Экспорт
	
	НовыйЗаголовок = Заголовок;
	
	Если Дополнение Тогда
		НовыйЗаголовок = НовыйЗаголовок + " : " + УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	КонецЕсли;
	
	Форма.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры
