#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сведения о внешней обработке для подключения к БСП (Дополнительные отчеты и обработки)
Функция СведенияОВнешнейОбработке() Экспорт
	
	ИмяРасширения = УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения();
	ВерсияРасширения = УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения();
	ИдентификаторРасширения = УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения();
	
    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Наименование", ИмяРасширения);
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
    РегистрационныеДанные.Вставить("Версия", ВерсияРасширения);
    РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
    РегистрационныеДанные.Вставить("Информация", ИмяРасширения);
   
    ТЗКоманд = Новый ТаблицаЗначений;
    ТЗКоманд.Колонки.Добавить("Идентификатор");
    ТЗКоманд.Колонки.Добавить("Представление");
    ТЗКоманд.Колонки.Добавить("Модификатор");
    ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение");
    ТЗКоманд.Колонки.Добавить("Использование");
   
    ДобавляемаяКоманда = ТЗКоманд.Добавить();
    ДобавляемаяКоманда.Идентификатор = ИдентификаторРасширения;
    ДобавляемаяКоманда.Представление = ИмяРасширения;
    ДобавляемаяКоманда.ПоказыватьОповещение = Истина;
    ДобавляемаяКоманда.Модификатор = "";
    ДобавляемаяКоманда.Использование = "ОткрытиеФормы";
   
    РегистрационныеДанные.Вставить("Команды", ТЗКоманд);
   
    Возврат РегистрационныеДанные;
               
КонецФункции

#КонецОбласти

#КонецЕсли
// Производит чтение данных из строки (MCR формат)
// Параметры:
//  СтрокаДерева  - СтрокаДерева - Строка дерева
//  ДанныеЭлемента  - Структура - Данные элемента
//
// Возвращаемое значение:
//   Массив - Данные
//
Функция УКО_MCRФормат_ПрочитатьДанные(СтрокаДерева, ДанныеЭлемента = Неопределено) Экспорт
	
	Данные = Новый Массив;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		Если Строка.Имя = "Parameters" Тогда
			
			ДанныеЭлемента.Вставить("Parameters", УКО_MCRФормат_ЧтениеПараметровЗапроса(Строка));
			
		ИначеЕсли Строка.Имя = "TemporaryTables"
			ИЛИ Строка.Имя = "ExternalSources" Тогда
			
			ДанныеЭлемента.Вставить("ExternalSources", УКО_MCRФормат_ЧтениеВнешнихИсточников(Строка));
			
		ИначеЕсли Строка.Имя = "ProcessingAlgorithms" Тогда
			
			ДанныеЭлемента.Вставить("ProcessingAlgorithms", УКО_MCRФормат_ЧтениеАлгоритмовОбработки(Строка));
			
		ИначеЕсли Строка.Имя = "OutputTemporaryTables" Тогда
			
			ДанныеЭлемента.Вставить("OutputTemporaryTables", УКО_MCRФормат_ЧтениеНастроекВыводаВременныхТаблиц(Строка));
			
		Иначе
			
			ДанныеНовогоЭлемента = Новый Структура;
			ДанныеНовогоЭлемента.Вставить("Type", Строка(Строка.Имя));
			ДанныеНовогоЭлемента.Вставить("Text", "");
			
			Если ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
				
				Для Каждого Поле Из Строка.Значение Цикл 
					
					ТипПоля = УКО_MCRФорматКлиентСервер_ТипЗначенияПоля(Поле.Ключ);
					ДанныеНовогоЭлемента.Вставить(Поле.Ключ, XMLЗначение(ТипПоля, Поле.Значение));
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеНовогоЭлемента.Вставить("Elements", УКО_MCRФормат_ПрочитатьДанные(Строка, ДанныеНовогоЭлемента));
			
			Данные.Добавить(ДанныеНовогоЭлемента);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции
// Производит чтение данных из строки (MCR формат)
//
// Параметры:
//  Строка  - Строка - Имя Type
//
// Возвращаемое значение:
//   Перечисления.УКО_ЭлементыДанных - Перечисление Type
//
Функция УКО_MCRФормат_ЧтениеType(Строка) Экспорт
	
	Результат = "";
	Если Строка = "Query" Тогда
		Результат = "Перечисление.УКО_ЭлементыДанных.Запрос";
	ИначеЕсли Строка = "Group" Тогда
		Результат = "Перечисление.УКО_ЭлементыДанных.Группа";
	ИначеЕсли Строка = "DataCompositionSchema" Тогда
		Результат = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных";
	ИначеЕсли Строка = "DCSSettingsVariant" Тогда
		Результат = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД";
	ИначеЕсли Строка = "DCSUserSettings" Тогда
		Результат = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
// Производит обработку загруженных данных дополняя
//
// Параметры:
//  Данные  - Данные - Данные
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//
Процедура УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки(Данные, УникальныйИдентификатор) Экспорт
	
	Для Каждого ЭлементДанных Из Данные Цикл 
		
		ЭлементДанных.Вставить("UID", Новый УникальныйИдентификатор);
		ЭлементДанных.Type = УКО_MCRФормат_ЧтениеType(ЭлементДанных.Type);
		
		Если ЭлементДанных.Type = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда 
			
			// Проверим запрос
			Результат = УКО_Запрос_ПроверитьТекст(ЭлементДанных.Text);
			ЭлементДанных.Вставить("ТребуетсяПроверка", Ложь);
			ЭлементДанных.Вставить("Параметры", Результат.Параметры);
			ЭлементДанных.Вставить("ВременныеТаблицы", Результат.ВременныеТаблицы);
			ЭлементДанных.Вставить("Ошибка", УКО_ЗапросКлиентСервер_ИнформацияООшибке(Результат.ТекстОшибки));
			
			// Обработка ТЗ в параметрах и временных таблицах
			Если ЭлементДанных.Свойство("Parameters") Тогда
				
				Для Каждого Параметр Из ЭлементДанных.Parameters Цикл 
					
					ЗначениеПараметра = Параметр.Значение;
					
					Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
						
						СписокЗначений = Новый СписокЗначений;
						Для Каждого ЭлементСписка Из ЗначениеПараметра Цикл 
							СписокЗначений.Добавить(ЭлементСписка);
						КонецЦикла;
						
						ЭлементДанных.Parameters.Вставить(Параметр.Ключ, СписокЗначений);
						
					ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
						
						Значение = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений", ПоместитьВоВременноеХранилище(ЗначениеПараметра, УникальныйИдентификатор));
						ЭлементДанных.Parameters.Вставить(Параметр.Ключ, Значение);
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЭлементДанных.Type = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда 
			
			// Проверим схему компоновки данных
			Результат = УКО_СКД_ПроверитьТекст(ЭлементДанных.Text);
			ЭлементДанных.Вставить("ТребуетсяПроверка", Ложь);
			ЭлементДанных.Вставить("Ошибка", УКО_СКДКлиентСервер_ИнформацияООшибке(Результат));
			
		КонецЕсли;
		
		Если ЭлементДанных.Свойство("ExternalSources") Тогда
			
			Для Каждого ВременнаТаблица Из ЭлементДанных.ExternalSources Цикл 
				
				ОписаниеВнешнегоИсточника = ВременнаТаблица.Значение;
				Если ТипЗнч(ОписаниеВнешнегоИсточника.Значение) = Тип("ТаблицаЗначений") Тогда
					ОписаниеВнешнегоИсточника.Значение = ПоместитьВоВременноеХранилище(ОписаниеВнешнегоИсточника.Значение, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭлементДанных.Свойство("Elements") Тогда
			УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки(ЭлементДанных.Elements, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// Записывает данные в файл
//
// Параметры:
//  Данные  - Данные - Полное имя Zip файла
//  ИмяФайла  - Строка - Полное имя файла
//
Процедура УКО_MCRФормат_ЗаписатьДанныеВФайл(Данные, ИмяФайла) Экспорт 
	
	ДвоичныеДанные = УКО_MCRФормат_ДвоичныеДанныеMCR(Данные);
	ДвоичныеДанные.Записать(ИмяФайла);
	
КонецПроцедуры
// Получает двоичиные данные MCR
//
// Параметры:
//  Данные  - Данные - Полное имя Zip файла
//
// Возвращаемое значение:
//   ДвоичныеДанные - Двоичиные данные MCR
//
Функция УКО_MCRФормат_ДвоичныеДанныеMCR(Данные) Экспорт 
	
	ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеXML = УКО_MCRФормат_ДвоичныеДанныеXML(Данные);
	ДвоичныеДанныеXML.Записать(ИмяФайлаXML);
	
	ПотокЗаписи = Новый ПотокВПамяти;
	
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ПотокЗаписи);
	ЗаписьZipФайла.Добавить(ИмяФайлаXML);
	ЗаписьZipФайла.Записать();
	
	// Удалим временные файлы
	УдалитьФайлы(ИмяФайлаXML);
	
	Возврат ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции
// Сохраняет данные объекта в настройки
//
// Параметры:
//  Тип  - Перечисления.УКО_ЭлементыДанных - Тип элементы данных
//
// Возвращаемое значение:
//   Строка - Представление Type
//
Функция УКО_MCRФормат_ЗначениеTypeВXML(Тип) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Перечисление.УКО_ЭлементыДанных.Запрос", "Query");
	Соответствие.Вставить("Перечисление.УКО_ЭлементыДанных.Группа", "Group");
	Соответствие.Вставить("Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных", "DataCompositionSchema");
	Соответствие.Вставить("Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД", "DCSSettingsVariant");
	Соответствие.Вставить("Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД", "DCSUserSettings");
	
	Возврат Соответствие.Получить(Тип);

КонецФункции

Функция УКО_MCRФормат_ЧтениеПараметровЗапроса(СтрокаДерева)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		ДанныеПараметра = Строка.Значение;
		
		ЗначениеПараметра = УКО_MCRФормат_ЧтениеЗначенияПараметраЗапроса(Строка);
		
		Если ЗначениеПараметра <> Неопределено Тогда 
			ЗначенияПараметров.Вставить(ДанныеПараметра.Name, ЗначениеПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеВнешнихИсточников(СтрокаДерева)
	
	ВнешниеИсточники = Новый Соответствие;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		Данные = Строка.Значение;
		
		Type = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Данные, "Type", НСтр("ru = 'Значение'; en = 'Value'"));
		Если Type = "Expression" Тогда
			
			Type = НСтр("ru = 'Выражение'; en = 'Expression'");
			Значение = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Строка.Значение, "Value", "");
			
		Иначе
			
			Значение = УКО_MCRФормат_ЧтениеЗначенияТаблицыЗначений(Строка);
			
		КонецЕсли;
		
		ОписаниеВнешнегоИсточника = УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(Данные.Name, Type, Значение);
		ВнешниеИсточники.Вставить(Новый УникальныйИдентификатор, ОписаниеВнешнегоИсточника);
		
	КонецЦикла;
	
	Возврат ВнешниеИсточники;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеАлгоритмовОбработки(СтрокаДерева)
	
	АлгоритмыОбработки = Новый СписокЗначений;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		Данные = Строка.Значение;
		
		Код = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Данные, "Code", "");
		
		ПрерыватьПриОшибке = Ложь;
		Если Данные.Свойство("AbortOnError") Тогда
			ПрерыватьПриОшибке = XMLЗначение(Тип("Булево"), Данные.AbortOnError);
		КонецЕсли;
		
		ТранзакцияСтрока = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Данные, "Transaction", "");
		Если ТранзакцияСтрока = "" Тогда
			Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.ПоСтроке";
		ИначеЕсли ТранзакцияСтрока = "NotUse" Тогда
			Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.НеИспользовать";
		ИначеЕсли ТранзакцияСтрока = "ForAll" Тогда
			Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.НаВсе";
		КонецЕсли;
		
		ОписаниеАлгоритмаОбработки = УКО_MCRФорматКлиентСервер_ОписаниеАлгоритмаОбработки(Код, ПрерыватьПриОшибке, Транзакция);

		АлгоритмыОбработки.Добавить(ОписаниеАлгоритмаОбработки, Данные.Presentation);
		
	КонецЦикла;
	
	Возврат АлгоритмыОбработки;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеНастроекВыводаВременныхТаблиц(СтрокаДерева)
	
	Результат = Новый Соответствие;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		Данные = Строка.Значение;
		
		ВыводСтрока = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Данные, "Output", "");
		Если ВыводСтрока = "" Тогда
			Вывод = НСтр("ru = 'Выводить'; en = 'Output'");
		ИначеЕсли ВыводСтрока = "No" Тогда
			Вывод = НСтр("ru = 'Не выводить'; en = 'Do not output'");
		ИначеЕсли ВыводСтрока = "Minimized" Тогда
			Вывод = НСтр("ru = 'Свернуто'; en = 'Minimized'");
		КонецЕсли;
		
		ОписаниеВыводаВременнойТаблицы = УКО_ДанныеКлиентСервер_ОписаниеВыводаВременнойТаблицы(Вывод);
		Результат.Вставить(Данные.Name, ОписаниеВыводаВременнойТаблицы);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеЗначенияПараметраЗапроса(СтрокаДерева)
	
	ДанныеПараметра = СтрокаДерева.Значение;
	ТипПараметра = ДанныеПараметра.Type;
	
	ЗначениеПараметра = Неопределено;
	Если ТипПараметра = "Expression" Тогда
		
		ЗначениеПараметра = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Выражение",
													УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеПараметра, "Value", ""));
		
	ИначеЕсли ТипПараметра = "Table" Тогда	//Таблица значений
		
		ЗначениеПараметра = УКО_MCRФормат_ЧтениеЗначенияТаблицыЗначений (СтрокаДерева);
		
	ИначеЕсли ТипПараметра = "PointInTime"
			ИЛИ ТипПараметра = "PointOfTime" Тогда // Момент времени
			// PointOfTime - устаревающий (для совместимости со старыми форматами)
			
		ЗначениеПараметра = УКО_MCRФормат_ЧтениеМоментаВремени(ДанныеПараметра);
		
	ИначеЕсли ТипПараметра = "Boundary" Тогда // Граница
		
		Вид = ВидГраницы.Включая;
		Если ДанныеПараметра.Свойство("BoundaryType") И ДанныеПараметра.BoundaryType = "Excluding" Тогда
			Вид = ВидГраницы.Исключая;
		КонецЕсли;
		
		Значение = Неопределено;
		Если ДанныеПараметра.Свойство("ValueType") Тогда
			
			Если ДанныеПараметра.ValueType = "PointInTime" Тогда // Момент времени
				
				Значение = УКО_MCRФормат_ЧтениеМоментаВремени(ДанныеПараметра);
				
			Иначе
				
				Значение = XMLЗначение(Тип(ДанныеПараметра.ValueType), ДанныеПараметра.Value);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеПараметра = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Граница",
													УКО_Запрос_ОписаниеИзГраницы(Новый Граница(Значение, Вид)));
		
	ИначеЕсли ТипПараметра = "ValueList" Тогда //Список значений
		
		ЗначениеПараметра = Новый СписокЗначений;
		Для Каждого СтрокаПараметр Из СтрокаДерева.Строки Цикл //Блок Items
			ЗначениеПараметра.Добавить (УКО_MCRФормат_ЧтениеЗначенияПараметраЗапроса(СтрокаПараметр));
		КонецЦикла;
		
	ИначеЕсли ТипПараметра = "Type" Тогда
		
		ЗначениеПараметра = Тип(ДанныеПараметра.Value);
		
	Иначе
		
		ЗначениеПараметра = УКО_MCRФормат_ЧтениеЗначенияСТипом(ДанныеПараметра);
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеЗначенияОписанияТипов(ДанныеОписания)
	
	Если ДанныеОписания.Свойство("Types") Тогда
		Типы = СтрРазделить(ДанныеОписания.Types, ",");
		СписокТипов = ДанныеОписания.Types;
	Иначе 
		Типы = Новый Массив;
		СписокТипов = "";
	КонецЕсли;
	
	КвалификаторыЧисла = Неопределено;
	Если Типы.Найти(УКО_XML_ИмяТипа(Тип("Число"))) <> Неопределено Тогда
		
		Разрядность = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеОписания, "Digits", 0);
		РазрядностьДробнойЧасти = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеОписания, "FractionDigits", 0);
		ДопустимыйЗнакСтрока = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеОписания, "AllowedSign", "Any");
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнак[ДопустимыйЗнакСтрока]);
		
	КонецЕсли;
	
	КвалификаторыСтроки = Неопределено;
	Если Типы.Найти(УКО_XML_ИмяТипа(Тип("Строка"))) <> Неопределено Тогда
		
		ДлинаСтроки = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеОписания, "Length", 0);
		ДопустимаяДлинаСтрока = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеОписания, "AllowedLength", "Variable");
		
		КвалификаторыСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина[ДопустимаяДлинаСтрока]);
		
	КонецЕсли;
	
	КвалификаторыДаты = Неопределено;
	Если Типы.Найти(УКО_XML_ИмяТипа(Тип("Дата"))) <> Неопределено Тогда
		
		ЧастиДатыСтрока = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеОписания, "DateFractions", "DateTime");
		КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты[ЧастиДатыСтрока]);
		
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(СписокТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеЗначенияТаблицыЗначений(СтрокаДерева)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	СтрокаValue = СтрокаДерева.Строки.Найти("Value", "Имя");
	
	Если СтрокаValue <> Неопределено Тогда 
		
		Для Каждого СтрокаЗначенияValue Из СтрокаValue.Строки Цикл 
			
			ИмяДанных = СтрокаЗначенияValue.Имя;
			ДанныеКолонки = СтрокаЗначенияValue.Значение;
			
			Если ИмяДанных = "Column" Тогда //Колонка
				
				ТаблицаЗначений.Колонки.Добавить(ДанныеКолонки.Name, УКО_MCRФормат_ЧтениеЗначенияОписанияТипов(ДанныеКолонки));
				КолонкаИндексируется = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеКолонки, "Index", Ложь);
				Если КолонкаИндексируется Тогда
					ТаблицаЗначений.Индексы.Добавить(ДанныеКолонки.Name);
				КонецЕсли;
				
			ИначеЕсли ИмяДанных = "Row" Тогда //Строка
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				Индекс = 0;
				Для Каждого СтрокаЗначениеКолонкиСтроки Из СтрокаЗначенияValue.Строки Цикл 
					
					ЗначениеКолонкиСтроки = СтрокаЗначениеКолонкиСтроки.Значение;
					Если ЗначениеКолонкиСтроки.Свойство("Name") Тогда // Формат по старому до формата 1.3 
						
						НоваяСтрока[ЗначениеКолонкиСтроки.Name] = УКО_MCRФормат_ЧтениеЗначенияСТипом(ЗначениеКолонкиСтроки);
						
					Иначе
						
						Колонка = ТаблицаЗначений.Колонки[Индекс];
						
						Если  Колонка.ТипЗначения.Типы().Количество() > 1 Тогда
							ОписаниеТипов = Неопределено;
						Иначе 
							ОписаниеТипов = Колонка.ТипЗначения;
						КонецЕсли;
							
						НоваяСтрока[Колонка.Имя] = УКО_MCRФормат_ЧтениеЗначенияСТипом(ЗначениеКолонкиСтроки, ОписаниеТипов);
						
					КонецЕсли;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеЗначенияСТипом(ДанныеЗначения, ОписаниеТипов = Неопределено)
	
	Значение = Неопределено;
	
	Если ОписаниеТипов = Неопределено Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов(ДанныеЗначения.Type);
		Тип = Тип(ДанныеЗначения.Type);
		
	Иначе
		
		Типы = Новый Массив;
		Если ЗначениеЗаполнено(ОписаниеТипов.Типы()) Тогда
			Тип = ОписаниеТипов.Типы()[0];
			Типы.Добавить(Тип);
		КонецЕсли;
		
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
		
	КонецЕсли;
	
	Если ДанныеЗначения.Свойство("Value") Тогда
		
		Если Тип = Тип("Тип") Тогда
			Значение = Тип(ДанныеЗначения.Value);
		Иначе
			Значение = XMLЗначение(Тип, ДанныеЗначения.Value);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗначения.Свойство("Type") 
			И ДанныеЗначения.Type = "TypeDescription" Тогда
			
		Результат = Новый ОписаниеТипов(ДанныеЗначения.Types);
		
	Иначе
		
		Результат = ОписаниеТипов.ПривестиЗначение(Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_MCRФормат_ЧтениеМоментаВремени(Данные)
	
	Дата = Дата(1,1,1);
	Если Данные.Свойство("Date") Тогда 
		Дата = XMLЗначение(Тип("Дата"), Данные.Date);
	КонецЕсли;
	
	Ссылка = Неопределено;
	Если Данные.Свойство("ValueRef") Тогда
		Ссылка = XMLЗначение(Тип(Данные.TypeRef), Данные.ValueRef);
	КонецЕсли;
	
	Возврат Новый МоментВремени(Дата, Ссылка);
	
КонецФункции

Функция УКО_MCRФормат_ДвоичныеДанныеXML(Данные)
	
	ПотокЗаписи = Новый ПотокВПамяти;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьПоток(ПотокЗаписи);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Корневой элемент (должен быть обязательно и только один)
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Version", УКО_ОбщегоНазначенияКлиентСервер_MCRПоддерживаемаяВерсия());
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Comment", УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения());
	УКО_MCRФормат_ЗаписатьДанныеВXML(ЗаписьXML, Данные);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

Процедура УКО_MCRФормат_ЗаписатьДанныеВXML(ЗаписьXML, Данные)
	
	Для Каждого ЭлементДанных Из Данные Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(УКО_MCRФормат_ЗначениеTypeВXML(ЭлементДанных.Type));
		
		Для Каждого ПолеДанных Из ЭлементДанных Цикл
			
			ИмяПоля = ПолеДанных.Ключ;
			ЗначениеПоля = ПолеДанных.Значение;
			
			Если ИмяПоля = "Elements" Тогда
				
				УКО_MCRФормат_ЗаписатьДанныеВXML(ЗаписьXML, ЭлементДанных.Elements);
				
			ИначеЕсли ИмяПоля = "Type" Тогда
				
				Продолжить;
				
			ИначеЕсли ИмяПоля = "Parameters" Тогда
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters"); //<Parameters>
					
					Для Каждого Параметр Из ЗначениеПоля Цикл 
						
						УКО_MCRФормат_ЗаписатьПараметрЗапросаВXML(ЗаписьXML, Параметр.Ключ, Параметр.Значение);
						
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //</Parameters>
					
				КонецЕсли;
				
			ИначеЕсли ИмяПоля = "ExternalSources" Тогда
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ExternalSources"); //<ExternalSources>
					
					Для Каждого ВнешнийИсточник Из ЗначениеПоля Цикл 
						УКО_MCRФормат_ЗаписатьВнешнийИсточникВXML(ЗаписьXML, ВнешнийИсточник.Значение);
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //</ExternalSources>
					
				КонецЕсли;
				
			ИначеЕсли ИмяПоля = "ProcessingAlgorithms" Тогда
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ProcessingAlgorithms"); //<ProcessingAlgorithms>
					
					Для Каждого АлгоритмОбработки Из ЗначениеПоля Цикл 
						УКО_MCRФормат_ЗаписатьАлгоритмОбработкиВXML(ЗаписьXML, АлгоритмОбработки);
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //</ProcessingAlgorithms>
					
				КонецЕсли;
				
			ИначеЕсли ИмяПоля = "OutputTemporaryTables" Тогда
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("OutputTemporaryTables"); //<OutputTemporaryTables>
					
					Для Каждого НастройкаВыводаВременнойТаблицы Из ЗначениеПоля Цикл 
						УКО_MCRФормат_ЗаписатьНастройкуВыводаВременнойТаблицыВXML(ЗаписьXML, НастройкаВыводаВременнойТаблицы);
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //</OutputTemporaryTables>
					
				КонецЕсли;
				
			ИначеЕсли ИмяПоля = "Text" И ЭлементДанных.Type = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
				
				Продолжить;
				
			Иначе
				
				ЗначениеПоУмолчанию = УКО_MCRФорматКлиентСервер_ЗначениеПоляПоУмолчанию(ИмяПоля);
				УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, ИмяПоля, ЗначениеПоля, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭлементДанных.Type = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
			УКО_MCRФормат_ЗаписатьЭлементТекст(ЗаписьXML, "Text", ЭлементДанных.Text);
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьПараметрЗапросаВXML(ЗаписьXML, Имя, Значение)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameter"); //<Parameter>
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Name", Имя);
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		
		Если Значение.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
			
			УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", "Expression");
			УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Value", Значение.Значение);
			
		ИначеЕсли Значение.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
			
			УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", "Table");
			ТаблицаЗначений = ПолучитьИзВременногоХранилища(Значение.Значение);
			УКО_MCRФормат_ЗаписатьТаблицуЗначенийВXML(ЗаписьXML, ТаблицаЗначений);
			
		ИначеЕсли Значение.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
			
			УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", "Boundary");
			УКО_MCRФормат_ЗаписатьГраницуВXML(ЗаписьXML, УКО_Запрос_ГраницаИзОписания(Значение.Значение));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", "Table");
		УКО_MCRФормат_ЗаписатьТаблицуЗначенийВXML(ЗаписьXML, Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений")
		ИЛИ ТипЗнч(Значение) = Тип("Массив")
		ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", "ValueList");	
		
		Для Каждого ЭлементСписка Из Значение Цикл
			
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ЗначениеЭлементаСписка	= ЭлементСписка.Значение;
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив")
					ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
				ЗначениеЭлементаСписка	= ЭлементСписка;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Item");//<Item>
			УКО_MCRФормат_ЗаписатьЗначениеВXML(ЗаписьXML, ЗначениеЭлементаСписка);
			ЗаписьXML.ЗаписатьКонецЭлемента();//</Item>
			
		КонецЦикла;
		
	Иначе
		
		УКО_MCRФормат_ЗаписатьЗначениеВXML(ЗаписьXML, Значение);
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //</Parameter>
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьВнешнийИсточникВXML(ЗаписьXML, ОписаниеВнешнегоИсточника)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ExternalSource"); //<ExternalSource>
	
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Name", ОписаниеВнешнегоИсточника.Имя);
	
	Если ОписаниеВнешнегоИсточника.Тип = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
		
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", "Expression");
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Value", ОписаниеВнешнегоИсточника.Значение);
		
	ИначеЕсли ОписаниеВнешнегоИсточника.Тип = НСтр("ru = 'Значение'; en = 'Value'") Тогда
		
		Если ТипЗнч(ОписаниеВнешнегоИсточника.Значение) = Тип("ТаблицаЗначений") Тогда
			ТаблицаЗначений = ОписаниеВнешнегоИсточника.Значение;
		Иначе 
			Если ЭтоАдресВременногоХранилища(ОписаниеВнешнегоИсточника.Значение) Тогда
				ТаблицаЗначений = ПолучитьИзВременногоХранилища(ОписаниеВнешнегоИсточника.Значение);
			Иначе
				ТаблицаЗначений = Новый ТаблицаЗначений;
			КонецЕсли;
		КонецЕсли;
		
		УКО_MCRФормат_ЗаписатьТаблицуЗначенийВXML(ЗаписьXML, ТаблицаЗначений);
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //</ExternalSource>
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьАлгоритмОбработкиВXML(ЗаписьXML, АлгоритмОбработки)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ProcessingAlgorithm"); //<ProcessingAlgorithm>
	
	ОписаниеАлгоритмаОбработки = АлгоритмОбработки.Значение;
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Presentation", АлгоритмОбработки.Представление);
	Если ОписаниеАлгоритмаОбработки.ПрерыватьПриОшибке Тогда
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "AbortOnError", Истина);
	КонецЕсли;
	
	Если ОписаниеАлгоритмаОбработки.Транзакция <> "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.ПоСтроке" Тогда
		
		Если ОписаниеАлгоритмаОбработки.Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.НеИспользовать" Тогда
			Транзакция = "NotUse";
		ИначеЕсли ОписаниеАлгоритмаОбработки.Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.НаВсе" Тогда
			Транзакция = "ForAll";
		КонецЕсли;
		
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Transaction", Транзакция);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеАлгоритмаОбработки.Код) Тогда
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Code", ОписаниеАлгоритмаОбработки.Код);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //</ProcessingAlgorithm>
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьНастройкуВыводаВременнойТаблицыВXML(ЗаписьXML, НастройкаВыводаВременнойТаблицы)
	
	ОписаниеВыводаВременнойТаблицы = НастройкаВыводаВременнойТаблицы.Значение;
	
	Если ОписаниеВыводаВременнойТаблицы.Вывод = НСтр("ru = 'Выводить'; en = 'Output'") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OutputTemporaryTable"); //<OutputTemporaryTable>
	
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Name", НастройкаВыводаВременнойТаблицы.Ключ);
	
	Если ОписаниеВыводаВременнойТаблицы.Вывод = НСтр("ru = 'Не выводить'; en = 'Do not output'") Тогда
		Вывод = "No";
	ИначеЕсли ОписаниеВыводаВременнойТаблицы.Вывод = НСтр("ru = 'Свернуто'; en = 'Minimized'") Тогда
		Вывод = "Minimized";
	КонецЕсли;
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Output", Вывод);

	ЗаписьXML.ЗаписатьКонецЭлемента(); //</OutputTemporaryTable>
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, Имя, Значение, ЗначениеПоУмолчанию = Неопределено)
	
	// Значение по умолчанию и пустые значения не записываем
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Значение) Тогда 
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Значение = ЗначениеПоУмолчанию Тогда
		
		Возврат;
		
	КонецЕсли;
	
	XMLСтрока = XMLСтрока(Значение);
	
	Если ЗначениеЗаполнено(XMLСтрока) Тогда
		
		// Многострочный текст записываем как элемент (нельзя записывать как атрибут)
		Если УКО_СтрокиКлиентСервер_МногострочнаяСтрока(XMLСтрока) Тогда 
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
			ЗаписьXML.ЗаписатьТекст (XMLСтрока);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		Иначе
			
			ЗаписьXML.ЗаписатьАтрибут(Имя, XMLСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьТаблицуЗначенийВXML(ЗаписьXML, ТаблицаЗначений)
	
	Если ТаблицаЗначений.Колонки.Количество() > 0 Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
		
		// Записываем колонки
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл 
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Column");
			
			УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Name", Колонка.Имя);
			Если УКО_ОбщегоНазначения_КолонкаТаблицыЗначенийИндексируется(ТаблицаЗначений, Колонка.Имя) Тогда
				УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Index", Истина);
			КонецЕсли;
			УКО_MCRФормат_ЗаписатьОписаниеТиповВXML (ЗаписьXML, Колонка.ТипЗначения);
			ЗаписьXML.ЗаписатьКонецЭлемента(); 
			
		КонецЦикла;
		
		// Записываем строки
		Для Каждого Строка Из ТаблицаЗначений Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Field");
				
				ЗаписыватьТип = (Колонка.ТипЗначения.Типы().Количество() > 1);
				УКО_MCRФормат_ЗаписатьЗначениеВXML(ЗаписьXML, Строка[Колонка.Имя], ЗаписыватьТип);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УКО_MCRФормат_ЗаписатьОписаниеТиповВXML(ЗаписьXML, ОписаниеТипа)
	
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Types", УКО_XML_СписокИменТипов(ОписаниеТипа));
	
	Если ОписаниеТипа.СодержитТип(Тип("Число")) Тогда
		
		КвалификаторыЧисла = ОписаниеТипа.КвалификаторыЧисла;
		
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Digits", КвалификаторыЧисла.Разрядность);
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "FractionDigits", КвалификаторыЧисла.РазрядностьДробнойЧасти);
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "AllowedSign", КвалификаторыЧисла.ДопустимыйЗнак, ДопустимыйЗнак.Любой);
		
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("Строка")) Тогда
		
		КвалификаторыСтроки = ОписаниеТипа.КвалификаторыСтроки;
		
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Length", КвалификаторыСтроки.Длина);
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "AllowedLength", КвалификаторыСтроки.ДопустимаяДлина, ДопустимаяДлина.Переменная);
		
	КонецЕсли;
	
	Если ОписаниеТипа.СодержитТип(Тип("Дата")) Тогда
		
		КвалификаторыДаты = ОписаниеТипа.КвалификаторыДаты;
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "DateFractions", КвалификаторыДаты.ЧастиДаты, ЧастиДаты.ДатаВремя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьЗначениеВXML(ЗаписьXML, Значение, ЗаписыватьТип = Истина)
	
	Если ТипЗнч(Значение) = Тип("ВидДвиженияНакопления") Тогда
		ИмяТипа = "AccumulationRecordType";
	ИначеЕсли ТипЗнч(Значение) = Тип("ВидДвиженияБухгалтерии") Тогда
		ИмяТипа = "AccountingRecordType";
	ИначеЕсли ТипЗнч(Значение) = Тип("ВидСчета") Тогда
		ИмяТипа = "AccountType";
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		ИмяТипа = "Type";
	Иначе
		ИмяТипа = УКО_XML_ИмяТипа(Значение);
	КонецЕсли;
	
	Если ЗаписыватьТип Тогда
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Type", ИмяТипа);
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		УКО_MCRФормат_ЗаписатьМоментВремениВXML(ЗаписьXML, Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		УКО_MCRФормат_ЗаписатьОписаниеТиповВXML(ЗаписьXML, Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Value", УКО_XML_ИмяТипа(Значение));
	Иначе
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Value", Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура УКО_MCRФормат_ЗаписатьМоментВремениВXML(ЗаписьXML, Значение)
	
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Date", Значение.Дата);
	
	Ссылка = Значение.Ссылка;
	Если Ссылка <> Неопределено Тогда
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "TypeRef", УКО_XML_ИмяТипа(Ссылка));
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "ValueRef", Ссылка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура УКО_MCRФормат_ЗаписатьГраницуВXML(ЗаписьXML, Граница)
	
	Если Граница.ВидГраницы = ВидГраницы.Исключая Тогда
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "BoundaryType", "Excluding");
	КонецЕсли;
	
	Если Граница.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "ValueType", УКО_XML_ИмяТипа(Граница.Значение));
	Если ТипЗнч(Граница.Значение) = Тип("МоментВремени") Тогда
		УКО_MCRФормат_ЗаписатьМоментВремениВXML(ЗаписьXML, Граница.Значение);
	Иначе
		УКО_MCRФормат_ЗаписатьПолеВXML(ЗаписьXML, "Value", Граница.Значение);
	КонецЕсли;
	
КонецПроцедуры	

Процедура УКО_MCRФормат_ЗаписатьЭлементТекст(ЗаписьXML, Имя, Текст)
	
	Если ЗначениеЗаполнено(Текст) Тогда
	
		ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
		ЗаписьXML.ЗаписатьТекст(Текст);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры
// Преобразует тип 1С к строке XML
//
// Параметры:
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Строка - Имя типа XML
//
Функция УКО_XML_ИмяТипа(Тип) Экспорт
	
	ТипЗначения = ТипЗнч(Тип);
	Если ТипЗначения = Тип("Тип") Тогда
		ТипЗначения = Тип;
	КонецЕсли;
	
	Если ТипЗначения = Тип("Строка")
			ИЛИ ТипЗначения = Тип("Неопределено") Тогда
		ИмяТипа = "String";
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		ИмяТипа = "Number";
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		ИмяТипа = "Boolean";
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		ИмяТипа = "Date";
	ИначеЕсли ТипЗначения = Тип("МоментВремени") Тогда
		ИмяТипа = "PointInTime";
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления") Тогда
		ИмяТипа = "AccumulationRecordType";
	Иначе	
		ИмяТипа = XMLТип(ТипЗначения).ИмяТипа;
	КонецЕсли;
	
	Возврат ИмяТипа;
	
КонецФункции
// Получить список имен типов через запятую
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Строка - Имена типов через запятую
//
Функция УКО_XML_СписокИменТипов(ОписаниеТипов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл 
		Результат.Добавить(УКО_XML_ИмяТипа(Тип));
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, ",");
	
КонецФункции
// Чтение XML в дерево
// Параметры:
//  ЧтениеXML  - ЧтениеXML - Чтение XML
//
// Возвращаемое значение:
//   ДеревоЗначений - Дерево данных XML
//
Функция УКО_XML_ПрочитатьВДерево(ЧтениеXML) Экспорт 
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Имя");
	ДеревоЗначений.Колонки.Добавить("Значение");
	
	УКО_XML_ПрочитатьВДеревоУзел(ЧтениеXML, ДеревоЗначений);
	
	Возврат ДеревоЗначений;
	
КонецФункции

Функция УКО_XML_ПрочитатьВДеревоУзел(ЧтениеXML, СтрокаДерева)
	
	Результат = Неопределено;
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.Имя = ЧтениеXML.Имя;
			
			ДанныеЗначения = Новый Структура;
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				ДанныеЗначения.Вставить(ЧтениеXML.Имя, СокрЛП(ЧтениеXML.Значение));
				
			КонецЦикла;
			
			НоваяСтрока.Значение = ДанныеЗначения;
			
			ТекстУзла = УКО_XML_ПрочитатьВДеревоУзел(ЧтениеXML, НоваяСтрока);
			Если ТекстУзла <> Неопределено Тогда 
				НоваяСтрока.Родитель.Значение.Вставить(НоваяСтрока.Имя, ТекстУзла);
				СтрокаДерева.Строки.Удалить(НоваяСтрока);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Прервать;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Результат = СокрЛП(ЧтениеXML.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// Разбирает текст запроса на элементы (вложенные запросы, объединения и т.д.)
// Параметры:
//	Текст						- Строка	- Текст запроса
//	ДополнительныеПараметры		- Структура	- Дополнительные параметры
// Возвращаемое значение:
//	Массив - содержит структуры со свойствами:
//		* Представление	- Строка	- Представление
//		* ТекстИнициализации - Строка	- Текст инициализации запроса
//		* Текст			- Строка	- Текст запроса
//		* Картинка		- Картинка	- Картинка элемента
//		* Элементы		- Массив	- Аналогично, массив вложенных элементов
Функция УКО_АнализЗапроса_РазборСтруктуры(Текст, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Язык") Тогда
		ДополнительныеПараметры.Вставить("Язык", УКО_ОбщегоНазначения_КодЯзыкаПрограммирования());
	КонецЕсли;
	
	Элементы = Новый Массив;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(Текст);
		
		КоличествоЗапросов = УКО_Запрос_КоличествоЗапросовВПакете(Схема);
		
		ВсеВременныеТаблицы = Новый Массив;
		ДополнительныеПараметры.Вставить("ВсеВременныеТаблицы", ВсеВременныеТаблицы);
		
		Для Каждого ЗапросПакета Из Схема.ПакетЗапросов Цикл 
			
			УничтожениеТаблицы = (ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
			
			Если УничтожениеТаблицы Тогда
				
				//ВсеВременныеТаблицыУдалить(ВсеВременныеТаблицы, ЗапросПакета.ИмяТаблицы);
				
			Иначе
				
				РезультатРазбораЗапроса = УКО_АнализЗапроса_РазборСхемыЗапроса(ЗапросПакета, ДополнительныеПараметры);
				НеобходимыеВременныеТаблицы = РезультатРазбораЗапроса.НеобходимыеВременныеТаблицы;
				ТекстЗапросаПакета = ЗапросПакета.ПолучитьТекстЗапроса();
				
				Если ЗначениеЗаполнено(ЗапросПакета.ТаблицаДляПомещения) Тогда
					КартинкаПакета = БиблиотекаКартинок.КонструкторЗапросаВременнаяТаблица;
				Иначе 
					КартинкаПакета = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗапросПакета.ТаблицаДляПомещения) Тогда
					
					УКО_АнализЗапроса_ВсеВременныеТаблицыДобавить(ВсеВременныеТаблицы, ЗапросПакета.ТаблицаДляПомещения, ТекстЗапросаПакета, НеобходимыеВременныеТаблицы)
					
				КонецЕсли;
				
				Элементы.Добавить(УКО_АнализЗапроса_НовыйЭлементРазбораСхемыЗапроса(ЗапросПакета.Представление(), ТекстЗапросаПакета, КартинкаПакета, ДополнительныеПараметры, НеобходимыеВременныеТаблицы, РезультатРазбораЗапроса.Элементы));
				
				Если КоличествоЗапросов = 1 Тогда
					Элементы = РезультатРазбораЗапроса.Элементы;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Элементы;
	
КонецФункции
// Разбирает схему запроса на вложенные элементы
// Параметры:
//  Объект  - ОбъектСхемыЗапроса - Объект схемы запроса
//  ДополнительныеПараметры  - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//   Массив - Структура элементов
//
Функция УКО_АнализЗапроса_РазборСхемыЗапроса(Объект, ДополнительныеПараметры)
	
	Элементы = Новый Массив;
	НеобходимыеВременныеТаблицы = УКО_АнализЗапроса_НеобходимыеВременныеТаблицыНовый();
	
	ПервыйЗапрос = Истина;
	
	Для Каждого ОператорЗапросаВыбрать Из Объект.Операторы Цикл 
		
		Если Не ЗначениеЗаполнено(ОператорЗапросаВыбрать.ВыбираемыеПоля) Тогда
			// Объект СхемаЗапроса не разбирает количество поле в объединении исключая NULL
			// поэтому при объединении запроса без полей добавлять его не нужно
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = ""; Псевдоним = "";
		НеобходимыеВременныеТаблицыОператорВыбрать = УКО_АнализЗапроса_НеобходимыеВременныеТаблицыНовый();
		
		ЭлементыВложенныеИсточники = Новый Массив;
		Для Каждого Источник Из ОператорЗапросаВыбрать.Источники Цикл 
			
			Если Не УКО_АнализЗапроса_РазборСхемыИсточникЕстьВСоединениях(Источник, ОператорЗапросаВыбрать.Источники) Тогда
				
				РезультатРазбораИсточник = УКО_АнализЗапроса_РазборСхемыИсточник(Источник, ДополнительныеПараметры);
				УКО_АнализЗапроса_НеобходимыеВременныеТаблицыДобавить(НеобходимыеВременныеТаблицы, РезультатРазбораИсточник.НеобходимыеВременныеТаблицы);
				УКО_АнализЗапроса_НеобходимыеВременныеТаблицыДобавить(НеобходимыеВременныеТаблицыОператорВыбрать, РезультатРазбораИсточник.НеобходимыеВременныеТаблицы);
				
				Для Каждого ЭлементРазбораИсточник Из РезультатРазбораИсточник.Элементы Цикл 
					ЭлементыВложенныеИсточники.Добавить(ЭлементРазбораИсточник);
				КонецЦикла;
				
				ИмяТаблицы = РезультатРазбораИсточник.ИмяТаблицы;
				Псевдоним = РезультатРазбораИсточник.Псевдоним;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭлементыВложенныеИсточники.Количество() > 1 Тогда
			Псевдоним = ОператорЗапросаВыбрать.Представление();
			ИмяТаблицы = "";
		КонецЕсли;
		
		Если УКО_АнализЗапроса_КоличествоОператоровВыбрать(Объект) = 1 Тогда 
			Если ЗначениеЗаполнено(ЭлементыВложенныеИсточники) Тогда
				Элементы = ЭлементыВложенныеИсточники;
			КонецЕсли;
		Иначе
			РезультатПредставлениеОператора = УКО_АнализЗапроса_РазборСхемыПредставлениеОператораВыбрать(ОператорЗапросаВыбрать, Псевдоним, ИмяТаблицы);
			Элементы.Добавить(УКО_АнализЗапроса_НовыйЭлементРазбораСхемыЗапроса(РезультатПредставлениеОператора.Представление, УКО_АнализЗапроса_ПолучитьТекстЗапросаОператораВыбрать(Объект, ОператорЗапросаВыбрать, ДополнительныеПараметры, ПервыйЗапрос), РезультатПредставлениеОператора.Картинка, ДополнительныеПараметры, НеобходимыеВременныеТаблицыОператорВыбрать, ЭлементыВложенныеИсточники));
		КонецЕсли;
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;
	
	// В выражении ГДЕ могут быть использованы временные таблицы
	Для Каждого ВыражениеОтбор Из ОператорЗапросаВыбрать.Отбор Цикл 
		
		ИспользуемыеВременныеТаблицы = УКО_АнализЗапроса_ИспользуемыеВременныеТаблицыВВыражении(ВыражениеОтбор);
		УКО_АнализЗапроса_НеобходимыеВременныеТаблицыДобавить(НеобходимыеВременныеТаблицы, ИспользуемыеВременныеТаблицы);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", Объект.ПолучитьТекстЗапроса());
	Результат.Вставить("Элементы", Элементы);
	Результат.Вставить("НеобходимыеВременныеТаблицы", НеобходимыеВременныеТаблицы);
	
	Возврат Результат;
	
КонецФункции
// Возвращает элемент разбора схемы запроса
//
// Параметры:
//  Представление  - Строка - Представление
//  Текст  - Строка - Текст запроса элемента
//  Картинка  - Картинка - Картинка элемента
//  ДополнительныеПараметры  - Структура - Дополнительные параметры
//  НеобходимыеВременныеТаблицы  - Массив - Необходимые временные таблицы
//  Элементы  - Массив - Вложенные элементы
//
// Возвращаемое значение:
//   Структура - Элемент разбора схемы запроса
//
Функция УКО_АнализЗапроса_НовыйЭлементРазбораСхемыЗапроса(Представление, Текст, Картинка, ДополнительныеПараметры, НеобходимыеВременныеТаблицы, Элементы = Неопределено)
	
	НовыйЭлемент = Новый Структура;
	НовыйЭлемент.Вставить("Представление", Представление);
	НовыйЭлемент.Вставить("Картинка", Картинка);
	НовыйЭлемент.Вставить("НеобходимыеВременныеТаблицы", НеобходимыеВременныеТаблицы);
	
	ТекстИнициализации = УКО_АнализЗапроса_ТекстЗапросаНеобходимыеВременныеТаблицы(ДополнительныеПараметры.ВсеВременныеТаблицы, НеобходимыеВременныеТаблицы);
	НовыйЭлемент.Вставить("ТекстИнициализации", ТекстИнициализации);
	НовыйЭлемент.Вставить("Текст", Текст);
	
	ПолныйТекстЭлементы = Новый Массив;
	Если ЗначениеЗаполнено(ТекстИнициализации) Тогда
		ПолныйТекстЭлементы.Добавить(ТекстИнициализации);
	КонецЕсли;
	ПолныйТекстЭлементы.Добавить(Текст);
	ПолныйТекст = СтрСоединить(ПолныйТекстЭлементы, УКО_ЗапросКлиентСервер_РазделительПакетов());
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПараметрыЗапроса = Новый Массив;
	
	Попытка
		
		Запрос = Новый Запрос(ПолныйТекст);
		
		Для Каждого ОписаниеПараметраЗапроса Из Запрос.НайтиПараметры() Цикл 
			ПараметрыЗапроса.Добавить(ОписаниеПараметраЗапроса.Имя);
		КонецЦикла;
		
	Исключение
		
		БезОбработкиИсключения = Истина;
		
	КонецПопытки;
	
	НовыйЭлемент.Вставить("Параметры", ПараметрыЗапроса);
	
	Если ЗначениеЗаполнено(Элементы) Тогда
		НовыйЭлемент.Вставить("Элементы", Элементы);
	Иначе 
		НовыйЭлемент.Вставить("Элементы", Новый Массив);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция УКО_АнализЗапроса_РазборСхемыИсточникЕстьВСоединениях(Источник, ВсеИсточники)
	
	ИсточникЕстьВСоединениях = Ложь;
	Если ТипЗнч(Источник.Источник) = Тип("ТаблицаСхемыЗапроса")
			ИЛИ ТипЗнч(Источник.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			
		Для Каждого ИсточникЕще Из ВсеИсточники Цикл 
			Если ИсточникЕще.Соединения.НайтиПоПсевдониму(Источник.Источник.Псевдоним) <> Неопределено Тогда
				ИсточникЕстьВСоединениях = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИсточникЕстьВСоединениях;
	
КонецФункции

Функция УКО_АнализЗапроса_РазборСхемыПредставлениеОператораВыбрать(ОператорВыбрать, Псевдоним, ИмяТаблицы)
	
	Результат = Новый Структура;
	
	// Представление 
	Если ЗначениеЗаполнено(Псевдоним) Тогда
		Представление = Псевдоним;
	ИначеЕсли ПустаяСтрока(ИмяТаблицы) Тогда
		Представление = НСтр("ru = '<Нет источника>'; en = '<No source>'");
	Иначе
		Представление = ИмяТаблицы;
	КонецЕсли;
	
	Дополнительно = Новый Массив;
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Дополнительно.Добавить(ИмяТаблицы);
	КонецЕсли;
	
	Если ОператорВыбрать.ВыбиратьРазличные Тогда
		Дополнительно.Добавить(НСтр("ru = 'РАЗЛ'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОператорВыбрать.КоличествоПолучаемыхЗаписей)  Тогда
		Дополнительно.Добавить(СтрШаблон(НСтр("ru = 'ПЕРВ %1'; en = 'TOP %1'"), ОператорВыбрать.КоличествоПолучаемыхЗаписей));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОператорВыбрать.Отбор)  Тогда
		Дополнительно.Добавить("><");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дополнительно) Тогда
		
		ПредставлениеИсточника = СтрСоединить(Дополнительно, ", ");
		Если Представление <> ПредставлениеИсточника Тогда
			Представление = СтрШаблон("%1 (%2)", Представление, ПредставлениеИсточника);
		КонецЕсли;
		
	КонецЕсли;
	
	// Картинка
	ИндексРазделителя = СтрНайти(ИмяТаблицы, ".");
	Картинка = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексРазделителя) Тогда
		Картинка = БиблиотекаКартинок[Лев(ИмяТаблицы, ИндексРазделителя - 1)]
	Иначе
		Картинка = БиблиотекаКартинок.КонструкторЗапросаВложенныйЗапрос;
	КонецЕсли;

	Результат.Вставить("Картинка", Картинка);
	Результат.Вставить("Представление", Представление);
	
	Возврат Результат;
	
КонецФункции

Функция УКО_АнализЗапроса_РазборСхемыИсточник(Источник, ДополнительныеПараметры)
	
	Элементы = Новый Массив;
	НеобходимыеВременныеТаблицы = УКО_АнализЗапроса_НеобходимыеВременныеТаблицыНовый();
	
	ИмяТаблицы = "";
	Если ТипЗнч(Источник.Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
		
		ИмяТаблицы = Источник.Источник.ИмяТаблицы;
		
		ПараметрыТаблицы = Новый Массив;
		Для Каждого ПараметрТаблицы Из Источник.Источник.Параметры Цикл 
			ПараметрыТаблицы.Добавить(ПараметрТаблицы.Выражение);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПараметрыТаблицы) Тогда
			ТекстИсточника = СтрШаблон("%1(%2)", ИмяТаблицы, СтрСоединить(ПараметрыТаблицы, ", "));
		Иначе
			ТекстИсточника = ИмяТаблицы;
		КонецЕсли;
		
		Если УКО_АнализЗапроса_ВсеВременныеТаблицыНайти(ДополнительныеПараметры.ВсеВременныеТаблицы, ИмяТаблицы) <> Неопределено Тогда
			
			УКО_ОбщегоНазначенияКлиентСервер_ДобавитьВМассив(НеобходимыеВременныеТаблицы, ИмяТаблицы);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда	
		
		Запрос = Источник.Источник.Запрос;
		РезультатРазбораВложенногоЗапроса = УКО_АнализЗапроса_РазборСхемыЗапроса(Запрос, ДополнительныеПараметры);
		ТекстИсточника = Запрос.ПолучитьТекстЗапроса();
		УКО_АнализЗапроса_НеобходимыеВременныеТаблицыДобавить(НеобходимыеВременныеТаблицы, РезультатРазбораВложенногоЗапроса.НеобходимыеВременныеТаблицы);
		
		Элементы.Добавить(УКО_АнализЗапроса_НовыйЭлементРазбораСхемыЗапроса(Источник.Источник.Псевдоним, ТекстИсточника,
			БиблиотекаКартинок.КонструкторЗапросаВложенныйЗапрос, ДополнительныеПараметры, НеобходимыеВременныеТаблицы, РезультатРазбораВложенногоЗапроса.Элементы));
		
	ИначеЕсли ТипЗнч(Источник.Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		
		ИмяТаблицы = Источник.Источник.ИмяТаблицы;
		ТекстИсточника = Источник.Источник.ИмяТаблицы;
		
		ТекстИсточника = СтрШаблон(НСтр("ru = '%1 КАК %2'; en = '%1 AS %2'", ДополнительныеПараметры.Язык), ТекстИсточника, Источник.Источник.Псевдоним);
		
	КонецЕсли;
	
	Соединения = Новый Массив;
	Для Каждого Соединение Из Источник.Соединения Цикл 
		
		Если ТипЗнч(Соединение.Источник.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			
			РезультатВложенныйВСоединении = УКО_АнализЗапроса_РазборСхемыИсточник(Соединение.Источник, ДополнительныеПараметры);
			УКО_АнализЗапроса_НеобходимыеВременныеТаблицыДобавить(НеобходимыеВременныеТаблицы, РезультатВложенныйВСоединении.НеобходимыеВременныеТаблицы);
			
			Для Каждого ЭлементВложенныйВСоединении Из РезультатВложенныйВСоединении.Элементы Цикл 
				ЭлементВложенныйВСоединении.Представление = СтрШаблон("%1 (%2)", ЭлементВложенныйВСоединении.Представление, Соединение.ТипСоединения);
				Элементы.Добавить(ЭлементВложенныйВСоединении);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Соединение.Источник.Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
			
			ИмяТаблицыИсточникаСоединения = Соединение.Источник.Источник.ИмяТаблицы;
			
			Если УКО_АнализЗапроса_ВсеВременныеТаблицыНайти(ДополнительныеПараметры.ВсеВременныеТаблицы, ИмяТаблицыИсточникаСоединения) <> Неопределено Тогда
				УКО_ОбщегоНазначенияКлиентСервер_ДобавитьВМассив(НеобходимыеВременныеТаблицы, ИмяТаблицыИсточникаСоединения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("НеобходимыеВременныеТаблицы", НеобходимыеВременныеТаблицы);
	Результат.Вставить("Текст", ТекстИсточника);
	Результат.Вставить("Псевдоним", Источник.Источник.Псевдоним);
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Элементы", Элементы);
	
	Возврат Результат;
	
КонецФункции

Функция УКО_АнализЗапроса_ТекстЗапросаНеобходимыеВременныеТаблицы(ВсеВременныеТаблицы, ДобавляемыеВременныеТаблицы)
	
	// Чтобы выполнить вложенный запрос пакета в котором используются результаты временных таблиц,
	// необходимо добавить в текст запроса запросы создания временных таблиц
	
	ПакетЗапросов = Новый Массив;
	
	// Получим необходимые таблицы
	ДополнительныеТаблицы = Новый Массив;
	УКО_АнализЗапроса_СобратьНеобходимыеВременныеТаблицы(ДополнительныеТаблицы, ВсеВременныеТаблицы, ДобавляемыеВременныеТаблицы);
	
	// Добавим временные таблицы в том порядке в котором они идут в запросе
	Для Каждого ВременнаяТаблица Из ВсеВременныеТаблицы Цикл
		
		Если ДополнительныеТаблицы.Найти(ВременнаяТаблица.Имя) <> Неопределено Тогда
			ПакетЗапросов.Добавить(ВременнаяТаблица.Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ПакетЗапросов, УКО_ЗапросКлиентСервер_РазделительПакетов());
	
КонецФункции

Процедура УКО_АнализЗапроса_СобратьНеобходимыеВременныеТаблицы(ДополнительныеТаблицы, ВсеВременныеТаблицы, ДобавляемыеВременныеТаблицы)
	
	Для Каждого ВременнаяТаблица Из ДобавляемыеВременныеТаблицы Цикл
		
		Если ДополнительныеТаблицы.Найти(ВременнаяТаблица) = Неопределено Тогда
			
			ДополнительныеТаблицы.Добавить(ВременнаяТаблица);
			
			ОписаниеВременнойТаблицы = УКО_АнализЗапроса_ВсеВременныеТаблицыНайти(ВсеВременныеТаблицы, ВременнаяТаблица);
			
			Если ЗначениеЗаполнено(ОписаниеВременнойТаблицы) Тогда
				
				УКО_АнализЗапроса_СобратьНеобходимыеВременныеТаблицы(ДополнительныеТаблицы, ВсеВременныеТаблицы, ОписаниеВременнойТаблицы.НеобходимыеВременныеТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// Данная функция условность ищет тексты имен функций
Функция УКО_АнализЗапроса_ВыражениеЗапросаСодержитАгрегатныеФункции(Выражение)
	
	АгрегатныеФункции = "КОЛИЧЕСТВО,COUNT,МИНИМУМ,MIN,МАКСИМУМ,MAX,СРЕДНЕЕ,AVG,СУММА, SUM";
	АгрегатныеФункции = СтрРазделить(АгрегатныеФункции, ",");
	
	Для Каждого АгрегатнаяФункция Из АгрегатныеФункции Цикл 
		
		Если СтрНайти(ВРег(Выражение), АгрегатнаяФункция) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция УКО_АнализЗапроса_КоличествоОператоровВыбрать(Объект)
	
	Количество = 0;
	Для Каждого ОператорЗапросаВыбрать Из Объект.Операторы Цикл 
		
		Если ЗначениеЗаполнено(ОператорЗапросаВыбрать.ВыбираемыеПоля) Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Функция УКО_АнализЗапроса_РазделительУсловийИ(Язык)
	
	Возврат " " + НСтр("ru = 'И'; en = 'AND'", Язык) + " ";

КонецФункции

Функция УКО_АнализЗапроса_ПолучитьТекстЗапросаОператораВыбрать(ОбъектСхема, ОбъектОператор, ДополнительныеПараметры, ПервыйЗапрос)
	
	ТекстЗапроса = Новый Массив;
	
	// ВЫБРАТЬ
	ОператорыВыбрать = Новый Массив;
	ОператорыВыбрать.Добавить(НСтр("ru = 'ВЫБРАТЬ'; en = 'SELECT'", ДополнительныеПараметры.Язык));
	//
	Если ОбъектСхема.ВыбиратьРазрешенные Тогда
		ОператорыВыбрать.Добавить("РАЗРЕШЕННЫЕ");
	КонецЕсли;
	
	Если ОбъектОператор.ВыбиратьРазличные Тогда
		ОператорыВыбрать.Добавить(НСтр("ru = 'РАЗЛИЧНЫЕ'; en = 'DISTINCT'", ДополнительныеПараметры.Язык));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектОператор.КоличествоПолучаемыхЗаписей) Тогда
		ОператорыВыбрать.Добавить(НСтр("ru = 'ПЕРВЫЕ'; en = 'TOP'", ДополнительныеПараметры.Язык));
		ОператорыВыбрать.Добавить(УКО_СтрокиКлиентСервер_ЧислоВСтроку(ОбъектОператор.КоличествоПолучаемыхЗаписей));
	КонецЕсли;
	
	ТекстЗапроса.Добавить(СтрСоединить(ОператорыВыбрать, " "));
	
	// Выбираемые поля
	ВыбираемыеПоля = Новый Массив;
	Для Каждого ВыбираемоеПоле Из ОбъектОператор.ВыбираемыеПоля Цикл 
		
		Индекс = ОбъектОператор.ВыбираемыеПоля.Индекс(ВыбираемоеПоле);
		Если ПервыйЗапрос Тогда
			Псевдоним = ОбъектСхема.Колонки[Индекс].Псевдоним;
		Иначе
			Псевдоним = СтрШаблон(НСтр("ru = 'Поле%1'; en = 'Field%1'", ДополнительныеПараметры.Язык), Индекс + 1);
		КонецЕсли;
		
		Если ТипЗнч(ВыбираемоеПоле) = Тип("ВыражениеСхемыЗапроса") Тогда
			
			ЗначениеПоля = ВыбираемоеПоле;
			
		ИначеЕсли ТипЗнч(ВыбираемоеПоле) = Тип("ВложеннаяТаблицаСхемыЗапроса") Тогда
			
			ВложенныеПоля = Новый Массив;
			Для Каждого ВложенноеПоле Из ВыбираемоеПоле.Поля Цикл 
				ЗначениеВложенногоПоля = СтрЗаменить(ВложенноеПоле, ВыбираемоеПоле.Имя + ".", "");
				ВложенныеПоля.Добавить(СтрШаблон(НСтр("ru = '%1 КАК %1'; en = '%1 AS %1'", ДополнительныеПараметры.Язык), ЗначениеВложенногоПоля));
			КонецЦикла;
			
			ТекстВложенныеПоля = СтрСоединить(ВложенныеПоля, "," + Символы.ПС);
			
			ЗначениеПоля = СтрШаблон("%1.(
			|%2
			|)", ВыбираемоеПоле.Имя, УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстВложенныеПоля));
			
		КонецЕсли;
		
		ВыбираемыеПоля.Добавить(СтрШаблон(НСтр("ru = '%1 КАК %2'; en = '%1 AS %2'", ДополнительныеПараметры.Язык), ЗначениеПоля, Псевдоним));	

	КонецЦикла;
	
	ТекстВыбираемыеПоля = СтрСоединить(ВыбираемыеПоля, "," + Символы.ПС);
	ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстВыбираемыеПоля));
	
	// ИЗ (источники)
	Источники = Новый Массив;
	Для Каждого Источник Из ОбъектОператор.Источники Цикл 

		Если Не УКО_АнализЗапроса_РазборСхемыИсточникЕстьВСоединениях(Источник, ОбъектОператор.Источники) Тогда
			Источники.Добавить(УКО_АнализЗапроса_ПолучитьТекстЗапросаИсточник(Источник, ДополнительныеПараметры));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Источники) Тогда
		
		ТекстЗапроса.Добавить(НСтр("ru = 'ИЗ'; en = 'FROM'", ДополнительныеПараметры.Язык));
		ТекстИсточники = СтрСоединить(Источники, "," + Символы.ПС);
		ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстИсточники));
		
	КонецЕсли;
	
	Условия = Новый Массив;
	Имеющие = Новый Массив;
	Для Каждого Отбор Из ОбъектОператор.Отбор Цикл 
		
		Если УКО_АнализЗапроса_ВыражениеЗапросаСодержитАгрегатныеФункции(Отбор) Тогда
			Имеющие.Добавить(Отбор);
		Иначе 
			Условия.Добавить(Отбор);
		КонецЕсли;
		
	КонецЦикла;
	
	// ГДЕ (условия)
	Если ЗначениеЗаполнено(Условия) Тогда
		ТекстЗапроса.Добавить(НСтр("ru = 'ГДЕ'; en = 'WHERE'", ДополнительныеПараметры.Язык));
		ТекстГде = СтрСоединить(Условия, Символы.ПС + УКО_АнализЗапроса_РазделительУсловийИ(ДополнительныеПараметры.Язык));
		ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстГде));
	КонецЕсли;
	
	// СГРУППИРОВАТЬ (Группировки)
	Группировки = Новый Массив;
	Для Каждого Группировка Из ОбъектОператор.Группировка Цикл 
		Группировки.Добавить(Группировка);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Группировки) Тогда
		ТекстЗапроса.Добавить("");
		ТекстЗапроса.Добавить(НСтр("ru = 'СГРУППИРОВАТЬ ПО'; en = 'GROUP BY'", ДополнительныеПараметры.Язык));
		ТекстГруппировки = СтрСоединить(Группировки, "," + Символы.ПС);
		ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстГруппировки));
	КонецЕсли;
	
	// ИМЕЮЩИЕ (условия)
	Если ЗначениеЗаполнено(Имеющие) Тогда
		ТекстЗапроса.Добавить("");
		ТекстЗапроса.Добавить(НСтр("ru = 'ИМЕЮЩИЕ'; en = 'HAVING'", ДополнительныеПараметры.Язык));
		ТекстИмеющие = СтрСоединить(Имеющие, Символы.ПС + УКО_АнализЗапроса_РазделительУсловийИ(ДополнительныеПараметры.Язык));
		ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстИмеющие));
	КонецЕсли;
	
	Если ОбъектОператор.ВыбиратьДляИзменения Тогда
		
		ТекстЗапроса.Добавить("");
		ТекстЗапроса.Добавить("ДЛЯ ИЗМЕНЕНИЯ");
		
		ТаблицыДляИзменения = Новый Массив;
		Для Каждого ТаблицаДляИзменения Из ОбъектОператор.ТаблицыДляИзменения Цикл 
			ТаблицыДляИзменения.Добавить(ТаблицаДляИзменения.ИмяТаблицы);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТаблицыДляИзменения) Тогда
			ТекстТаблицыДляИзменения = СтрСоединить(ТаблицыДляИзменения, "," + Символы.ПС);
			ТекстЗапроса.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстТаблицыДляИзменения));
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтрСоединить(ТекстЗапроса, Символы.ПС);

КонецФункции

Функция УКО_АнализЗапроса_ПолучитьТекстЗапросаИсточник(Источник, ДополнительныеПараметры)
	
	Если ТипЗнч(Источник.Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
		
		ИмяТаблицы = Источник.Источник.ИмяТаблицы;
		
		ПараметрыТаблицы = Новый Массив;
		Для Каждого ПараметрТаблицы Из Источник.Источник.Параметры Цикл 
			ПараметрыТаблицы.Добавить(ПараметрТаблицы.Выражение);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПараметрыТаблицы) Тогда
			ТекстИсточника = СтрШаблон("%1(%2)", ИмяТаблицы, СтрСоединить(ПараметрыТаблицы, ", "));
		Иначе
			ТекстИсточника = ИмяТаблицы;
		КонецЕсли;
		
		Представление = ИмяТаблицы;
		
		ТекстИсточника = СтрШаблон(НСтр("ru = '%1 КАК %2'; en = '%1 AS %2'", ДополнительныеПараметры.Язык), ТекстИсточника, Источник.Источник.Псевдоним);
		
	ИначеЕсли ТипЗнч(Источник.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
		
		ТекстИсточника = Источник.Источник.Запрос.ПолучитьТекстЗапроса();
		Представление = Источник.Источник.Псевдоним;
		
		ТекстИсточника = СтрШаблон(НСтр("ru = '(%1) КАК %2'; en = '(%1) AS %2'", ДополнительныеПараметры.Язык), ТекстИсточника, Источник.Источник.Псевдоним);
		
	ИначеЕсли ТипЗнч(Источник.Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		
		ТекстИсточника = Источник.Источник.ИмяТаблицы;
		Представление = Источник.Источник.ИмяТаблицы;
		
		ТекстИсточника = СтрШаблон(НСтр("ru = '%1 КАК %2'; en = '%1 AS %2'", ДополнительныеПараметры.Язык), ТекстИсточника, Источник.Источник.Псевдоним);
		
	КонецЕсли;
	
	// Добавление соединений
	ТЗСоединения = Новый ТаблицаЗначений;
	ТЗСоединения.Колонки.Добавить("Соединение");
	ТЗСоединения.Колонки.Добавить("Условия");
	Для Каждого Соединение Из Источник.Соединения Цикл 

		ТипСоединения = "";
		Если Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее Тогда
			ТипСоединения = "ЛЕВОЕ";
		ИначеЕсли Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее Тогда
			ТипСоединения = "ПРАВОЕ";
		ИначеЕсли Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее Тогда
			ТипСоединения = "ВНУТРЕННЕЕ";
		ИначеЕсли Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПолноеВнешнее Тогда
			ТипСоединения = "ПОЛНОЕ";
		КонецЕсли;
		
		ТекстИсточникаСоединения = УКО_АнализЗапроса_ПолучитьТекстЗапросаИсточник(Соединение.Источник, ДополнительныеПараметры);
		СтрокаСоединение = СтрШаблон("%1 СОЕДИНЕНИЕ %2", ТипСоединения, ТекстИсточникаСоединения);
		НайденнаяСтрокаСоединение = ТЗСоединения.Найти(СтрокаСоединение, "Соединение");
		Если НайденнаяСтрокаСоединение = Неопределено Тогда
			
			НоваяСтрока = ТЗСоединения.Добавить();
			НоваяСтрока.Соединение = СтрокаСоединение;
			
			Условия = Новый Массив;
			Условия.Добавить(Соединение.Условие);
			
			НоваяСтрока.Условия = Условия;
			
		Иначе
			
			Условия = НайденнаяСтрокаСоединение.Условия;
			Условия.Добавить(Соединение.Условие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление условий соединений
	Соединения = Новый Массив;
	Для Каждого СтрокаСоединение Из ТЗСоединения Цикл 
		Соединения.Добавить(СтрШаблон("%1 
			|ПО (%2)", СтрокаСоединение.Соединение, СтрСоединить(СтрокаСоединение.Условия, УКО_АнализЗапроса_РазделительУсловийИ("ru"))));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Соединения) Тогда
		ТекстСоединений = СтрСоединить(Соединения, Символы.ПС);
		
		ТекстИсточника = ТекстИсточника + "
		|" + УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(ТекстСоединений);
	КонецЕсли;
	
	Возврат	ТекстИсточника;
	
КонецФункции

Функция УКО_АнализЗапроса_ИспользуемыеВременныеТаблицыВВыражении(Выражение)
	
	Результат = Новый Массив;
	
	НомерВхождения = 1;
	Пока Истина Цикл 
		
		Индекс = 1;
		Если УКО_СтрокиКлиентСервер_РазборНайтиТекст(Выражение, "ИЗ", Индекс, НомерВхождения) Тогда
			
			Незначимые = УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(Выражение, Индекс);
			Если СтрДлина(Незначимые) > 0 Тогда
				
				ИдентификаторТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Выражение, Индекс);
				СледующийСимвол = УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(Выражение, Индекс);
				Если СледующийСимвол = "." Тогда
					ИдентификаторТаблицы = "";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИдентификаторТаблицы) Тогда
					Результат.Добавить(ИдентификаторТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 
			Прервать;
		КонецЕсли;
		
		НомерВхождения = НомерВхождения + 1;
		
	КонецЦикла;
	
	НомерВхождения = 1;
	Пока Истина Цикл 
		
		Индекс = 1;
		Если УКО_СтрокиКлиентСервер_РазборНайтиТекст(Выражение, "FROM", Индекс, НомерВхождения) Тогда
			
			УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(Выражение, Индекс);
			ИдентификаторТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Выражение, Индекс);
			СледующийСимвол = УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(Выражение, Индекс);
			Если СледующийСимвол = "." Тогда
				ИдентификаторТаблицы = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИдентификаторТаблицы) Тогда
				Результат.Добавить(ИдентификаторТаблицы);
			КонецЕсли;

		Иначе 
			Прервать;
		КонецЕсли;
		
		НомерВхождения = НомерВхождения + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_АнализЗапроса_ВсеВременныеТаблицыДобавить(ВсеВременныеТаблицы, Имя, Текст, НеобходимыеВременныеТаблицы)
	
	ОписаниеВременнойТаблицы = Новый Структура;
	ОписаниеВременнойТаблицы.Вставить("Имя", Имя);
	ОписаниеВременнойТаблицы.Вставить("Текст", Текст);
	ОписаниеВременнойТаблицы.Вставить("НеобходимыеВременныеТаблицы", НеобходимыеВременныеТаблицы);
	
	ВсеВременныеТаблицы.Добавить(ОписаниеВременнойТаблицы);
	
КонецПроцедуры

Функция УКО_АнализЗапроса_ВсеВременныеТаблицыНайти(ВсеВременныеТаблицы, Имя)
	
	Для Каждого ОписаниеВременнойТаблицы Из ВсеВременныеТаблицы Цикл 
		
		Если ОписаниеВременнойТаблицы.Имя = Имя Тогда
			Возврат ОписаниеВременнойТаблицы;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УКО_АнализЗапроса_ВсеВременныеТаблицыУдалить(ВсеВременныеТаблицы, Имя)
	
	Индекс = 0;
	Для Каждого ОписаниеВременнойТаблицы Из ВсеВременныеТаблицы Цикл 
		
		Если ОписаниеВременнойТаблицы.Имя = Имя Тогда
			ВсеВременныеТаблицы.Удалить(Индекс);
			Возврат;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_АнализЗапроса_НеобходимыеВременныеТаблицыДобавить(НеобходимыеВременныеТаблицы, ДобавляемыеЗначения)
	
	УКО_ОбщегоНазначенияКлиентСервер_ДобавитьВМассив(НеобходимыеВременныеТаблицы, ДобавляемыеЗначения);
	
КонецПроцедуры

Функция УКО_АнализЗапроса_НеобходимыеВременныеТаблицыНовый()
	
	Возврат Новый Массив;
	
КонецФункции
// Заполняет список сортировок плана запроса
//
// Параметры:
//   Элемент  - ЭлементФормы - Элемент формы список выбора
//   ТипСУБД  - Перечисления.УКО_СУБД - Тип СУБД анализируемого плана
//
// Возвращаемое значение:
//   Строка	- Значение сортировки (по умолчанию)
//
Функция УКО_АнализПланаЗапроса_ЗаполнитьСписокСортировкиПлана(Элемент, ТипСУБД) Экспорт
	
	Результат = "Стоимости";
	СписокВыбора = Элемент.СписокВыбора;
	Если ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		СписокВыбора.Добавить("Порядку", НСтр("ru = 'Порядку'; en = 'Order'"));
		СписокВыбора.Добавить("ВремениВыполнения", НСтр("ru = 'Времени выполнения'; en = 'Execution time'"));
		
		Результат = "ВремениВыполнения";
		
	ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.MicrosoftSQL" Тогда
 
		СписокВыбора.Добавить("Порядку", НСтр("ru = 'Порядку'; en = 'Order'"));
		СписокВыбора.Добавить("Стоимости", НСтр("ru = 'Стоимости'; en = 'Costs'"));
		СписокВыбора.Добавить("ВремениВводаВывода", НСтр("ru = 'Времени ввода вывода'; en = 'Time input / output'"));
		
		Результат = "Стоимости";
		
	ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда
 
		СписокВыбора.Добавить("Порядку", НСтр("ru = 'Порядку'; en = 'Order'"));
		СписокВыбора.Добавить("Стоимости", НСтр("ru = 'Стоимости'; en = 'Costs'"));
		
		Результат = "Стоимости";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Производит анализ технологического журнала для получения данных плана выполнения запроса
// Параметры:
//   ПолноеИмяФайла  - Строка - Полное имя файла лога журнала
//   UIDМетки  - Строка - UID метки для поиска данных запроса в журнале
//   ОписанияТиповЗадействованныхПараметров  - Массив - Используемые типы параметров
//
// Возвращаемое значение:
//   Структура	- Данные анализа (ТипСУБД, Дерево)
//
Функция УКО_АнализПланаЗапроса_ПолучитьДанные(ПолноеИмяФайла, UIDМетки, ОписанияТиповЗадействованныхПараметров) Экспорт 
	
	Результат = УКО_АнализПланаЗапроса_ПрочитатьДанныеИзТехнологическогоЖурнала(ПолноеИмяФайла, UIDМетки);
	ТипСУБД = Результат.ТипСУБД;
	
	ХранениеБазыДанных = Новый Структура;
	ХранениеБазыДанных.Вставить("Имя", УКО_ОбщегоНазначения_ИмяИнформационнойБазы());
	ХранениеБазыДанных.Вставить("ТипСУБД", ТипСУБД);
	
	// Подготовка структуры хранения
	СтруктураХраненияБазыДанных = ПолучитьСтруктуруХраненияБазыДанных(, Истина);
	Если ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		Для Каждого СтрокаХранения Из СтруктураХраненияБазыДанных Цикл 
			СтрокаХранения.ИмяТаблицыХранения = ВРег(СтрокаХранения.ИмяТаблицыХранения);
		КонецЦикла;
		
	КонецЕсли;
	ХранениеБазыДанных.Вставить("Структура", СтруктураХраненияБазыДанных);

	ДеревоПланаЗапроса = Новый ДеревоЗначений;
	ДеревоПланаЗапроса.Колонки.Добавить("Оператор", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(100));
	ДеревоПланаЗапроса.Колонки.Добавить("Контекст", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(150));
	ДеревоПланаЗапроса.Колонки.Добавить("Контекст1С", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(150));
	ДеревоПланаЗапроса.Колонки.Добавить("SQLЗапрос", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
	ДеревоПланаЗапроса.Колонки.Добавить("SQLЗапрос1С", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
	ДеревоПланаЗапроса.Колонки.Добавить("План", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
	ДеревоПланаЗапроса.Колонки.Добавить("План1С", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
	
	// Общие показатели
	ДеревоПланаЗапроса.Колонки.Добавить("UID", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДеревоПланаЗапроса.Колонки.Добавить("Количество", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
	ДеревоПланаЗапроса.Колонки.Добавить("НомерСтроки", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
	ДеревоПланаЗапроса.Колонки.Добавить("ПроцентОтОбщего", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());

	// Показатели для разных СУБД
	Если ТипСУБД = "Перечисление.УКО_СУБД.MicrosoftSQL" Тогда
		
		ДеревоПланаЗапроса.Колонки.Добавить("Стоимость", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		ДеревоПланаЗапроса.Колонки.Добавить("ЗатратыВводВывод", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		ДеревоПланаЗапроса.Колонки.Добавить("ЗагрузкаЦП", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		
		ДеревоПланаЗапроса.Колонки.Добавить("ДанныеСтрок", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(100));
		ДеревоПланаЗапроса.Колонки.Добавить("СтрокиПлан", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		ДеревоПланаЗапроса.Колонки.Добавить("СтрокиФакт", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		ДеревоПланаЗапроса.Колонки.Добавить("СреднийРазмерСтроки", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		
		ДеревоПланаЗапроса.Колонки.Добавить("Вызовы", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(100));
		ДеревоПланаЗапроса.Колонки.Добавить("ВызовыПлан", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		ДеревоПланаЗапроса.Колонки.Добавить("ВызовыФакт", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		
	ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		ДеревоПланаЗапроса.Колонки.Добавить("ВремяВыполнения", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10, 3));
		ДеревоПланаЗапроса.Колонки.Добавить("ВремяРазбора", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10, 3));
		ДеревоПланаЗапроса.Колонки.Добавить("ОбработаноЗаписей", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		ДеревоПланаЗапроса.Колонки.Добавить("БуферыПамяти", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		ДеревоПланаЗапроса.Колонки.Добавить("ЗаписейВРезультате", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		ДеревоПланаЗапроса.Колонки.Добавить("РазмерЗаписи", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		
	ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда
		
		ДеревоПланаЗапроса.Колонки.Добавить("Стоимость", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло());
		ДеревоПланаЗапроса.Колонки.Добавить("ВремяВыполнения", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10, 3));
		ДеревоПланаЗапроса.Колонки.Добавить("ОбработаноЗаписей", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		ДеревоПланаЗапроса.Колонки.Добавить("ЗаписейВРезультате", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		ДеревоПланаЗапроса.Колонки.Добавить("РазмерЗаписи", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(10));
		
	КонецЕсли;
	
	КореньДерева = ДеревоПланаЗапроса.Строки.Добавить();
	
	НомерЗапроса = 1;
	Для Каждого ОписаниеЗапроса Из Результат.Запросы Цикл 
		
		НоваяСтрока = КореньДерева.Строки.Добавить();
		НоваяСтрока.Оператор = СтрШаблон(НСтр("ru = 'Запрос %1'; en = 'Query %1'"), НомерЗапроса);
		
		НоваяСтрока.SQLЗапрос = ОписаниеЗапроса.SQLТекст;
		
		ОписаниеЗапросаВТерминах1С = УКО_АнализПланаЗапроса_SQLЗапросВТерминах1С(ОписаниеЗапроса.SQLТекст, ХранениеБазыДанных, ОписанияТиповЗадействованныхПараметров);
		НоваяСтрока.SQLЗапрос1С = ОписаниеЗапросаВТерминах1С.Текст;
		
		ТекстПланаЗапроса = ОписаниеЗапроса.План;
		Если ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда
			
			Индекс = СтрНайти(ТекстПланаЗапроса, "Planning time:");
			Если ЗначениеЗаполнено(Индекс) Тогда
				ТекстПланаЗапроса = Лев(ТекстПланаЗапроса, Индекс - 1);
			КонецЕсли;

		КонецЕсли;
		
		УКО_АнализПланаЗапроса_РазборПланаВыполненияЗапроса(НоваяСтрока, ТекстПланаЗапроса, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С);
		
		НомерЗапроса = НомерЗапроса + 1;
		
	КонецЦикла;
	
	// Дополнительная обработка данных расчет итогов, заполнение номера по порядку и т.д.
	УКО_АнализПланаЗапроса_ЗаполнитьВспомогательныеСтрокиДереваАнализаПланаЗапроса(КореньДерева);
	КореньДерева.Количество = УКО_АнализПланаЗапроса_ИтогВДереве(КореньДерева, "Количество", Ложь);
	
	Если ТипСУБД = "Перечисление.УКО_СУБД.MicrosoftSQL" Тогда
		
		ИтогоСтоимость = 0; ИтогоЗагрузкаЦП = 0; ИтогоЗатратыВводВывод = 0;
		Для Каждого ВложеннаяСтрока Из КореньДерева.Строки Цикл 
			
			Стоимость = УКО_АнализПланаЗапроса_ИтогВДереве(ВложеннаяСтрока, "Стоимость");
			ВложеннаяСтрока.Стоимость = Стоимость;
			ИтогоСтоимость = ИтогоСтоимость + Стоимость;
			
			ЗагрузкаЦП = УКО_АнализПланаЗапроса_ИтогВДереве(ВложеннаяСтрока, "ЗагрузкаЦП");
			ВложеннаяСтрока.ЗагрузкаЦП = ЗагрузкаЦП;
			ИтогоЗагрузкаЦП = ИтогоЗагрузкаЦП + ЗагрузкаЦП;
			
			ЗатратыВводВывод = УКО_АнализПланаЗапроса_ИтогВДереве(ВложеннаяСтрока, "ЗатратыВводВывод");
			ВложеннаяСтрока.ЗатратыВводВывод = ЗатратыВводВывод;
			ИтогоЗатратыВводВывод = ИтогоЗатратыВводВывод + ЗатратыВводВывод;
			
		КонецЦикла;
		КореньДерева.Стоимость = ИтогоСтоимость;
		КореньДерева.ЗагрузкаЦП = ИтогоЗагрузкаЦП;
		КореньДерева.ЗатратыВводВывод = ИтогоЗатратыВводВывод;
		
		УКО_АнализПланаЗапроса_РассчитатьПроцентОтОбщегоВДереве(КореньДерева, КореньДерева.Стоимость, "Стоимость");
		
	ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда
		
		ИтогоСтоимость = 0; ИтогоЗаписейВРезультате = 0;
		Для Каждого ВложеннаяСтрока Из КореньДерева.Строки Цикл 
			
			Стоимость = УКО_АнализПланаЗапроса_ИтогВДереве(ВложеннаяСтрока, "Стоимость", Ложь);
			ВложеннаяСтрока.Стоимость = Стоимость;
			ИтогоСтоимость = ИтогоСтоимость + Стоимость;
			
			ЗаписейВРезультате = УКО_АнализПланаЗапроса_ИтогВДереве(ВложеннаяСтрока, "ЗаписейВРезультате", Ложь);
			ВложеннаяСтрока.ЗаписейВРезультате = ЗаписейВРезультате;
			ИтогоЗаписейВРезультате = ИтогоЗаписейВРезультате + ЗаписейВРезультате;
			
		КонецЦикла;
		КореньДерева.Стоимость = ИтогоСтоимость;
		КореньДерева.ЗаписейВРезультате = ИтогоЗаписейВРезультате;
		
		УКО_АнализПланаЗапроса_РассчитатьПроцентОтОбщегоВДереве(КореньДерева, КореньДерева.Стоимость, "Стоимость");
		
	ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		КореньДерева.ВремяВыполнения = УКО_АнализПланаЗапроса_ИтогВДереве(КореньДерева, "ВремяВыполнения");
		КореньДерева.ВремяРазбора = УКО_АнализПланаЗапроса_ИтогВДереве(КореньДерева, "ВремяРазбора");
		
		УКО_АнализПланаЗапроса_РассчитатьПроцентОтОбщегоВДереве(КореньДерева, КореньДерева.ВремяВыполнения, "ВремяВыполнения");
		
	КонецЕсли;
	
	КореньДерева.SQLЗапрос = УКО_АнализПланаЗапроса_ИтогПоСтрокеВДереве(КореньДерева, "SQLЗапрос", УКО_ЗапросКлиентСервер_РазделительПакетов());
	КореньДерева.SQLЗапрос1С = УКО_АнализПланаЗапроса_ИтогПоСтрокеВДереве(КореньДерева, "SQLЗапрос1С", УКО_ЗапросКлиентСервер_РазделительПакетов());
	
	Результат = Новый Структура;
	Результат.Вставить("ТипСУБД", ТипСУБД);
	Результат.Вставить("Дерево", ДеревоПланаЗапроса);
	
	Возврат Результат;

КонецФункции
// Возвращает идентификатор процесса ОС
//
// Возвращаемое значение:
//   Строка	- идентификатор процесса ОС
//
Функция УКО_АнализПланаЗапроса_ИдентификаторПроцессаОС() Экспорт

	ИДТекущегоПроцесса = Неопределено;
	ОбъектСистемы = Новый COMОбъект("WScript.Shell");
	
	Если ИДТекущегоПроцесса = Неопределено Тогда 
		
	    Процесс = ОбъектСистемы.Exec("rundll32.exe kernel32,Sleep");
		ComОбъект = СтрШаблон("winmgmts:{impersonationLevel=impersonate}!\\.\root\CIMV2:Win32_Process.Handle='%1'", Формат(Процесс.ProcessID,"ЧГ=0"));
	    ИДТекущегоПроцесса = ПолучитьCOMОбъект(ComОбъект).ParentProcessID;
	    Процесс.Terminate();
		
	КонецЕсли;
	
	Возврат ИДТекущегоПроцесса;

КонецФункции
// Записывает файл (пример) настроек логов технологического журнала во временное хранилище
//
// Параметры:
//   КаталогЛогов - Строка - Каталог логов технологического журнала (на сервере)
//
// Возвращаемое значение:
//   Строка	- Адрес во временном хранилище
//
Функция УКО_АнализПланаЗапроса_ПримерФайлаНастройкиТехнологическогоЖурнала(КаталогЛогов) Экспорт
	
	Макет = ПолучитьМакет("УКО_ШаблонФайлаНастройкиТехнологическогоЖурнала");
	Шаблон = Макет.ПолучитьТекст();
	Текст = СтрШаблон(Шаблон, УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения(), КаталогЛогов);
	
	Возврат ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеИзСтроки(Текст));
	
КонецФункции

Функция УКО_АнализПланаЗапроса_ПрочитатьДанныеИзТехнологическогоЖурнала(ПолноеИмяФайла, UIDМетки)
	
	СтрокиЖурнала = Новый Массив;
	ДобавлятьВМассив = Ложь;
	
	ЧтениеДанных = Новый ЧтениеДанных(ПолноеИмяФайла);
	ЧтениеДанных.ПропуститьДо(UIDМетки);
	Строка = ЧтениеДанных.ПрочитатьСтроку();
	
	ВременнаяСтрока = "";
	Пока Не ЧтениеДанных.ЧтениеЗавершено Цикл
		
		Если ДобавлятьВМассив Тогда 
			
			Если Не СтрНайти(Строка, UIDМетки + "_end") Тогда
				
				Если Сред(Строка, 3, 1) = ":" И Сред(Строка, 6, 1) = "." Тогда
					
					Если ЗначениеЗаполнено(ВременнаяСтрока) 
						И СтрНайти(ВременнаяСтрока, "Sql=")
						И СтрНайти(ВременнаяСтрока, "planSQLText=") 
						И Не СтрНайти(ВременнаяСтрока, UIDМетки) Тогда 
							СтрокиЖурнала.Добавить(ВременнаяСтрока);	
					КонецЕсли;
						
					ВременнаяСтрока = Строка;
				Иначе
					ВременнаяСтрока =  ВременнаяСтрока + Символы.ПС + Строка;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(Строка, UIDМетки + "_begin") Тогда
			ДобавлятьВМассив = Истина;
		КонецЕсли;
		
		Строка = ЧтениеДанных.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ЧтениеДанных.Закрыть();
	
	ПланыЗапросов = Новый Массив;
	Для Каждого Строка Из СтрокиЖурнала Цикл 
		
		Индекс = 1;
		УКО_СтрокиКлиентСервер_РазборНайтиТекст(Строка, ",", Индекс);
		IDСУБД = УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(Строка, ",", Индекс);
		ТипСУБД = УКО_АнализПланаЗапроса_ТипСУБД(ВРег(IDСУБД));
		
		Если ТипСУБД = "Перечисление.УКО_СУБД.MicrosoftSQL" Тогда 
			
			SQLТекстТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, "Sql=", ",Rows");
			ПланТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, "planSQLText=", ",Context");
			
		ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда 

			// Пример строки журнала
			// 04:41.075004-1,DBPOSTGRS,...,Sql='SELECT
 			// T3._C_1RRef AS IDRRef ...
			// FROM pg_temp.tt2 T3',planSQLText='Seq Scan on tt2 t3  (cost=0.00..19.05 rows=405 width=238) (actual time=0.013..0.208 rows=663 loops=1)
			// Planning time: 0.112 ms
			// Execution time: 0.243 ms
			// ',RowsAffected=663,Result=PGRES_TUPLES_OK,Context='Форма.Вызов : 			
			
			БлокПараметры = ",Prm=";
			БлокПланЗапроса = ",planSQLText=";
			Если СтрНайти(Строка, БлокПараметры) Тогда
				SQLТекстТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, "Sql=", БлокПараметры);
			Иначе
				SQLТекстТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, "Sql=", БлокПланЗапроса);
			КонецЕсли;
			
			ПланТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, БлокПланЗапроса, ",Rows");
			
		ИначеЕсли ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда 
			
			// Пример строки журнала
			// 02:56.766003-3,DBV8DBEng,5,process=1CV8,OSThread=6064,Usr=Администратор,Trans=0,Sql='SELECT
			// T1._IDRRef, ...',NParams=0,planSQLText='Fields:(
			// T1._IDRRef, ...) _REFERENCE9 (T1) RANGE SCAN USING INDEX (_IDRREFIDX) (1 fields)
			// Statistics: RecordsScanned = 2, ParseTime = 0, ExecuteTime = 0, BuffersMemory = 25083, ResultRecords = 2,
			// RecordSize = 123',Rows=2,Context='Форма.Вызов ...
			SQLТекстТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, "Sql=", ",NParams=");
			ПланТекущегоЗапроса = УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, "planSQLText=", ",Rows");
			
		КонецЕсли;
		
		ПланыЗапросов.Добавить(Новый Структура("SQLТекст, План", SQLТекстТекущегоЗапроса, СокрЛП(ПланТекущегоЗапроса)));

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипСУБД", ТипСУБД);
	Результат.Вставить("Запросы", ПланыЗапросов);
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_АнализПланаЗапроса_РазборПланаВыполненияЗапроса(СтрокаПриемник, ПланЗапросаТекст, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С)
	
	Если ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.MicrosoftSQL" Тогда

		СтрокиПоУровню = Новый Соответствие;
		Для Каждого СтрокаПлана Из СтрРазделить(ПланЗапросаТекст, Символы.ПС, Ложь) Цикл 
			
			Индекс = 1;
			ПоказателиПлана = СтрРазделить(УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(СтрокаПлана, "|", Индекс), ",");
			Для ИндексПоказателяПлана = 0 По ПоказателиПлана.ВГраница() Цикл 
				ПоказателиПлана[ИндексПоказателяПлана] = УКО_СтрокиКлиентСервер_ЭкспоненциальноеЧисло(ПоказателиПлана[ИндексПоказателяПлана]);
			КонецЦикла;
			
			ИскомаяСтрока = "|--";
			Индекс = СтрНайти(СтрокаПлана, ИскомаяСтрока,, Индекс);
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(СтрокаПлана, ИскомаяСтрока, Индекс);
			
			ТекстПлана = Сред(СтрокаПлана, Индекс);
			ОписаниеПланаВТерминах1С = УКО_АнализПланаЗапроса_SQLПланЗапросаВТерминах1С(ТекстПлана, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С);
			
			ИндексНачалаСтрокиОператор = СтрНайти(СтрокаПлана, ",", НаправлениеПоиска.СКонца, Индекс - СтрДлина(ИскомаяСтрока));  
			ОтступПередОператором = Сред(СтрокаПлана, ИндексНачалаСтрокиОператор + 1, Индекс -  ИндексНачалаСтрокиОператор - 1);
			Уровень = Цел(СтрДлина(ОтступПередОператором)/3);
			
			СтрокаРодитель = СтрокиПоУровню.Получить(Уровень - 1);
			Если СтрокаРодитель = Неопределено Тогда
				НоваяСтрока = СтрокаПриемник.Строки.Добавить();
				СтрокиПоУровню.Вставить(Уровень, НоваяСтрока);
			Иначе
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Оператор = ОписаниеПланаВТерминах1С.Оператор;
			НоваяСтрока.Контекст = СтрСоединить(ОписаниеПланаВТерминах1С.Метаданные, ", ");
			НоваяСтрока.Контекст1С = СтрСоединить(ОписаниеПланаВТерминах1С.Метаданные1C, ", ");;
			НоваяСтрока.План = ТекстПлана;
			НоваяСтрока.План1С = ОписаниеПланаВТерминах1С.Текст;
			НоваяСтрока.СтрокиФакт = ПоказателиПлана[0];
			НоваяСтрока.ВызовыФакт = ПоказателиПлана[1];
			НоваяСтрока.СтрокиПлан = ПоказателиПлана[2];
			НоваяСтрока.ЗатратыВводВывод = ПоказателиПлана[3];
			НоваяСтрока.ЗагрузкаЦП = УКО_СтрокиКлиентСервер_ЭкспоненциальноеЧисло(ПоказателиПлана[4]);
			НоваяСтрока.СреднийРазмерСтроки = ПоказателиПлана[5];
			НоваяСтрока.Стоимость = УКО_СтрокиКлиентСервер_ЭкспоненциальноеЧисло(ПоказателиПлана[6]);
			НоваяСтрока.ВызовыПлан = ПоказателиПлана[7];
			НоваяСтрока.Вызовы = СтрШаблон("%1/%2", НоваяСтрока.ВызовыПлан, НоваяСтрока.ВызовыФакт);		
			НоваяСтрока.ДанныеСтрок = СтрШаблон("%1/%2 (%3)", НоваяСтрока.СтрокиПлан, НоваяСтрока.СтрокиФакт, НоваяСтрока.СреднийРазмерСтроки);		
			
		КонецЦикла;
		
	ИначеЕсли ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда
		
		НачалоБлокаПлана = "->";
		// Сбор строк плана (объединяем подчиненные строки)
		ЭлементыПлана = Новый Массив;
		Для Каждого СтрокаПлана Из СтрРазделить(НачалоБлокаПлана + ПланЗапросаТекст, Символы.ПС, Ложь) Цикл 
			
			Если СтрНайти(СтрокаПлана, НачалоБлокаПлана) Тогда
				ЭлементыПлана.Добавить(СтрокаПлана);
			Иначе
				ЭлементыПлана[ЭлементыПлана.ВГраница()] = ЭлементыПлана[ЭлементыПлана.ВГраница()] + Символы.ПС + СтрокаПлана;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиПоУровню = Новый Соответствие;
		Для Каждого СтрокаПлана Из ЭлементыПлана Цикл 
			
			// Примеры строк:
			// Insert on tt2  (cost=0.00..84.13 rows=663 width=270)
			//   ->  Subquery Scan on "*SELECT*"  (cost=0.00..84.13 rows=663 width=270)
			//   ->  Seq Scan on tt2 t3  (cost=0.00..19.05 rows=405 width=238) (actual time=0.026..0.487 rows=663 loops=1)
			
			БлокСтоимость = " (cost=";
			Стоимость = 0; КоличествоСтрок = 0; РазмерСтроки = 0; ФактическоеВремя = 0; КоличествоОбработанныхСтрок = 0;
			Индекс = 1;
			Если УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, БлокСтоимость, Индекс) Тогда
				
				НачалоБлокаПоказателей = Индекс - СтрДлина(БлокСтоимость);

				УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, "..", Индекс);
				СтоимостьЦелаяЧасть = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
				УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(СтрокаПлана, ".", Индекс);
				СтоимостьДробнаяЧасть = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
				Стоимость = СтоимостьЦелаяЧасть + СтоимостьДробнаяЧасть/100;
				
				УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, "rows=", Индекс);
				КоличествоСтрок = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
				
				УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, "width=", Индекс);
				РазмерСтроки = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
				УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(СтрокаПлана, ")", Индекс);
				
				СтрокаПлана = Лев(СтрокаПлана, НачалоБлокаПоказателей - 1) + Сред(СтрокаПлана, Индекс);
				
				БлокДополнительныеПоказатели = " (actual time=";
				Индекс = 1;
				Если УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, БлокДополнительныеПоказатели, Индекс) Тогда
					
					НачалоБлокаДополнительныхПоказателей = Индекс - СтрДлина(БлокДополнительныеПоказатели);

					УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, "..", Индекс);
					ФактическоеВремяЦелаяЧасть = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
					УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(СтрокаПлана, ".", Индекс);
					ФактическоеВремяДробнаяЧасть = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
					ФактическоеВремя = ФактическоеВремяЦелаяЧасть + ФактическоеВремяДробнаяЧасть/100;
					
					УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, "rows=", Индекс);
					КоличествоОбработанныхСтрок = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
					
					УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПлана, "loops=", Индекс);
					КоличествоЦиклов = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(СтрокаПлана, Индекс);
					УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(СтрокаПлана, ")", Индекс);
					
					СтрокаПлана = Лев(СтрокаПлана, НачалоБлокаДополнительныхПоказателей - 1) + Сред(СтрокаПлана, Индекс);
					
				КонецЕсли;

			КонецЕсли;
			
			ИскомаяСтрока = "->";
			Индекс = СтрНайти(СтрокаПлана, ИскомаяСтрока);
			Если ЗначениеЗаполнено(Индекс) Тогда
				ТекстПлана = Сред(СтрокаПлана, Индекс + СтрДлина(ИскомаяСтрока));
				ОтступПередОператором = Лев(СтрокаПлана, Индекс - 1);
			Иначе 
				ТекстПлана = СтрокаПлана;
				ОтступПередОператором = УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(СтрокаПлана);
			КонецЕсли;
			ТекстПлана = СокрЛП(ТекстПлана);

			ОписаниеПланаВТерминах1С = УКО_АнализПланаЗапроса_SQLПланЗапросаВТерминах1С(ТекстПлана, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С);
			
			ДлинаОтступа = СтрДлина(ОтступПередОператором);
			Если ДлинаОтступа = 0 Тогда
				Уровень = 0;
			Иначе
				Уровень = (ДлинаОтступа - 2)/6 + 1;
			КонецЕсли;	
			
			СтрокаРодитель = СтрокиПоУровню.Получить(Уровень - 1);
			Если СтрокаРодитель = Неопределено Тогда
				НоваяСтрока = СтрокаПриемник.Строки.Добавить();
			Иначе
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			СтрокиПоУровню.Вставить(Уровень, НоваяСтрока);
			
			НоваяСтрока.Оператор = ОписаниеПланаВТерминах1С.Оператор;
			НоваяСтрока.Контекст = СтрСоединить(ОписаниеПланаВТерминах1С.Метаданные, ", ");
			НоваяСтрока.Контекст1С = СтрСоединить(ОписаниеПланаВТерминах1С.Метаданные1C, ", ");;
			НоваяСтрока.План = ТекстПлана;
			НоваяСтрока.План1С = ОписаниеПланаВТерминах1С.Текст;
			НоваяСтрока.Стоимость = Стоимость;
			НоваяСтрока.ЗаписейВРезультате = КоличествоСтрок;
			НоваяСтрока.РазмерЗаписи = РазмерСтроки;
			НоваяСтрока.ВремяВыполнения = ФактическоеВремя;
			НоваяСтрока.ОбработаноЗаписей = КоличествоОбработанныхСтрок;

		КонецЦикла;
		
	ИначеЕсли ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		Показатели = Новый СписокЗначений;
		Показатели.Добавить("RecordsScanned", "ОбработаноЗаписей");
		Показатели.Добавить("ParseTime", "ВремяРазбора");
		Показатели.Добавить("ExecuteTime", "ВремяВыполнения");
		Показатели.Добавить("BuffersMemory", "БуферыПамяти");
		Показатели.Добавить("ResultRecords", "ЗаписейВРезультате");
		Показатели.Добавить("RecordSize", "РазмерЗаписи");
		
		ИскомыйТекст = "Statistics:";
		Индекс = СтрНайти(ПланЗапросаТекст, ИскомыйТекст);
		
		ТекстПлана = Лев(ПланЗапросаТекст, Индекс - 1);
		ТекстПлана = СокрЛП(ТекстПлана);
		
		ОписаниеПланаВТерминах1С = УКО_АнализПланаЗапроса_SQLПланЗапросаВТерминах1С(ТекстПлана, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С);
		
		СтрокаПриемник.План = ТекстПлана;
		СтрокаПриемник.План1С = ОписаниеПланаВТерминах1С.Текст;
		
		Индекс = Индекс + СтрДлина(ИскомыйТекст);
		Для Каждого Показатель Из Показатели Цикл 
			
			УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(ПланЗапросаТекст, Индекс);
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ПланЗапросаТекст, Показатель.Значение, Индекс);
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ПланЗапросаТекст, " = ", Индекс);
			СтрокаПриемник[Показатель.Представление] = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ПланЗапросаТекст, Индекс);
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ПланЗапросаТекст, ",", Индекс);
			
		КонецЦикла;
		
		СтрокаПриемник.ВремяВыполнения = СтрокаПриемник.ВремяВыполнения/1000;
		СтрокаПриемник.ВремяРазбора = СтрокаПриемник.ВремяРазбора/1000;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УКО_АнализПланаЗапроса_SQLЗапросВТерминах1С(Текст, ХранениеБазыДанных, ОписанияТиповЗадействованныхПараметров)
	
	НовыйТекст = Текст;
	
	// Заменяем имена таблиц
	ПсевдонимыТаблиц = Новый Соответствие;
	ПредставлениеПараметров = Новый Соответствие;
	
	Если ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.Файловая"
		ИЛИ ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.PostgreSQL" Тогда
		
		// SELECT
		// T1._IDRRef AS _C_1RRef...
		// FROM _Document17 T1
		// INNER JOIN _Document18 T2 ON 1=1
		УКО_АнализПланаЗапроса_SQLЗапросЗаполнениеПсевдонимовТаблиц(НовыйТекст, "FROM ", ПсевдонимыТаблиц, ХранениеБазыДанных);
		УКО_АнализПланаЗапроса_SQLЗапросЗаполнениеПсевдонимовТаблиц(НовыйТекст, "INNER JOIN ", ПсевдонимыТаблиц, ХранениеБазыДанных);

	Иначе
		
		Пока Истина Цикл 
			
			ПрефиксИмени = "dbo.";
			
			ИскомыйТекст = "FROM " + ПрефиксИмени;
			ИндексFROM = СтрНайти(НовыйТекст, ИскомыйТекст);
			
			Если ИндексFROM = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Индекс = ИндексFROM + СтрДлина(ИскомыйТекст);
			ИндексНачалоИмениТаблицы = Индекс;
			ИмяТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(НовыйТекст, Индекс);
			УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(НовыйТекст, Индекс);
			ПсевдонимТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(НовыйТекст, Индекс);
			ИмяТаблицыВ1С = УКО_АнализПланаЗапроса_ИмяSQLТаблицыВ1С(ИмяТаблицы, ХранениеБазыДанных);
			
			НовыйТекст = Лев(НовыйТекст, ИндексНачалоИмениТаблицы - (1 + СтрДлина(ПрефиксИмени))) + ИмяТаблицыВ1С + Сред(НовыйТекст, ИндексНачалоИмениТаблицы + СтрДлина(ИмяТаблицы));
			ПсевдонимыТаблиц.Вставить(ПсевдонимТаблицы, ИмяТаблицы);
			
		КонецЦикла;
		
		НовыйТекст = СтрЗаменить(НовыйТекст, СтрШаблон("[%1].[dbo].[Config]", ХранениеБазыДанных.Имя), "[Конфигурация]");
	
	КонецЕсли;
	
	// Заменяем имена полей
	УКО_АнализПланаЗапроса_ЗаменаПолейВЗапросеПланеSQL(НовыйТекст, ХранениеБазыДанных, ПсевдонимыТаблиц);
	
	Если ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.MicrosoftSQL" 
			ИЛИ ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда		
		
		ИскомаяСтрока = "0x";
		Индекс = 1;
		
		Пока Истина Цикл 
			
			Индекс = СтрНайти(НовыйТекст, ИскомаяСтрока,, Индекс);
			
			Если Индекс = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИндексНачала = Индекс;
			Индекс = Индекс + СтрДлина(ИскомаяСтрока);
			UIDSQL = УКО_СтрокиКлиентСервер_РазборПрочитатьШестнадцатеричноеЧисло(НовыйТекст, Индекс);
			
			Если UIDSQL <> УКО_СтрокиКлиентСервер_ПустойUID()
				И СтрДлина(UIDSQL) = 32 Тогда
				
				ОписаниеSQLUIDСсылки = УКО_АнализПланаЗапроса_НайтиОписаниеSQLUIDСсылки(UIDSQL, ОписанияТиповЗадействованныхПараметров);
				
				Если ЗначениеЗаполнено(ОписаниеSQLUIDСсылки) Тогда
					
					ПредставлениеПараметров.Вставить(UIDSQL, ОписаниеSQLUIDСсылки); 
					
					НовоеПредставление = СтрШаблон("[%1 (%2)]", ОписаниеSQLUIDСсылки.ПолноеИмяМетаданных,  ОписаниеSQLUIDСсылки.Представление);
					НовыйТекст = Лев(НовыйТекст, ИндексНачала - 1) + НовоеПредставление + Сред(НовыйТекст,Индекс);
					Индекс = ИндексНачала;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", НовыйТекст);
	Результат.Вставить("ПсевдонимыТаблиц", ПсевдонимыТаблиц);
	Результат.Вставить("ПредставлениеПараметров", ПредставлениеПараметров);
	
	Возврат Результат;
	
КонецФункции

Функция УКО_АнализПланаЗапроса_SQLПланЗапросаВТерминах1С(Текст, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С)
	
	НовыйТекст = Текст;
	ИспользуемыеМетаданные = Новый Массив;
	ИспользуемыеМетаданные1C = Новый Массив;
	
	Если ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		Оператор = "";
		// CONST WHERE
		//   TRUE
		// Fields:(
		//    T1._IDRRef..)
		// _DOCUMENT17 (T1) FULL SCAN
		// NESTED LOOP
		// _DOCUMENT18 (T2) FULL SCAN

		УКО_АнализПланаЗапроса_ЗаменитьИменаТаблицФайловПланеЗапроса(НовыйТекст, ХранениеБазыДанных, "FULL SCAN");
		УКО_АнализПланаЗапроса_ЗаменитьИменаТаблицФайловПланеЗапроса(НовыйТекст, ХранениеБазыДанных, "RANGE SCAN");
		
	Иначе
		
		Оператор = УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(НовыйТекст, "(");
		
		Пока Истина Цикл 
			
			ИскомыйТекст = СтрШаблон("[%1].[dbo].[", ХранениеБазыДанных.Имя);
			Индекс = СтрНайти(НовыйТекст, ИскомыйТекст);
			
			Если Индекс = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИндексТаблицы = Индекс + СтрДлина(ИскомыйТекст);
			ИмяТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(НовыйТекст, ИндексТаблицы);
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(НовыйТекст, "].[", ИндексТаблицы, );
			ИмяПоля = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(НовыйТекст, ИндексТаблицы);
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(НовыйТекст, "]", ИндексТаблицы);
			
			ИмяТаблицыВ1С = УКО_АнализПланаЗапроса_ИмяSQLТаблицыВ1С(ИмяТаблицы, ХранениеБазыДанных);
			ИмяПоляВТерминах1С = УКО_АнализПланаЗапроса_ИмяSQLПоляТаблицыВ1С(ИмяПоля, ИмяТаблицы, ХранениеБазыДанных);
			
			НовыйТекст = Лев(НовыйТекст, Индекс - 1) + СтрШаблон("[%1].[%2]", ИмяТаблицыВ1С, ИмяПоляВТерминах1С) + Сред(НовыйТекст, ИндексТаблицы);
			
			Если Оператор <> "Table Insert" Тогда
				
				НовыеИспользуемыеМетаданные = СтрШаблон("%1.%2", ИмяТаблицы, ИмяПоля);
				Если ИспользуемыеМетаданные.Найти(НовыеИспользуемыеМетаданные) = Неопределено Тогда
					ИспользуемыеМетаданные.Добавить(НовыеИспользуемыеМетаданные);
				КонецЕсли;
				
				НовыеИспользуемыеМетаданные1С = СтрШаблон("%1.%2", ИмяТаблицыВ1С, ИмяПоляВТерминах1С);
				Если ИспользуемыеМетаданные1C.Найти(НовыеИспользуемыеМетаданные1С) = Неопределено Тогда
					ИспользуемыеМетаданные1C.Добавить(НовыеИспользуемыеМетаданные1С);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	// Замена имен полей по псевдонимам
	УКО_АнализПланаЗапроса_ЗаменаПолейВЗапросеПланеSQL(НовыйТекст, ХранениеБазыДанных, ОписаниеЗапросаВТерминах1С.ПсевдонимыТаблиц);
	
	// Замена ссылок на параметры
	Для Каждого ПредставлениеПараметра Из ОписаниеЗапросаВТерминах1С.ПредставлениеПараметров Цикл 
		ОписаниеПредставления = ПредставлениеПараметра.Значение;
		НовыйТекст = СтрЗаменить(НовыйТекст, ПредставлениеПараметра.Ключ, ОписаниеПредставления.ПолноеПредставление);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Оператор", Оператор);
	Результат.Вставить("Текст", НовыйТекст);
	Результат.Вставить("Метаданные", ИспользуемыеМетаданные);
	Результат.Вставить("Метаданные1C", ИспользуемыеМетаданные1C);
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_АнализПланаЗапроса_ЗаполнитьВспомогательныеСтрокиДереваАнализаПланаЗапроса(Строка)
	
	НомерСтроки = 1;
	Для Каждого ВложеннаяСтрока Из Строка.Строки Цикл 
		
		ВложеннаяСтрока.НомерСтроки = НомерСтроки;
		ВложеннаяСтрока.Количество = 1;
		ВложеннаяСтрока.UID = Новый УникальныйИдентификатор;
		УКО_АнализПланаЗапроса_ЗаполнитьВспомогательныеСтрокиДереваАнализаПланаЗапроса(ВложеннаяСтрока);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УКО_АнализПланаЗапроса_ИтогВДереве(Строка, ИмяПоля, Рекурсивно = Истина)
	
	Итого = 0;
	Для Каждого ВложеннаяСтрока Из Строка.Строки Цикл 
		
		Итого = Итого + ВложеннаяСтрока[ИмяПоля];
		Если Рекурсивно Тогда
			Итого = Итого + УКО_АнализПланаЗапроса_ИтогВДереве(ВложеннаяСтрока, ИмяПоля, Рекурсивно);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Итого;
	
КонецФункции

Функция УКО_АнализПланаЗапроса_ИтогПоСтрокеВДереве(Строка, ИмяПоля, Разделитель = ",")
	
	Строки = Новый Массив;
	Для Каждого ВложеннаяСтрока Из Строка.Строки Цикл 
		
		Строки.Добавить(ВложеннаяСтрока[ИмяПоля]);
		
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Разделитель);
	
КонецФункции

Процедура УКО_АнализПланаЗапроса_РассчитатьПроцентОтОбщегоВДереве(Строка, Общее, ИмяПоля, ИмяПоляПроцентОтОбщего = "ПроцентОтОбщего")
	
	Для Каждого ВложеннаяСтрока Из Строка.Строки Цикл 
		
		Если Общее = 0 Тогда
			Результат = 0;
		Иначе
			Результат = (ВложеннаяСтрока[ИмяПоля] / Общее) * 100;
		КонецЕсли;
		ВложеннаяСтрока[ИмяПоляПроцентОтОбщего] = Результат;
		
		УКО_АнализПланаЗапроса_РассчитатьПроцентОтОбщегоВДереве(ВложеннаяСтрока, Общее, ИмяПоля, ИмяПоляПроцентОтОбщего);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_АнализПланаЗапроса_SQLЗапросЗаполнениеПсевдонимовТаблиц(Текст, БлокПоиска, ПсевдонимыТаблиц, ХранениеБазыДанных)
	
	НомерВхождения = 1;
	Пока Истина Цикл 
		
		Индекс = 1;
		Если НЕ УКО_СтрокиКлиентСервер_РазборНайтиТекст(Текст, БлокПоиска, Индекс, НомерВхождения) Тогда
			Прервать;
		КонецЕсли;
		
		ИндексНачалоИмениТаблицы = Индекс;
		ИмяТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Текст, Индекс);
		УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(Текст, Индекс);
		ПсевдонимТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Текст, Индекс);
		ИмяТаблицыВ1С = УКО_АнализПланаЗапроса_ИмяSQLТаблицыВ1С(ИмяТаблицы, ХранениеБазыДанных);
		
		Текст = Лев(Текст, ИндексНачалоИмениТаблицы - 1) + ИмяТаблицыВ1С + Сред(Текст, ИндексНачалоИмениТаблицы + СтрДлина(ИмяТаблицы));
		ПсевдонимыТаблиц.Вставить(ПсевдонимТаблицы, ИмяТаблицы);
		
		НомерВхождения = НомерВхождения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_АнализПланаЗапроса_ЗаменитьИменаТаблицФайловПланеЗапроса(Текст, ХранениеБазыДанных, БлокПоиска)
	
	НомерВхождения = 1;
	Пока Истина Цикл 
		
		ИндексБлока = СтрНайти(Текст, БлокПоиска,,, НомерВхождения);
		
		Если ИндексБлока = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Индекс = СтрНайти(Текст, Символы.ПС, НаправлениеПоиска.СКонца, ИндексБлока);
		Индекс = Индекс + 1;
		ИндексНачалоИмениТаблицы = Индекс;
		ИмяТаблицы = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Текст, Индекс);
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Текст, "(", Индекс);
		
		ИмяТаблицыВ1С = УКО_АнализПланаЗапроса_ИмяSQLТаблицыВ1С(ИмяТаблицы, ХранениеБазыДанных);
		Текст = Лев(Текст, ИндексНачалоИмениТаблицы - 1) + ИмяТаблицыВ1С + Сред(Текст, ИндексНачалоИмениТаблицы + СтрДлина(ИмяТаблицы));
		
		НомерВхождения = НомерВхождения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_АнализПланаЗапроса_ЗаменаПолейВЗапросеПланеSQL(Текст, ХранениеБазыДанных, ПсевдонимыТаблиц)
	
	// Заменяем имена полей в запросе
	Для Каждого ПсевдонимТаблицы Из ПсевдонимыТаблиц Цикл 
		
		НомерВхождения = 1;
		Пока Истина Цикл 
			
			Индекс = 1;
			Если НЕ УКО_СтрокиКлиентСервер_РазборНайтиТекст(Текст, ПсевдонимТаблицы.Ключ + ".", Индекс, НомерВхождения) Тогда
				Прервать;
			КонецЕсли;
			
			ИндексНачалаПоля = Индекс;
			ИмяПоля = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Текст, ИндексНачалаПоля, Ложь);
			
			ИмяПоляВТерминах1С = УКО_АнализПланаЗапроса_ИмяSQLПоляТаблицыВ1С(ИмяПоля, ПсевдонимТаблицы.Значение, ХранениеБазыДанных);
			Текст = Лев(Текст, ИндексНачалаПоля - 1) + ИмяПоляВТерминах1С + Сред(Текст, ИндексНачалаПоля + СтрДлина(ИмяПоля));
			
			НомерВхождения = НомерВхождения + 1;
			
		КонецЦикла;

	КонецЦикла;
	
	Если ХранениеБазыДанных.ТипСУБД <> "Перечисление.УКО_СУБД.Файловая" Тогда
	
		// Заменяем имена полей по псевдонимам в плане
		Для Каждого ПсевдонимТаблицы Из ПсевдонимыТаблиц Цикл 
			
			НомерВхождения = 1;
			Пока Истина Цикл 
				
				ИскомыйТекст = СтрШаблон("[%1].[", ПсевдонимТаблицы.Ключ);
				Индекс = СтрНайти(Текст, ИскомыйТекст,,,НомерВхождения);
				
				Если Индекс = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИндексНачалаПоля = Индекс + СтрДлина(ИскомыйТекст);
				ИмяПоля = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Текст, ИндексНачалаПоля, Ложь);
				ИмяПоляВТерминах1С = УКО_АнализПланаЗапроса_ИмяSQLПоляТаблицыВ1С(ИмяПоля, ПсевдонимТаблицы.Значение, ХранениеБазыДанных);
				Текст = Лев(Текст, ИндексНачалаПоля - 1) + ИмяПоляВТерминах1С + Сред(Текст, ИндексНачалаПоля + СтрДлина(ИмяПоля));
				
				НомерВхождения = НомерВхождения + 1;
				
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция УКО_АнализПланаЗапроса_НайтиОписаниеSQLUIDСсылки(SQLUID, ОписанияТиповЗадействованныхПараметров)
	
	Для Каждого ОписаниеТиповПараметра Из ОписанияТиповЗадействованныхПараметров Цикл 
		
		Для Каждого Тип Из ОписаниеТиповПараметра.Типы() Цикл 
			
			НайденныеМетаданные = Метаданные.НайтиПоТипу(Тип);
			
			Если НайденныеМетаданные <> Неопределено Тогда
				
				ПолноеИмяМетаданных = НайденныеМетаданные.ПолноеИмя();
				
				Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ ""%1"" КАК ПолноеИмяМетаданных, ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК ПредставлениеСсылки ИЗ %1 КАК Таблица ГДЕ Таблица.Ссылка = &Ссылка", ПолноеИмяМетаданных));
				Запрос.УстановитьПараметр("Ссылка", УКО_ОбщегоНазначения_СсылкаПоВнутреннемуUID(SQLUID, Тип));
				Результат = Запрос.Выполнить();
				
				Если Не Результат.Пустой() Тогда
					
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					
					
					Результат = Новый Структура;
					Результат.Вставить("ПолноеИмяМетаданных", Выборка.ПолноеИмяМетаданных);
					Результат.Вставить("Представление", Выборка.ПредставлениеСсылки);
					Результат.Вставить("ПолноеПредставление", СтрШаблон("[%1 (%2)]", Результат.ПолноеИмяМетаданных,  Результат.Представление));

					Возврат Результат;
					
				КонецЕсли;
	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция УКО_АнализПланаЗапроса_ОписаниеХраненияТаблицы(Имя, ХранениеБазыДанных)
	
	Результат = Неопределено;
	
	Если ХранениеБазыДанных.ТипСУБД = "Перечисление.УКО_СУБД.Файловая" Тогда
		
		Результат = ХранениеБазыДанных.Структура.Найти(ВРег(Имя), "ИмяТаблицыХранения");
		
	Иначе
		
		Результат = ХранениеБазыДанных.Структура.Найти(Имя, "ИмяТаблицыХранения");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_АнализПланаЗапроса_ИмяSQLТаблицыВ1С(Имя, ХранениеБазыДанных)
	
	ОписаниеХраненияТаблицы = УКО_АнализПланаЗапроса_ОписаниеХраненияТаблицы (Имя, ХранениеБазыДанных);
	
	Если ОписаниеХраненияТаблицы = Неопределено Тогда
		Результат = Имя;
	Иначе 
		Результат = ОписаниеХраненияТаблицы.ИмяТаблицы;
		Если ОписаниеХраненияТаблицы.Назначение <> "Основная" Тогда
			Результат = СтрШаблон("%1 (%2)", Результат, ОписаниеХраненияТаблицы.Назначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_АнализПланаЗапроса_ИмяSQLПоляТаблицыВ1С(ИмяПоля, ИмяТаблицы, ХранениеБазыДанных)
	
	ОписаниеХраненияТаблицы = УКО_АнализПланаЗапроса_ОписаниеХраненияТаблицы (ИмяТаблицы, ХранениеБазыДанных);
	
	Если ОписаниеХраненияТаблицы = Неопределено Тогда
		
		Результат = ИмяПоля;
		
	Иначе 
		
		ОписаниеХраненияПоля = ОписаниеХраненияТаблицы.Поля.Найти(ИмяПоля, "ИмяПоляХранения");
		Если ОписаниеХраненияПоля = Неопределено Тогда
			
			ОписаниеХраненияИндекс = ОписаниеХраненияТаблицы.Индексы.Найти(ИмяПоля, "ИмяИндексаХранения");
			Если ОписаниеХраненияИндекс = Неопределено Тогда
				Результат = ИмяПоля;
			Иначе 
				Результат = СтрСоединить(ОписаниеХраненияИндекс.Поля.ВыгрузитьКолонку("ИмяПоля"), ", ");
			КонецЕсли;
			
		Иначе 
			
			Если ЗначениеЗаполнено(ОписаниеХраненияПоля.ИмяПоля) Тогда
				Результат = ОписаниеХраненияПоля.ИмяПоля;
			Иначе
				Результат = ИмяПоля;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_АнализПланаЗапроса_ТипСУБД(Идентификатор) Экспорт
	
	Результат = Неопределено;
	Если Идентификатор = "DBMSSQL" Тогда
		Результат = "Перечисление.УКО_СУБД.MicrosoftSQL";
	ИначеЕсли Идентификатор = "DBPOSTGRS" Тогда
		Результат = "Перечисление.УКО_СУБД.PostgreSQL";
	ИначеЕсли Идентификатор = "DBV8DBENG" Тогда
		Результат = "Перечисление.УКО_СУБД.Файловая";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Удаляет данные из временного хранилища
//
// Параметры:
//	Данные - Строка, Массив - Адрес во временном хранилище или массив адресов
//
Процедура УКО_ВременноеХранилище_Удалить(Данные) Экспорт 
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		
		Для Каждого АдресДанных Из Данные Цикл 
			
			УКО_ВременноеХранилище_Удалить(АдресДанных);
			
		КонецЦикла;
		
	Иначе
		
		Если ЭтоАдресВременногоХранилища(Данные) Тогда
			УКО_ВременноеХранилище_УдалитьАдресИзВременногоХранилища(Данные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// Создает пустое временное хранилище
//
// Параметры:
//  АдресУникальныйИдентификатор  - Строка, УникальныйИдентификатор - Адрес, уникальный идентификатор
//
// Возвращаемое значение:
//   Строка - Адрес во временном хранилище
//
Функция УКО_ВременноеХранилище_Пустое(АдресУникальныйИдентификатор = Неопределено) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(Неопределено, АдресУникальныйИдентификатор);
	
КонецФункции
// Помещает значение во временное хранилище
//
// Параметры:
//  Значение  - Произвольный - Произвольное значение
//  Адрес  - Строка - Адрес во временном хранилище
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Строка - Адрес во временном хранилище
//
Функция УКО_ВременноеХранилище_Поместить(Значение, Адрес = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		ИсточникАдреса = Адрес;
	ИначеЕсли ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		ИсточникАдреса = УникальныйИдентификатор;
	Иначе
		ИсточникАдреса = Неопределено
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Значение, ИсточникАдреса);
	
КонецФункции

Функция УКО_ВременноеХранилище_УдалитьАдресИзВременногоХранилища(Адрес)
	
	Результат = Ложь;
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		Результат = Истина;
		УдалитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Инициализирует данные на форме
//
// Параметры:
//  Форма - УправляемаяФорма - Инициализируемая форма
//
Процедура УКО_Данные_Инициализировать(Форма) Экспорт
	
	Форма.АдресДанных = УКО_ВременноеХранилище_Поместить(Новый Соответствие, , Форма.УникальныйИдентификатор);
	
КонецПроцедуры
// Инициализирует данные внешних источников для использования
//
// Параметры:
//  Данные - Данные - Данные
//
// Возвращаемое значение:
//	Структура - данные внешних источников
//
Функция УКО_Данные_ВнешниеИсточники(Данные) Экспорт
	
	Результат = Новый Структура;
	Для Каждого ВременнаяТаблица Из Данные.ВнешниеИсточники Цикл 
		
		ОписаниеВнешнегоИсточника = ВременнаяТаблица.Значение;
		
		Если ОписаниеВнешнегоИсточника.Тип = НСтр("ru = 'Значение'; en = 'Value'") Тогда
			
			Если ЭтоАдресВременногоХранилища(ОписаниеВнешнегоИсточника.Значение) Тогда
				Значение = ПолучитьИзВременногоХранилища(ОписаниеВнешнегоИсточника.Значение);
			Иначе 
				Значение = ОписаниеВнешнегоИсточника.Значение;
			КонецЕсли;

		ИначеЕсли ОписаниеВнешнегоИсточника.Тип = НСтр("ru = 'Выражение'; en = 'Expression'") Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Внешний источник: %1'; en = 'External source: %1'"), ОписаниеВнешнегоИсточника.Имя);
			Значение = УКО_ОбщегоНазначенияВызовСервера_ВычислитьВыражениеНаВстроенномЯзыке(ОписаниеВнешнегоИсточника.Значение, Комментарий);
			
		КонецЕсли;
		
		Результат.Вставить(ОписаниеВнешнегоИсточника.Имя, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// Запускает метод модуля с ожидание или в фоне (есть требования к работе вызываемой функции
//
// Параметры:
//   ПолноеИмяМетода - Строка - Полное имя метода ИмяМодуля.ИмяПроцедуры
//   Параметры - Массив - Параметры метода
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы
//   АдресРезультатаВыполнения - Строка - Адрес временного хранилища для получения результата выполнения
//   ФоновоеВыполнение - Булево - Признак исполнения в фоне
//
// Возвращаемое значение:
//   Структура	- Результат структурой
//		* Результат - Произвольный - Результат возвращаемый вызванной функцией
//		* Идентификатор	- УникальныйИдентификатор - Идентификатор фонового задания
Функция УКО_ДлительныеОперации_Запустить(ПолноеИмяМетода, Параметры, УникальныйИдентификаторФормы = Неопределено, АдресРезультатаВыполнения = Неопределено, ФоновоеВыполнение = Истина) Экспорт 
	
	ПараметрыВыполнения = Новый Массив;
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		
		Для Каждого Параметр Из Параметры Цикл 
			ПараметрыВыполнения.Добавить(Параметр);
		КонецЦикла;
		
	КонецЕсли;
	
	Если АдресРезультатаВыполнения = Неопределено Тогда
		АдресРезультатаВыполнения = УКО_ВременноеХранилище_Пустое(УникальныйИдентификаторФормы);
	КонецЕсли;

	ПараметрыВыполнения.Добавить(АдресРезультатаВыполнения);
	
	Если ФоновоеВыполнение Тогда
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(ПолноеИмяМетода, ПараметрыВыполнения);
		Возврат Новый Структура("Идентификатор, АдресРезультатаВыполнения", ФоновоеЗадание.УникальныйИдентификатор, АдресРезультатаВыполнения);
		
	Иначе
		
		УКО_ДлительныеОперации_ЗапуститьСОжиданием(ПолноеИмяМетода, ПараметрыВыполнения);
		ОписаниеРезультата = ПолучитьИзВременногоХранилища(АдресРезультатаВыполнения);
		
		Возврат Новый Структура("Результат", ОписаниеРезультата.Результат);
		
	КонецЕсли;
	
КонецФункции
// Отменяет фоновое задание
// Параметры:
//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания
Процедура УКО_ДлительныеОперации_Отменить(Идентификатор) Экспорт
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	Если Задание = Неопределено
			ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Задание.Отменить();
		
	Исключение
		
		Комментарий = СтрШаблон(НСтр("ru = 'Ошибка отмены фонового задания: %1'; en = 'Background job cancel error: %1'",  УКО_ОбщегоНазначения_КодЯзыкаКонфигурации()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	    ЗаписьЖурналаРегистрации(УКО_ОбщегоНазначенияКлиентСервер_СобытиеЖурналаРегистрации(),,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);		
		
	КонецПопытки;
	
КонецПроцедуры
// Сообщает состояние выполнения помещая его во временное хранилище
//
// Параметры:
//  Состояние - Строка - Описание текущего текущего состояния
//  Индикатор - Число - Индикатор состояния в процентах
//  Результат - Произвольный - Результат
//
Процедура УКО_ДлительныеОперации_СообщитьПрогресс(Состояние, Индикатор = Неопределено, Результат = Неопределено) Экспорт
	
	Если ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВыполнения = Новый Структура;
	СостояниеВыполнения.Вставить("Состояние", Состояние);
	
	Если Индикатор <> Неопределено Тогда
		СостояниеВыполнения.Вставить("Индикатор", Индикатор);
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		СостояниеВыполнения.Вставить("Результат", Результат);
	КонецЕсли;
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = УКО_ДлительныеОперации_ПрефиксСообщенияПрогресса() + УКО_ОбщегоНазначения_ЗначениеВСтрокуXML(СостояниеВыполнения);
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры
// Устанавливает результат выполнения помещая его во временное хранилище
//
// Параметры:
//  АдресХранилища - Строка - Адрес временного хранилища для помещения состояния
//	Результат - Произвольный - Результат длительной операции
//
Процедура УКО_ДлительныеОперации_ВернутьРезультат(АдресХранилища, Результат) Экспорт
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		
		ДанныеОВыполнении = Новый Структура;
		ДанныеОВыполнении.Вставить("Результат", Результат);
		
		ПоместитьВоВременноеХранилище(ДанныеОВыполнении, АдресХранилища);
		
	КонецЕсли;
	
КонецПроцедуры
// Получает состояние фонового задания длительной операции
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания
//  АдресРезультатаВыполнения - Строка - Адрес во временном хранилище результата выполнения
//
// Возвращаемое значение:
//   Структура	- Результат
Функция УКО_ДлительныеОперации_ДанныеСостояния(Идентификатор, АдресРезультатаВыполнения) Экспорт
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	ОписаниеРезультатаВыполнения = Новый Структура;
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Активно";
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Завершено";
		ОписаниеРезультатаВыполнения = ПолучитьИзВременногоХранилища(АдресРезультатаВыполнения);
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Статус = "Перечисление.УКО_СтатусФоновогоЗадания.АварийноЗавершено";
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Статус = "Перечисление.УКО_СтатусФоновогоЗадания.Отменено";
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Статус", Статус);
	
	// Получаем состояние 
	ОписаниеСостояния = Неопределено;
	Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Если ЗначениеЗаполнено(Сообщения) Тогда
		
		ОписаниеСостояния = Новый Структура;
		РезультатыВыполненияСообщения = Новый Массив;
		Состояние = Неопределено; Индикатор = Неопределено; 
		Для Каждого Сообщение Из Сообщения Цикл 
			
			Если Не СтрНачинаетсяС(Сообщение.Текст, УКО_ДлительныеОперации_ПрефиксСообщенияПрогресса()) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаXML = Сред(Сообщение.Текст, СтрДлина(УКО_ДлительныеОперации_ПрефиксСообщенияПрогресса()) + 1);
			СообщениеОписаниеСостояния = УКО_ОбщегоНазначения_ЗначениеИзСтрокиXML(СтрокаXML);
			
			Если СообщениеОписаниеСостояния.Свойство("Результат") Тогда
				РезультатыВыполненияСообщения.Добавить(СообщениеОписаниеСостояния.Результат);
			КонецЕсли;
			
			Состояние = СообщениеОписаниеСостояния.Состояние;
			Если СообщениеОписаниеСостояния.Свойство("Индикатор") Тогда
				Индикатор = СообщениеОписаниеСостояния.Индикатор;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РезультатыВыполненияСообщения) Тогда
			
			Если ОписаниеРезультатаВыполнения.Свойство("Результат") Тогда
				РезультатыВыполненияСообщения.Добавить(ОписаниеРезультатаВыполнения.Результат);
			КонецЕсли;
			ОписаниеРезультатаВыполнения.Вставить("Результат", РезультатыВыполненияСообщения);
			
		КонецЕсли;
		
		ОписаниеСостояния.Вставить("Состояние", Состояние);
		Если Индикатор <> Неопределено Тогда
			ОписаниеСостояния.Вставить("Индикатор", Индикатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеРезультатаВыполнения) Тогда
		Результат.Вставить("Результат", ОписаниеРезультатаВыполнения);
	КонецЕсли;
	
	Результат.Вставить("Состояние", ОписаниеСостояния);

	Возврат Результат;
	
КонецФункции

Процедура УКО_ДлительныеОперации_ЗапуститьСОжиданием(ПолноеИмяМетода, Параметры)
	
	УКО_ОбщегоНазначения_ВыполнитьМетод(ПолноеИмяМетода, Параметры); 
	
КонецПроцедуры

Функция УКО_ДлительныеОперации_ПрефиксСообщенияПрогресса()
	
	Возврат СтрШаблон("{%1}", УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширенияСокращенный());
	
КонецФункции
// Сохраняет данные объекта в файл
//
// Параметры:
//  Объект  - Запрос, ПостроительЗапроса, ПостроительОтчета, ДинамическийСписок, МакетКомпоновкиДанных - Объект
//  Путь  - Строка - Путь
//  ИмяБезРасширения  - Строка - Имя файла без расширения (необязательный)
//
// Возвращаемое значение:
//   Строка - Информация о результате
//
Функция СохранитьВФайл(Объект, Путь, ИмяБезРасширения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Путь", Путь);
	ДополнительныеПараметры.Вставить("Имя", ИмяБезРасширения);
	
	Возврат УКО_ОтложеннаяОтладка_СохранитьДанные(Объект, "Перечисление.УКО_ЭлементыДанных.Запрос", "Перечисление.УКО_ТипыХраненияДанных.Файл", ДополнительныеПараметры);
	
КонецФункции
// Сохраняет данные объекта в настройки
//
// Параметры:
//  Объект  - Запрос, ПостроительЗапроса, ПостроительОтчета, ДинамическийСписок, МакетКомпоновкиДанных - Объект
//  ИмяНастройки  - Строка - Имя настройки (необязательный)
//
// Возвращаемое значение:
//   Строка - Информация о результате
//
Функция СохранитьВНастройки(Объект, ИмяНастройки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Имя", ИмяНастройки);
	
	Возврат УКО_ОтложеннаяОтладка_СохранитьДанные(Объект, "Перечисление.УКО_ЭлементыДанных.Запрос", "Перечисление.УКО_ТипыХраненияДанных.Настройка", ДополнительныеПараметры);
	
КонецФункции
// Выполняет запрос, возвращает результат
//
// Параметры:
//	Данные - Данные - Данные
//	Режим - РежимВыполненияЗапроса - Режим выполнения
//	ИгнорироватьЛимитСтрок - Булево - Игнорировать лимит строк
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	* АдресРезультата - Строка - Адрес временного хранилища результата
//	* АдресДанныхРасшифровки - Строка - Адрес временного хранилища расшифровки
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
// Возвращаемое значение:
//	Структура - информация о выполнении
//
Функция УКО_Запрос_ПолучитьРезультат(Данные, Режим, ИгнорироватьЛимитСтрок = Ложь, ДополнительныеПараметры = Неопределено, АдресРезультатаВыполнения = Неопределено) Экспорт
	
	// Инициализация дополнительных параметров
	АдресРезультата = Неопределено;
	АдресДанныхРасшифровки = Неопределено;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		АдресРезультата = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "АдресРезультата");
		АдресДанныхРасшифровки = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "АдресДанныхРасшифровки");
		
	КонецЕсли;
	
	ВыводРезультата = УКО_ОбщегоНазначенияКлиентСервер_ЭтоРежимВыполненияСРезультатом(Режим);
	Если ВыводРезультата Тогда
		КоличествоШагов = 2;
	Иначе
		КоличествоШагов = 1;
	КонецЕсли;
	Шаг = 1; 
	
	УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса(НСтр("ru = 'Выполнение запроса'; en = 'Query execution'"), Шаг, КоличествоШагов));
	
	АнализируетсяПланЗапроса = (Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение") И УКО_НастройкиПользователя_Значение("АнализироватьПланЗапроса");
	РезультатыВыполнения = УКО_Запрос_ВыполнитьЗапрос(Данные, Режим, АнализируетсяПланЗапроса);
	
	ДанныеРасшифровки = Новый Соответствие;
	
	Результат = Новый Структура;
	Результат.Вставить("РежимВыполнения", Режим);
	
	Если АнализируетсяПланЗапроса Тогда 
		
		Результат.Вставить("UID", РезультатыВыполнения.UID);
		Результат.Вставить("IDПроцесса", РезультатыВыполнения.IDПроцесса);
		Результат.Вставить("НачалоВыполнения", РезультатыВыполнения.НачалоВыполнения);
		
		ОписанияТиповПараметров = Новый Массив;
		Для Каждого Параметр Из Данные.Параметры Цикл 
			ОписанияТиповПараметров.Добавить(Параметр.Значение);
		КонецЦикла;
		Результат.Вставить("ОписанияТиповПараметров", ОписанияТиповПараметров);
		
	КонецЕсли;

	Если РезультатыВыполнения.ОшибкаПриВыполнении = Неопределено И (Режим <> "Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц") Тогда
		Результат.Вставить("ВремяВыполнения", РезультатыВыполнения.ВремяВыполнения);
	КонецЕсли;

	Результат.Вставить("ОшибкаПриВыполнении", РезультатыВыполнения.ОшибкаПриВыполнении);
	
	Если ВыводРезультата Тогда
		
		УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса (НСтр("ru = 'Вывод результата, расчет ширины колонок'; en = 'The output result, the calculation of width of columns'"), Шаг, КоличествоШагов));
		
		Если ИгнорироватьЛимитСтрок Тогда
			МаксимумСтрок = 0;
		ИначеЕсли Данные.МаксимумСтрок = Неопределено Тогда
			МаксимумСтрок = УКО_НастройкиПользователя_Значение("МаксимальноеКоличествоВыводимыхСтрок");
		Иначе 
			МаксимумСтрок = Данные.МаксимумСтрок;
		КонецЕсли;
		МетодРасшифровкиТаблицЗначений = УКО_НастройкиПользователя_Значение("РасшифровкаТаблицЗначений");
		ВыделятьОсобыеЗначенияВРезультате = УКО_НастройкиПользователя_Значение("ВыделятьОсобыеЗначенияВРезультате");
		
		ИндексРезультата = 0; ВсеСтрокиВыведены = Истина;
		ТабличныйДокументРезультат = Новый ТабличныйДокумент;
		Для Каждого РезультатВыполнения Из РезультатыВыполнения.ПакетРезультатов Цикл 
			
			Если РезультатВыполнения <> Неопределено Тогда
				
				// Подготовка областей вывода
				Области = УКО_Запрос_ПодготовитьОбластиВыводаРезультата(РезультатВыполнения.Колонки, ВыделятьОсобыеЗначенияВРезультате);
				
				// Подготовка - вывод строк результата --------------------------------------------------------------
				СтрокиЗапроса = Новый ТабличныйДокумент;
				СтрокиЗапроса.НачатьАвтогруппировкуСтрок();
				
				НомерСтроки = 0;
				РезультатВыводаСтрокПакета = УКО_Запрос_ВывестиСтрокиВыборкиСИерархией(РезультатВыполнения, СтрокиЗапроса, 0, Области, РезультатыВыполнения.ИменаКолонокИтогов[ИндексРезультата], НомерСтроки, МаксимумСтрок);
				ВсеСтрокиПакетаВыведены = РезультатВыводаСтрокПакета.ВыведеныВсе;
				
				Если ВсеСтрокиПакетаВыведены Тогда
					ВыведеноСтрок = НомерСтроки;
					КоличествоСтрок = ВыведеноСтрок;
				Иначе 
					ВыведеноСтрок = МаксимумСтрок;
					КоличествоСтрок = РезультатВыводаСтрокПакета.КоличествоСтрок;
					ВсеСтрокиВыведены = Ложь;
				КонецЕсли;
				
				СтрокиЗапроса.ЗакончитьАвтогруппировкуСтрок();
				
				// Собираем результат одного запроса ----------------------------------------------------------------
				ТабличныйДокументРезультатаЗапроса = Новый ТабличныйДокумент;
				ТабличныйДокументРезультатаЗапроса.НачатьАвтогруппировкуСтрок();
				
				// Вывод заголовка запроса
				ОписаниеТаблицы = РезультатыВыполнения.ОписаниеТаблиц[ИндексРезультата];
				Если ЗначениеЗаполнено(ОписаниеТаблицы.ТаблицаДляПомещения) Тогда
					
					ОписаниеВыводВременнойТаблицы = УКО_ДанныеКлиентСервер_ПолучитьОписаниеВыводаВременнойТаблицы(Данные, ОписаниеТаблицы.ТаблицаДляПомещения);

					ВывестиТаблицу = (ОписаниеВыводВременнойТаблицы.Вывод <> НСтр("ru = 'Не выводить'; en = 'Do not output'"));
					ВывестиОткрыто = (ОписаниеВыводВременнойТаблицы.Вывод <> НСтр("ru = 'Свернуто'; en = 'Minimized'"));
					
				Иначе
					
					ВывестиТаблицу = Истина;
					ВывестиОткрыто = Истина;
					
				КонецЕсли;
				
				ОбластьЗаголовокЗапроса = Области.ЗаголовокЗапроса;
				ОбластьЗаголовокЗапроса.Параметры.Заголовок = ОписаниеТаблицы.Заголовок;
				ОбластьЗаголовокЗапроса.Параметры.Пояснение = УКО_Запрос_ПояснениеЗаголовкаЗапросаВРезультате(ВыведеноСтрок, КоличествоСтрок);
				
				ТабличныйДокументРезультатаЗапроса.Вывести(ОбластьЗаголовокЗапроса, 0,, ВывестиОткрыто);
				
				Если ВывестиТаблицу Тогда
					
					// Вывод шапки таблицы
					ТабличныйДокументРезультатаЗапроса.Вывести(Области.ШапкаТаблицы, 1);
					
					УКО_Запрос_ЗаполнениеРасшифровокДляТаблицЗначений(СтрокиЗапроса, РезультатВыполнения.Колонки, ДанныеРасшифровки, МетодРасшифровкиТаблицЗначений);
					
					// Вывод строк таблицы
					Если ВыделятьОсобыеЗначенияВРезультате Тогда
						УКО_Запрос_ДополнительнаяОбработкаСтрок(СтрокиЗапроса, РезультатВыполнения.Колонки);
					КонецЕсли;
					ТабличныйДокументРезультатаЗапроса.Вывести(СтрокиЗапроса, 1);
					
					ТабличныйДокументРезультатаЗапроса.ЗакончитьАвтогруппировкуСтрок();
					
					ШиринаКолонок = Новый Массив;
					АлгоритмОпределенияОптимальнойШириныКолонок = 1;
					ШиринаНаКартинку = 2;
					
					Если АлгоритмОпределенияОптимальнойШириныКолонок = 0 Тогда //Ширина по Наименованию колонки (простой и быстрый алгоритм)
						
						Для Каждого Колонка Из РезультатВыполнения.Колонки Цикл 
							ШиринаКолонок.Добавить(Макс(СтрДлина(Колонка.Имя) + 1 + ШиринаНаКартинку, Колонка.Ширина));
						КонецЦикла;
						
					ИначеЕсли АлгоритмОпределенияОптимальнойШириныКолонок = 1 Тогда //Ширина по содержимому, анализируем первые 10 строк (более сложный алгоритм)
						
						Для Каждого Колонка Из РезультатВыполнения.Колонки Цикл 
							ШиринаКолонок.Добавить(СтрДлина(Колонка.Имя) + 1 + ШиринаНаКартинку);
						КонецЦикла;
						
						КоличествоАнализируемыхСтрок = Мин(СтрокиЗапроса.ВысотаТаблицы, 20);
						НомерКолонки = 1;
						Для НомерКолонки = 1 По ШиринаКолонок.Количество() Цикл  
							
							Для НомерСтроки = 1 По КоличествоАнализируемыхСтрок Цикл 
								
								ОбластьСтрока = СтрокиЗапроса.Область(НомерСтроки, НомерКолонки);
								ДлинаТекстаПоля = СтрДлина(СокрЛП(ОбластьСтрока.Текст)) + 1;
								
								ШиринаКолонок[НомерКолонки - 1] = Макс(ДлинаТекстаПоля * УКО_Запрос_КоэффициентШириныКолонок(ДлинаТекстаПоля, ОбластьСтрока.Шрифт.Жирный), ШиринаКолонок[НомерКолонки - 1]);
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
					МаксимальнаяШирина = 100;
					НомерКолонки = 1;
					Для НомерКолонки = 1 По ШиринаКолонок.Количество() Цикл
						ШиринаКолонки = ШиринаКолонок[НомерКолонки - 1];
						ШиринаКолонок[НомерКолонки - 1] = Мин(ШиринаКолонки, МаксимальнаяШирина);
					КонецЦикла;
					
					УКО_Запрос_УстановитьШиринуКолонок(ТабличныйДокументРезультат, РезультатВыполнения.Колонки, ШиринаКолонок);
					
				КонецЕсли;
				
				// Вывод результата запроса со своим форматом строк
				ТабличныйДокументРезультат.Вывести(ТабличныйДокументРезультатаЗапроса).СоздатьФорматСтрок();
				
			КонецЕсли;
			
			ИндексРезультата = ИндексРезультата + 1;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
			
			Результат.Вставить("АдресРезультата", ПоместитьВоВременноеХранилище(ТабличныйДокументРезультат, АдресРезультата));
			Результат.Вставить("АдресДанныхРасшифровки", ПоместитьВоВременноеХранилище(ДанныеРасшифровки, АдресДанныхРасшифровки));
			
			// Заполним количество элементов в результате (для пакета - количество запросов с результатом, для одного запроса - количество строк
			Если РезультатыВыполнения.КоличествоЗапросовСРезультатом = 1 Тогда
				КоличествоВРезультате = СтрШаблон(НСтр("ru = 'Таблица, %1'; en = 'Table, %1'"), УКО_Запрос_ПояснениеЗаголовкаЗапросаВРезультате(ВыведеноСтрок, КоличествоСтрок));
			Иначе
				КоличествоВРезультате = СтрокаСЧислом(НСтр("ru = '%1 таблиц; %1 таблица; %1 таблицы; %1 таблицы; %1 таблиц; %1 таблиц';
														   |en = '%1 tables; %1 table; %1 tables; %1 tables; %1 tables'"),
															РезультатыВыполнения.КоличествоЗапросовСРезультатом, ВидЧисловогоЗначения.Количественное);
			КонецЕсли;
			Результат.Вставить("Количество", КоличествоВРезультате);
			
			Результат.Вставить("ВсеСтрокиВыведены", ВсеСтрокиВыведены);
			Результат.Вставить("КоличествоЗапросовСРезультатом", РезультатыВыполнения.КоличествоЗапросовСРезультатом);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияЗапроса.ПолучениеРезультатаДляОбработки" Тогда
		
		Результат.Вставить("АдресРезультата", ПоместитьВоВременноеХранилище(УКО_Запрос_ПодготовитьПакетРезультатовДляОбработки(РезультатыВыполнения.ПакетРезультатов), АдресРезультата));
		
	КонецЕсли;

	УКО_ДлительныеОперации_ВернутьРезультат(АдресРезультатаВыполнения, Результат);
	
	Возврат ТабличныйДокументРезультат;
	
КонецФункции
// Возвращает значения параметров
// Параметры:
//  Данные  - Данные - Данные
//  ВычислитьЗначения  - Булево - Вычислить значения
//
// Возвращаемое значение:
//   Структура - Значения параметров запроса
//
Функция УКО_Запрос_ЗначенияПараметров(Данные, ВычислитьЗначения = Истина) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	Для Каждого Параметр Из Данные.Параметры Цикл
		
		ИмяПараметра = Параметр.Ключ;
		ЗначениеПараметра = Данные.ЗначенияПараметров.Получить(ИмяПараметра);
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
			
			Если ВычислитьЗначения Тогда 
				
				Если ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
					
					Комментарий = СтрШаблон(НСтр("ru = 'Параметр: %1'; en = 'Parameter: %1'"), ИмяПараметра);
					ЗначениеПараметра = УКО_ОбщегоНазначенияВызовСервера_ВычислитьВыражениеНаВстроенномЯзыке(ЗначениеПараметра.Значение, Комментарий);
					
				ИначеЕсли ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
					
					Если ЭтоАдресВременногоХранилища(ЗначениеПараметра.Значение) Тогда
						ЗначениеПараметра = ПолучитьИзВременногоХранилища(ЗначениеПараметра.Значение);
					Иначе 
						ЗначениеПараметра = ЗначениеПараметра.Значение;
					КонецЕсли;
					
				ИначеЕсли ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
					
					ОписаниеГраницы = ЗначениеПараметра.Значение;
					ЗначениеПараметра = УКО_Запрос_ГраницаИзОписания(ОписаниеГраницы);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Параметр.Значение = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда	
			
			ЗначениеПараметра  = Новый ТаблицаЗначений;
			
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			
		Иначе
			ЗначениеПараметра = Параметр.Значение.ПривестиЗначение(ЗначениеПараметра);
		КонецЕсли;
		
		ЗначенияПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции
// Получает количество запросов в пакете
//
// Параметры:
//  Запрос  - Строка, СхемаЗапроса - Текст запроса или схема запроса
//  УчитыватьВременныеТаблицы  - Булево - Учитывать временные таблицы
//  УчитыватьЗапросы  - Булево - Учитывать запросы
//
// Возвращаемое значение:
//   Число - Количество запросов с результатом
//
Функция УКО_Запрос_КоличествоЗапросовВПакете(Запрос, УчитыватьВременныеТаблицы = Истина, УчитыватьЗапросы = Истина) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос);
	ИначеЕсли ТипЗнч(Запрос) = Тип("СхемаЗапроса") Тогда
		СхемаЗапроса = Запрос;
	КонецЕсли;

	Количество = 0;
	
	Для Каждого СхемаЗапросаПакет Из СхемаЗапроса.ПакетЗапросов Цикл 
		
		Если ТипЗнч(СхемаЗапросаПакет) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			Если ЗначениеЗаполнено(СхемаЗапросаПакет.ТаблицаДляПомещения) Тогда
				
				Если УчитыватьВременныеТаблицы  Тогда
					Количество = Количество + 1;
				КонецЕсли;
				
			Иначе
				
				Если УчитыватьЗапросы  Тогда
					Количество = Количество + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции
// Проверяет текст запроса извлекает параметры
//
// Параметры:
//	Текст - Строка - Текст запроса
//
// Возвращаемое значение:
//	Структура - информация о проверке
//		*ТекстОшибки - Строка - Текст ошибки
//		*Параметры - ОписаниеПараметровЗапроса - Описание параметров запроса
//
Функция УКО_Запрос_ПроверитьТекст(Текст) Экспорт 
	
	Параметры = Новый Соответствие;
	ВременныеТаблицы = Новый Соответствие;
	
	ТекстОшибки = "";
	Попытка
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		
		// Получение параметров
		Запрос = Новый Запрос(Текст);
		ПараметрыВТекстеЗапроса = Запрос.НайтиПараметры();
		Для Каждого ПараметрВТексте Из ПараметрыВТекстеЗапроса Цикл 
			
			Если УКО_ОбщегоНазначенияКлиентСервер_СодержитТипТаблицаЗначений(ПараметрВТексте.ТипЗначения) Тогда
				ТипЗначения = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений";
			Иначе 
				ТипЗначения = ПараметрВТексте.ТипЗначения;
			КонецЕсли;
			
			Параметры.Вставить(ПараметрВТексте.Имя, ТипЗначения);
			
		КонецЦикла;
		
		// Получение данных временных таблиц
		Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл 
			
			Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
				
			ИмяВременнойТаблицы = ЗапросПакета.ТаблицаДляПомещения;
			Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
				
				ОписаниеВременнойТаблицы = Новый Структура;
				ВременныеТаблицы.Вставить(ИмяВременнойТаблицы, ОписаниеВременнойТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Новый Структура("ТекстОшибки, Параметры, ВременныеТаблицы", ТекстОшибки, Параметры, ВременныеТаблицы);
	
КонецФункции
// Возвращает границу по описанию границы
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы
//
// Возвращаемое значение:
//   Граница - Граница
//
Функция УКО_Запрос_ГраницаИзОписания(ОписаниеГраницы) Экспорт
	
	Если ОписаниеГраницы.Вид = "Перечисление.УКО_ВидГраницы.Включая" Тогда
		Вид = ВидГраницы.Включая;
	Иначе
		Вид = ВидГраницы.Исключая;
	КонецЕсли;
	
	Возврат Новый Граница(ОписаниеГраницы.Значение, Вид);
	
КонецФункции
// Возвращает описание границы
//
// Параметры:
//  Граница  - Граница - Граница
//
// Возвращаемое значение:
//   Структура - Описание границы
//
Функция УКО_Запрос_ОписаниеИзГраницы(Граница) Экспорт 
	
	Если Граница.ВидГраницы = ВидГраницы.Включая Тогда
		Вид = "Перечисление.УКО_ВидГраницы.Включая";
	Иначе
		Вид = "Перечисление.УКО_ВидГраницы.Исключая";
	КонецЕсли;
	
	Возврат УКО_ЗапросКлиентСервер_ОписаниеГраницы(Граница.Значение, Вид);
	
КонецФункции
// Получает дату из описания границы (значение сложного параметра)
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы (значение сложного параметра)
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция УКО_Запрос_ДатаИзОписанияГраницы(ОписаниеГраницы) Экспорт
	
	Результат = Неопределено;
	ГраницаЗначение = ОписаниеГраницы.Значение;
	
	Если ТипЗнч(ГраницаЗначение) = Тип("Дата") Тогда
		Результат = ГраницаЗначение;
	ИначеЕсли ТипЗнч(ГраницаЗначение) = Тип("МоментВремени") Тогда
		Результат = ГраницаЗначение.Дата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает момент времени из описания границы (значение сложного параметра)
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы (значение сложного параметра)
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция УКО_Запрос_МоментВремениИзОписанияГраницы(ОписаниеГраницы) Экспорт
	
	Результат = Неопределено;
	ГраницаЗначение = ОписаниеГраницы.Значение;
	
	Если ТипЗнч(ГраницаЗначение) = Тип("Дата") Тогда
		Результат = Новый МоментВремени(ГраницаЗначение);
	ИначеЕсли ТипЗнч(ГраницаЗначение) = Тип("МоментВремени") Тогда
		Результат = ГраницаЗначение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Собирает временные таблицы в структуру для удобства просмотра
//
// Параметры:
//  Объект  - Запрос - Объект
//  ВключатьПустые  - Булево - Включать пустые
//
// Возвращаемое значение:
//   Структура - Данные временных таблиц
//
Функция УКО_Запрос_ТаблицыМенеджера(Объект, ВключатьПустые = Истина) Экспорт
	
	Результат = Новый Структура;
	
	МенеджерВременныхТаблиц = Объект.МенеджерВременныхТаблиц;
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл 
			
			ТаблицаЗначений = ВременнаяТаблица.ПолучитьДанные().Выгрузить();
			КоличествоСтрок = ТаблицаЗначений.Количество();
			
			Если ВключатьПустые ИЛИ КоличествоСтрок > 0 Тогда
				
				Результат.Вставить(СтрШаблон("%1_%2", ВременнаяТаблица.ПолноеИмя, УКО_СтрокиКлиентСервер_ЧислоВСтроку(КоличествоСтрок)), ТаблицаЗначений);
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Запрос_ВыполнитьЗапрос(Данные, Режим, АнализируетсяПланЗапроса)
	
	ВыводРезультата = УКО_ОбщегоНазначенияКлиентСервер_ЭтоРежимВыполненияСРезультатом(Режим);
	
	Запрос = Новый Запрос;
	
	Если АнализируетсяПланЗапроса Тогда
		
		UID = Новый УникальныйИдентификатор;
		ИдентификаторUID = СтрЗаменить(UID, "-", "_");
		
		ТекстЗапроса = СтрШаблон("ВЫБРАТЬ ""%1_begin"" КАК Метка ПОМЕСТИТЬ Marker_%3_begin;
		|%2
		|; ВЫБРАТЬ ""%1_end"" КАК Метка ПОМЕСТИТЬ Marker_%3_end", UID, Данные.Текст, ИдентификаторUID);
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		IDПроцесса = УКО_АнализПланаЗапроса_ИдентификаторПроцессаОС();

	Иначе
		ТекстЗапроса = Данные.Текст;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УКО_Запрос_ЗагрузкаДанныхВременныхТаблиц(Данные, МенеджерВременныхТаблиц);
	
	// Установка значений параметров
	Для Каждого ЗначениеПараметра Из УКО_Запрос_ЗначенияПараметров(Данные) Цикл 
		Запрос.УстановитьПараметр(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);
	КонецЦикла;
	
	// Дополнительно собираем временные таблицы вложенных запросов
	Если Данные.Свойство("ТекстИнициализации")
			И ЗначениеЗаполнено(Данные.ТекстИнициализации) Тогда
			
		Запрос.Текст = Данные.ТекстИнициализации;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ВыводРезультата Тогда 
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
	КонецЕсли;
	
	Если Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение" И (УКО_Запрос_КоличествоЗапросовВПакете(СхемаЗапроса, Ложь) = 0) Тогда
		// Если в запросе нет результатов (обычно это помещение во временную таблицу) отобразим с результатами временных таблиц
		Режим = "Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц";
	КонецЕсли;
	
	СРезультатамиВременныхТаблиц = (Режим = "Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц");
	
	// Начало замера времени выполнения запроса --------------------------------------------------------------------------------- {
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НачалоВыполнения = ТекущаяДата();
	
	ТекстОшибкиПриВыполнении = "";
	Попытка 
		
		// Выполнение пакета запросов
		Если СРезультатамиВременныхТаблиц Тогда
			ПакетСПромежуточнымиДанными = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		Иначе 
			ПакетСПромежуточнымиДанными = Запрос.ВыполнитьПакет();
		КонецЕсли;
		
		Если АнализируетсяПланЗапроса Тогда // Удалим результаты маркировочных запросов первый и последний
			ПакетСПромежуточнымиДанными.Удалить(0);
			ПакетСПромежуточнымиДанными.Удалить(ПакетСПромежуточнымиДанными.ВГраница());
		КонецЕсли;
		
	Исключение
		
		// Ошибка при выполнении
		ТекстОшибкиПриВыполнении = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	// Конец замера { -----------------------------------------------------------------------------------------------------------
	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	Результат = Новый Структура;
	Если АнализируетсяПланЗапроса Тогда
		Результат.Вставить("UID", UID);
		Результат.Вставить("IDПроцесса", IDПроцесса);
		Результат.Вставить("НачалоВыполнения", НачалоВыполнения);
	КонецЕсли;
	
	ОшибкаПриВыполнении = УКО_ЗапросКлиентСервер_ИнформацияООшибке(ТекстОшибкиПриВыполнении, АнализируетсяПланЗапроса);
	Результат.Вставить("ОшибкаПриВыполнении", ОшибкаПриВыполнении);
	
	Если ОшибкаПриВыполнении <> Неопределено Тогда
		ВремяВыполнения = Неопределено;
	КонецЕсли;
	Результат.Вставить("ВремяВыполнения", ВремяВыполнения);
	
	КоличествоЗапросовСРезультатом = 0;
	ПакетРезультатов = Новый Массив;
	
	Если ОшибкаПриВыполнении = Неопределено Тогда
		
		Если ВыводРезультата Тогда
			
			ОбратныйПорядокРезультатов = УКО_НастройкиПользователя_Значение("ОбратныйПорядокРезультатовПакетногоЗапроса");
			ОписаниеТаблиц = Новый Массив; ИтогиИменаКолонок = Новый Массив;
			
			ИндексРезультата = 0;
			Для Каждого СхемаЗапросаПакета Из СхемаЗапроса.ПакетЗапросов Цикл 
				
				Если ТипЗнч(СхемаЗапросаПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
					
					ТаблицаДляПомещения = СхемаЗапросаПакета.ТаблицаДляПомещения;
					
					Если АнализируетсяПланЗапроса И СтрНайти(ТаблицаДляПомещения, ИдентификаторUID) Тогда // Пропускаем временные таблицы маркеры начала, окончания для ТЖ
						Продолжить;
					КонецЕсли;
				
					КонтрольныеТочкиИтогов = Новый Массив;
					Для Каждого КонтрольнаяТочкиИтогов Из СхемаЗапросаПакета.КонтрольныеТочкиИтогов Цикл 
						КонтрольныеТочкиИтогов.Добавить(КонтрольнаяТочкиИтогов.ИмяКолонки);
					КонецЦикла;
					ИтогиИменаКолонок.Добавить(КонтрольныеТочкиИтогов);
					
					ЗапросСРезультатом = ПустаяСтрока(ТаблицаДляПомещения) ИЛИ (СРезультатамиВременныхТаблиц И ЗначениеЗаполнено(ТаблицаДляПомещения));
					
					Если ЗапросСРезультатом Тогда 
						
						КоличествоЗапросовСРезультатом = КоличествоЗапросовСРезультатом + 1;
						
						ОписаниеТаблицы = Новый Структура("Заголовок, ТаблицаДляПомещения", УКО_Запрос_ЗаголовокЗапроса(ИндексРезультата + 1, ТаблицаДляПомещения), ТаблицаДляПомещения);
						Если ОбратныйПорядокРезультатов Тогда
							ОписаниеТаблиц.Вставить(0, ОписаниеТаблицы);
							ПакетРезультатов.Вставить(0, ПакетСПромежуточнымиДанными[ИндексРезультата]);
						Иначе
							ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
							ПакетРезультатов.Добавить(ПакетСПромежуточнымиДанными[ИндексРезультата]);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИндексРезультата = ИндексРезультата + 1;
				
			КонецЦикла;
			
			Результат.Вставить("ИменаКолонокИтогов", ИтогиИменаКолонок);
			Результат.Вставить("ОписаниеТаблиц", ОписаниеТаблиц);
			
		ИначеЕсли Режим = "Перечисление.УКО_РежимВыполненияЗапроса.ПолучениеРезультатаДляОбработки" Тогда
			
			ПакетРезультатов = ПакетСПромежуточнымиДанными;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Результат.Вставить("ПакетРезультатов", ПакетРезультатов);
	Результат.Вставить("КоличествоЗапросовСРезультатом", КоличествоЗапросовСРезультатом);
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Запрос_ПодготовитьОбластиВыводаРезультата(Колонки, ВыделятьОсобыеЗначения)
	
	МакетРезультата = ПолучитьМакет("УКО_РезультатЗапроса");
	ОбластьШапкаЗапроса = МакетРезультата.ПолучитьОбласть(1, 1); // ШапкаЗапроса
	ОбластьШапкаПоля = МакетРезультата.ПолучитьОбласть(2, 1); // ШапкаПоля
	ОбластьЗначениеПоля1 = МакетРезультата.ПолучитьОбласть(3, 1); //ЗначениеПоля1
	ОбластьЗначениеПоля2 = МакетРезультата.ПолучитьОбласть(4, 1); //ЗначениеПоля2
	
	ШапкаТаблицы = Новый ТабличныйДокумент;
	СтрокаЗапроса1 = Новый ТабличныйДокумент;
	СтрокаЗапроса2 = Новый ТабличныйДокумент;
	Для Каждого Колонка Из Колонки Цикл 
		
		ОбластьШапкаПоля.Параметры.ИмяПоля = Колонка.Имя;
		ОблШапкаПоля = ШапкаТаблицы.Присоединить(ОбластьШапкаПоля, 1);
		ОблШапкаПоля.Примечание.Текст = УКО_ОбщегоНазначения_ПодсказкаОписанияТипа(Колонка.Имя, Колонка.ТипЗначения);
		ОблШапкаПоля.Картинка = УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(Колонка.ТипЗначения);
		
		ОблЗначениеПоля1 = СтрокаЗапроса1.Присоединить(ОбластьЗначениеПоля1);
		ОблЗначениеПоля2 = СтрокаЗапроса2.Присоединить(ОбластьЗначениеПоля2);
		
		УКО_Запрос_ЗаполнениеОбластиЗначения(ОблЗначениеПоля1, Колонка, ВыделятьОсобыеЗначения);
		УКО_Запрос_ЗаполнениеОбластиЗначения(ОблЗначениеПоля2, Колонка, ВыделятьОсобыеЗначения);
		
	КонецЦикла;
	
	Области = Новый Структура;
	Области.Вставить("ЗаголовокЗапроса", ОбластьШапкаЗапроса);
	Области.Вставить("ШапкаТаблицы", ШапкаТаблицы);
	Области.Вставить("Строка1", СтрокаЗапроса1);
	
	Если УКО_НастройкиПользователя_Значение("ЧередованиеЦветовСтрокВРезультате") Тогда
		СтрокаЧередованияСтрок = СтрокаЗапроса2;
	Иначе 
		СтрокаЧередованияСтрок = СтрокаЗапроса1;
	КонецЕсли;
	Области.Вставить("Строка2", СтрокаЧередованияСтрок);
	
	Возврат Области;
	
КонецФункции

Функция УКО_Запрос_ВывестиСтрокиВыборкиСИерархией(Выборка, ДокументВывода, УровеньВыборки, Области, ИменаКолонокИтогов, НомерСтроки, МаксимумСтрок)
	
	ВыведеныВсе = Истина;
	Если ИменаКолонокИтогов.Количество() = 0 ИЛИ ИменаКолонокИтогов.Количество() >= УровеньВыборки Тогда
		ВыборкаСтроки = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
		КоличествоСтрок = ВыборкаСтроки.Количество();
	Иначе 
		ВыборкаСтроки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ИменаКолонокИтогов[УровеньВыборки]);
	КонецЕсли;
	
	Пока ВыборкаСтроки.Следующий() Цикл 
		
		Если ЗначениеЗаполнено(МаксимумСтрок) И НомерСтроки = МаксимумСтрок Тогда
			ВыведеныВсе = Ложь;
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки % 2 Тогда
			ОбластьСтрокаЗапроса = Области.Строка2;
		Иначе
			ОбластьСтрокаЗапроса = Области.Строка1;
		КонецЕсли;
		ОбластьСтрокаЗапроса.Параметры.Заполнить(ВыборкаСтроки);
		ДокументВывода.Вывести(ОбластьСтрокаЗапроса, ВыборкаСтроки.Уровень() + 2);
		
		УКО_Запрос_ВывестиСтрокиВыборкиСИерархией(ВыборкаСтроки, ДокументВывода, УровеньВыборки + 1, Области, ИменаКолонокИтогов, НомерСтроки, МаксимумСтрок);
		
	КонецЦикла;
	
	Возврат Новый Структура("ВыведеныВсе, КоличествоСтрок", ВыведеныВсе, КоличествоСтрок);
	
КонецФункции

Функция УКО_Запрос_ПояснениеЗаголовкаЗапросаВРезультате(ВыведеноСтрок, КоличествоСтрок, ВсеСтрокиВыведены = Истина)
	
	ВсеСтрокиВыведены = (КоличествоСтрок = ВыведеноСтрок);
	
	Если ВсеСтрокиВыведены Тогда
		Результат = УКО_СтрокиКлиентСервер_ТекстНекотороеКоличествоСтрок(КоличествоСтрок);
	Иначе
		Результат = СтрШаблон(НСтр("ru = '%1 из %2, не все выведены'; en = '%1 from %2, not all rows outputed'"), ВыведеноСтрок, КоличествоСтрок);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Процедура УКО_Запрос_ЗаполнениеРасшифровокДляТаблицЗначений(СтрокиЗапроса, Колонки, ДанныеРасшифровки, МетодРасшифровкиТаблицЗначений)
	
	КоличествоКолонок = Колонки.Количество();
	Для НомерКолонки = 1 По КоличествоКолонок Цикл 
		
		Колонка = Колонки[НомерКолонки - 1];
		Если Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда
			
			Для НомерСтроки = 1 По СтрокиЗапроса.ВысотаТаблицы Цикл 

				ОбластьСтрока = СтрокиЗапроса.Область(НомерСтроки, НомерКолонки);
				ЗначениеРасшифровки = ОбластьСтрока.Расшифровка;
				
				Если ТипЗнч(ЗначениеРасшифровки) = Тип("РезультатЗапроса") Тогда
					
					Гиперссылка = Ложь; 
					Если МетодРасшифровкиТаблицЗначений = "Перечисление.УКО_РасшифровкаТаблицЗначений.Отключена" Тогда
						
						Текст = НСтр("ru = '<Таблица значений>'; en = '<Value table>'");
						Расшифровывать = Ложь;
						
					Иначе
						
						Расшифровывать = Истина;
						
						Если МетодРасшифровкиТаблицЗначений = "Перечисление.УКО_РасшифровкаТаблицЗначений.Упрощенная" Тогда
							
							Если ЗначениеРасшифровки.Пустой() Тогда
								КоличествоСтрок = 0;
							Иначе
								КоличествоСтрок = "?";
							КонецЕсли;
							
						ИначеЕсли МетодРасшифровкиТаблицЗначений = "Перечисление.УКО_РасшифровкаТаблицЗначений.Полная" Тогда
							
							ТаблицаЗначений = ЗначениеРасшифровки.Выгрузить();
							КоличествоСтрок = ТаблицаЗначений.Количество();
							
						КонецЕсли;
						
						Если КоличествоСтрок = 0 Тогда
							Текст = НСтр("ru = '<Пустая таблица значений>'; en = '<Empty value table>'");
						Иначе
							Гиперссылка = Истина;
							Текст = СтрШаблон(НСтр("ru = 'Таблица значений (%1)'; en = 'Value table (%1)'"), КоличествоСтрок);
						КонецЕсли;
						
					КонецЕсли;
					
					ОбластьСтрока.Текст = Текст;
					Если Гиперссылка Тогда
						ОбластьСтрока.Гиперссылка = Истина;
						ОбластьСтрока.Шрифт = УКО_ОбщегоНазначенияКлиентСервер_ШрифтОсобыхЗначенийРезультатаГиперссылка();
						ОбластьСтрока.ЦветТекста = УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаГиперссылки();
					Иначе
						ОбластьСтрока.Шрифт = УКО_ОбщегоНазначенияКлиентСервер_ШрифтОсобыхЗначенийРезультата();
					КонецЕсли;
					
					Если Расшифровывать Тогда
						UIDРасшифровки = Новый УникальныйИдентификатор;
						ОбластьСтрока.Расшифровка = Новый Структура("Значение", UIDРасшифровки);
						ДанныеРасшифровки.Вставить(UIDРасшифровки, ЗначениеРасшифровки);
					Иначе
						ОбластьСтрока.Расшифровка = Неопределено;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_Запрос_ДополнительнаяОбработкаСтрок(СтрокиЗапроса, Колонки)
	
	// Выделение NULL, Неопределено, ПустаяСтрока, ПустаяДата и т.д.)
	КоличествоКолонок = Колонки.Количество(); КоличествоСтрок = СтрокиЗапроса.ВысотаТаблицы;
	ШрифтОсобыхЗначенийРезультата = УКО_ОбщегоНазначенияКлиентСервер_ШрифтОсобыхЗначенийРезультата();
	
	// Подготовка кэша особых значений
	ОсобыеЗначения = Новый Соответствие;
	ОсобыеЗначения.Вставить(NULL, "<NULL>");
	ОсобыеЗначения.Вставить(Неопределено, НСтр("ru = '<Неопределено>'; en = '<Undefined>'"));
	ОсобыеЗначения.Вставить("", НСтр("ru = '<Пустая строка>'; en = '<Empty string>'"));
	ОсобыеЗначения.Вставить(Дата(1,1,1), НСтр("ru = '<Пустая дата>'; en = '<Empty date>'"));
	
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор(УКО_СтрокиКлиентСервер_ПустойУникальныйИдентификатор());
	ОсобыеЗначения.Вставить(ПустойУникальныйИдентификатор, НСтр("ru = '<Пустой уникальный идентификатор>'; en = '<Unique identifier empty>'"));	
	
	Для Каждого Колонка Из Колонки Цикл 
		
		Для Каждого Тип Из Колонка.ТипЗначения.Типы() Цикл 
			
			Если УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип) Тогда
				
				Ключ = Новый (Тип);
				Если ОсобыеЗначения.Получить(Ключ) = Неопределено Тогда
					ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
					ОсобыеЗначения.Вставить(Ключ, СтрШаблон(НСтр("ru = '<Пустая ссылка: %1>'; en = '<Empty link: %1>'"), ОбъектМетаданных.ПолноеИмя()));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл 
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			
			ОбластьСтрока = СтрокиЗапроса.Область(НомерСтроки, НомерКолонки);
			
			ОсобоеЗначениеПредставление = ОсобыеЗначения.Получить(ОбластьСтрока.Расшифровка);
			Если ОсобоеЗначениеПредставление <> Неопределено Тогда
				ОбластьСтрока.Текст = ОсобоеЗначениеПредставление;
				ОбластьСтрока.Расшифровка = Неопределено;
				ОбластьСтрока.Шрифт = ШрифтОсобыхЗначенийРезультата;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция УКО_Запрос_КоэффициентШириныКолонок(Ширина, ШрифтЖирный)
	
	Коэффициент = 1;
	Если Ширина > 10 И Ширина <= 15 Тогда
		Коэффициент = 0.92;
	ИначеЕсли Ширина > 15 И Ширина <= 20 Тогда
		Коэффициент = 0.86;
	ИначеЕсли Ширина > 20 И Ширина <= 40 Тогда
		Коэффициент = 0.83;
	ИначеЕсли Ширина > 40 Тогда
		Коэффициент = 0.8;
	КонецЕсли; 
	
	Если ШрифтЖирный = Истина Тогда // Нужно Истина т.к. бывает что Жирность для шрифта неопределена
		Коэффициент = Коэффициент * 1.15;
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

Процедура УКО_Запрос_УстановитьШиринуКолонок(ТабличныйДокумент, Колонки, ШиринаКолонок)
	
	НомерКолонки = 1;
	Для Каждого Колонка Из Колонки Цикл 
		
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		Область = ВременныйТабличныйДокумент.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки);
		ТабличныйДокумент.Присоединить(Область).ШиринаКолонки = ШиринаКолонок[НомерКолонки - 1];
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_Запрос_ЗагрузкаДанныхВременныхТаблиц(Данные, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Номер = 1;
	ПакетЗапросов = Новый Массив;
	ВнешниеИсточники = УКО_Данные_ВнешниеИсточники(Данные);
	Для Каждого ОписаниеВнешнегоИсточника Из ВнешниеИсточники Цикл 
		
		ВременнаяТаблица = ОписаниеВнешнегоИсточника.Значение;
		
		Если ВременнаяТаблица = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемаяТаблица = УКО_Запрос_ПодготовитьВременнуюТаблицу(ВременнаяТаблица);
		
		СписокПолей = Новый Массив;
		Для Каждого Колонка Из ЗагружаемаяТаблица.Колонки Цикл
			СписокПолей.Добавить(Колонка.Имя);
		КонецЦикла;
		
		ИндексыПолей = Новый Массив;
		Для Каждого Колонка Из ЗагружаемаяТаблица.Колонки Цикл
			
			Если УКО_ОбщегоНазначения_КолонкаТаблицыЗначенийИндексируется(ЗагружаемаяТаблица, Колонка.Имя) Тогда
				ИндексыПолей.Добавить(Колонка.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
		ИмяПараметра = "ТаблицаЗначений" + Номер;
		Запрос.УстановитьПараметр(ИмяПараметра, ЗагружаемаяТаблица); 
		
		ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
		|	%1
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	&%3 КАК ТЗ", СтрСоединить(СписокПолей, "," + Символы.ПС), ОписаниеВнешнегоИсточника.Ключ, ИмяПараметра);
		
		Если ЗначениеЗаполнено(ИндексыПолей) Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон("
			|ИНДЕКСИРОВАТЬ ПО
			|	%1", СтрСоединить(ИндексыПолей, "," + Символы.ПС));
		КонецЕсли;
		
		ПакетЗапросов.Добавить(ТекстЗапроса); 
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПакетЗапросов) Тогда
		Запрос.Текст = СтрСоединить(ПакетЗапросов, УКО_ЗапросКлиентСервер_РазделительПакетов());
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура УКО_Запрос_ЗаполнениеОбластиЗначения(Область, Колонка, ВыделятьОсобыеЗначения)
	
	Формат = "";
	Если Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		КвалификаторыДатыЧастиДаты = Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты;
		Если КвалификаторыДатыЧастиДаты = ЧастиДаты.ДатаВремя Тогда
			Формат = "ДЛФ=DT";
		ИначеЕсли КвалификаторыДатыЧастиДаты = ЧастиДаты.Дата Тогда
			Формат = "ДЛФ=D";
		ИначеЕсли КвалификаторыДатыЧастиДаты = ЧастиДаты.Время Тогда
			Формат = "ДЛФ=T";
		КонецЕсли;
	КонецЕсли;
	
	Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	
	Параметр = Колонка.Имя;
	Если Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда
		Параметр = "";
	КонецЕсли;
	
	ПараметрРасшифровки = Колонка.Имя;
	Если Не (ВыделятьОсобыеЗначения ИЛИ УКО_Запрос_ТребуетсяРасшифровкаКолонкиРезультата(Колонка.ТипЗначения)) Тогда
		ПараметрРасшифровки = "";
	КонецЕсли;
	
	Область.Параметр = Параметр;
	Область.ПараметрРасшифровки = ПараметрРасшифровки;
	
	Если ЗначениеЗаполнено(Формат) Тогда
		Область.Формат = Формат;
	КонецЕсли;
	
КонецПроцедуры

Функция УКО_Запрос_ТребуетсяРасшифровкаКолонкиРезультата(ОписаниеТипов)
	
	Результат = Ложь;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл 
		
		Если УКО_Запрос_ТипТребуетРасшифровки(Тип, ОписаниеТипов) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Запрос_ТипТребуетРасшифровки(Тип, ОписаниеТипов)
	
	Возврат (Тип = Тип("Строка") И (ОписаниеТипов.КвалификаторыСтроки.Длина = 0 
											ИЛИ ОписаниеТипов.КвалификаторыСтроки.Длина > 20))
			ИЛИ Тип = Тип("РезультатЗапроса") ИЛИ УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип);
	
КонецФункции

Функция УКО_Запрос_ПодготовитьПакетРезультатовДляОбработки(ПакетРезультатов)
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ПакетРезультатов) Тогда
		
		ТаблицаЗначений = ПакетРезультатов[ПакетРезультатов.ВГраница()].Выгрузить();
		Результат = УКО_Запрос_ПодготовитьТаблицуЗначенийДляОбработки(ТаблицаЗначений);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Запрос_ПодготовитьТаблицуЗначенийДляОбработки(ТаблицаЗначений)
	
	УдаляемыеКолонки = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл 
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса"))
				ИЛИ Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				
			УдаляемыеКолонки.Добавить(Колонка);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка Из УдаляемыеКолонки Цикл 
		
		ТаблицаЗначений.Колонки.Удалить(Колонка);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция УКО_Запрос_ЗаголовокЗапроса(Номер, ТаблицаДляПомещения)
	
	Результат = СтрШаблон(НСтр("ru = 'Запрос №%1'; en = 'Query №%1'"), Номер);
	
	Если ЗначениеЗаполнено(ТаблицаДляПомещения) Тогда
		Результат = Результат + СтрШаблон(" [%1]", ТаблицаДляПомещения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Запрос_ПодготовитьВременнуюТаблицу(ТаблицаЗначений)
	
	НоваяТаблицаЗначений = Неопределено;
	Результат = ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл 
		
		ИмяКолонки = Колонка.Имя;
		НедопустимыйТип = Не ЗначениеЗаполнено(Колонка.ТипЗначения.Типы())
							ИЛИ Колонка.ТипЗначения.СодержитТип(Тип("ОписаниеТипов"));
		СодержитТипNull = Колонка.ТипЗначения.СодержитТип(Тип("Null"));
		
		Если НедопустимыйТип
				ИЛИ СодержитТипNull Тогда
				
			Если НоваяТаблицаЗначений = Неопределено Тогда
				
				НоваяТаблицаЗначений = ТаблицаЗначений.Скопировать();
				Результат = НоваяТаблицаЗначений;
				
			КонецЕсли;
			
			Если НедопустимыйТип Тогда
				
				НоваяТаблицаЗначений.Колонки.Удалить(ИмяКолонки);
				
			ИначеЕсли СодержитТипNull Тогда
				
				ИмяКолонкиВременной = ИмяКолонки + "ВременнаяКолонка";
				НоваяТаблицаЗначений.Колонки.Добавить(ИмяКолонкиВременной, УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповБезNull(Колонка.ТипЗначения));
				НоваяТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки), ИмяКолонкиВременной);
				НоваяТаблицаЗначений.Колонки.Удалить(ИмяКолонки);
				НоваяТаблицаЗначений.Колонки[ИмяКолонкиВременной].Имя = ИмяКолонки;
				
			КонецЕсли;
				
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции
// Получает код для запроса
//
// Параметры:
//  Данные  - Данные - Данные
//  Настройки  - Структура - Настройки генерации текста
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для запроса
//
Функция УКО_КодНаВстроенномЯзыке_Запрос(Данные, Настройки) Экспорт
	
	ТекстЗапроса = Данные.Текст;
	ЗначенияПараметров = УКО_Запрос_ЗначенияПараметров(Данные, Ложь);
	КоличествоРезультатов = УКО_Запрос_КоличествоЗапросовВПакете(ТекстЗапроса, Ложь);
	
	СтрокиКода = Новый Массив;
	
	Язык = Настройки.Язык;
	ДобавлятьКомментарии = Настройки.ДобавлятьКомментарии;
	
	Если ДобавлятьКомментарии Тогда 
		СтрокиКода.Добавить(СтрШаблон(НСтр("ru = '//Текст сформирован автоматически из %1'; en = '//Text generated automatically from %1'", Язык), УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения()));
		СтрокиКода.Добавить("");
	КонецЕсли;
	
	СтрокиКода.Добавить(НСтр("ru = 'Запрос = Новый Запрос;'; en = 'Query = New Query;'", Язык));
	Если Настройки.МенеджерВременныхТаблиц Тогда 
		СтрокиКода.Добавить(НСтр("ru = 'Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;'; en = 'Query.TempTablesManager = New TempTablesManager;'", Язык));
	КонецЕсли;
	СтрокиКода.Добавить("");
	
	// Установка параметров
	Если ЗначенияПараметров.Количество() Тогда 
		
		Если ДобавлятьКомментарии Тогда
			СтрокиКода.Добавить(НСтр("ru = '//Установка значений параметров'; en = '//Setting parameter values'", Язык));
		КонецЕсли;
		
		Для Каждого ПараметрЗапроса Из ЗначенияПараметров Цикл
			
			ИмяПараметра = ПараметрЗапроса.Ключ; 
			ЗначениеПараметра = ПараметрЗапроса.Значение;
			
			КомментарийПараметра = "";
			СложныйПараметр = Ложь;
			ТипПараметра = "";
			КодИнициализацииПараметра = "";
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
				
				СложныйПараметр = Истина;
				ТипПараметра = НСтр("ru = 'Выражение'; en = 'Expression'");
				КодИнициализацииПараметра = ЗначениеПараметра.Значение;
				КодЗначенияПараметра = УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения(Язык);
				
			Иначе 		
				
				Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
					
					Если ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
						
						СложныйПараметр = Истина;
						ТипПараметра = НСтр("ru = 'Таблица значений'; en = 'Table of values'");
						ЗначениеПараметра = ПолучитьИзВременногоХранилища(ЗначениеПараметра.Значение);
						
					ИначеЕсли ЗначениеПараметра.Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
						
						ОписаниеГраницы = ЗначениеПараметра.Значение;
						ЗначениеПараметра = УКО_Запрос_ГраницаИзОписания(ОписаниеГраницы);
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда 
					СложныйПараметр = Истина;
					ТипПараметра = НСтр("ru = 'Список значений'; en = 'List of values'");
				КонецЕсли;
				
				ДополнениеРезультата = Неопределено;
				КодЗначенияПараметра = УКО_КодНаВстроенномЯзыке_Значение(ЗначениеПараметра, ДополнениеРезультата, Язык, ДобавлятьКомментарии);
				
				Если ЗначениеЗаполнено(ДополнениеРезультата.Комментарий) Тогда
					КомментарийПараметра = ДополнениеРезультата.Комментарий
				КонецЕсли;
				
				Если ДополнениеРезультата.ТребуетсяИнициализация Тогда
					КодИнициализацииПараметра = СтрШаблон(КодЗначенияПараметра, НСтр("ru = 'Параметр'; en = 'Parametr'", Язык));
				КонецЕсли;
				
				Если СложныйПараметр Тогда
					КодЗначенияПараметра = НСтр("ru = 'Параметр'; en = 'Parametr'", Язык);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СложныйПараметр И ДобавлятьКомментарии Тогда
				СтрокиКода.Добавить(СтрШаблон(НСтр("ru = '//Параметр ""%1"" (%2)'; en = '//Parametr ""%1"" (%2)'", Язык), ИмяПараметра, ТипПараметра));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодИнициализацииПараметра) Тогда
				СтрокиКода.Добавить(КодИнициализацииПараметра);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КомментарийПараметра) Тогда
				СтрокиКода.Добавить(СтрШаблон(НСтр("ru = 'Запрос.УстановитьПараметр(""%1"", %2);//%3'; en = 'Query.SetParameter(""%1"", %2);//%3'", Язык),
												ИмяПараметра, КодЗначенияПараметра, КомментарийПараметра));
			Иначе
				СтрокиКода.Добавить(СтрШаблон(НСтр("ru = 'Запрос.УстановитьПараметр(""%1"", %2);'; en = 'Query.SetParameter(""%1"", %2);'", Язык),
												ИмяПараметра, КодЗначенияПараметра));
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиКода.Добавить("");
		
	КонецЕсли;
	
	// Вставка текста запроса
	ТекстЗапросаНаВстроенномЯзыке = УКО_КодНаВстроенномЯзыке_Значение(ТекстЗапроса, , Язык, ДобавлятьКомментарии);
	СтрокиКода.Добавить(СтрШаблон(НСтр("ru = 'Запрос.Текст = %1;'; en = 'Query.Text = %1;'", Язык), ТекстЗапросаНаВстроенномЯзыке));
	СтрокиКода.Добавить("");
	
	// Результат
	Если Настройки.ВидРезультата = "Перечисление.УКО_ВидРезультатаЗапроса.Пакет" И КоличествоРезультатов > 1 Тогда
		СтрокиКода.Добавить(НСтр("ru = 'ПакетРезультатов = Запрос.ВыполнитьПакет();'; en = 'ResultsPackage = Query.ExecuteBatch();'", Язык));
	Иначе 
		СтрокиКода.Добавить(НСтр("ru = 'Результат = Запрос.Выполнить();'; en = 'Result = Query.Execute();'", Язык));
	КонецЕсли;
	
	Если Настройки.ПроверкаРезультата Тогда 
		
		СтрокиКода.Добавить(НСтр("ru = 'Если Результат.Пустой() Тогда'; en = 'If Result.IsEmpty() Then'", Язык));
		
		Если Настройки.ВключитьВФункцию Тогда
			КодВозврата = НСтр("ru = 'Возврат Неопределено;'; en = 'Return Undefined;'", Язык);
		Иначе 
			КодВозврата = НСтр("ru = 'Возврат;'; en = 'Return;'", Язык);
		КонецЕсли;
		
		СтрокиКода.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(КодВозврата));
		
		СтрокиКода.Добавить(НСтр("ru = 'КонецЕсли;'; en = 'EndIf;'", Язык));
		
	КонецЕсли;
	
	Если Настройки.Выборка Тогда 
		
		СтрокиКода.Добавить("");
		СтрокиКода.Добавить(НСтр("ru = 'Выборка = Результат.Выбрать();'; en = 'Selection = Result.Select();'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'Пока Выборка.Следующий() Цикл'; en = 'While Selection.Next() Do'", Язык));
		
		КодЦикла = НСтр("ru = '// Код'; en = '// Code'", Язык);
		СтрокиКода.Добавить(УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(КодЦикла));
		
		СтрокиКода.Добавить(НСтр("ru = 'КонецЦикла;'; en = 'EndDo;'", Язык));
		
	КонецЕсли;
	
	Результат = СтрСоединить(СтрокиКода, Символы.ПС);
	
	Если Настройки.ВключитьВФункцию Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Функция %1()
		|
		|%2
		|
		|КонецФункции'; en = 'Function %1()
		|
		|%2
		|
		|EndFunction'", Язык), Настройки.ИмяФункции, УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(Результат));
		
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции
// Получает код для схемы компоновки данных
//
// Параметры:
//  Данные  - Данные - Данные
//  Настройки  - Структура - Настройки генерации текста
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для схемы компоновки данных
//
Функция УКО_КодНаВстроенномЯзыке_СхемаКомпоновкиДанных(Данные, Настройки) Экспорт
	
	Язык = Настройки.Язык;
	ДобавлятьКомментарии = Настройки.ДобавлятьКомментарии;
	
	// Инициализация
	БлокиКода = Новый Массив;
	СтрокиКода = Новый Массив;
	
	Если ДобавлятьКомментарии Тогда 
		
		СтрокиКода.Добавить(СтрШаблон(НСтр("ru = '//Текст сформирован автоматически из %1'; en = '//Text generated automatically from %1'", Язык),
												УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения()));
		СтрокиКода.Добавить("");
		
	КонецЕсли;
	
	БлокиКода.Добавить(СтрСоединить(СтрокиКода, Символы.ПС));
	
	// Основной код
	СтрокиКода = Новый Массив;
	
	Если Настройки.ИспользуетсяВОтчете Тогда
		
		СтрокиКода.Добавить(НСтр("ru = 'СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");'; 
								|en = 'DataCompositionSchema = GetTemplate(""MainDataCompositionSchema"");'", Язык));
		СтрокиКода.Добавить("");
		СтрокиКода.Добавить(НСтр("ru = 'КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;';
								|en = 'SettingsComposer = New DataCompositionSettingsComposer;'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));';
								|en = 'SettingsComposer.Initialize(New DataCompositionAvailableSettingsSource(DataCompositionSchema));'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);';
								|en = 'SettingsComposer.LoadSettings(DataCompositionSchema.DefaultSettings);'", Язык));
		СтрокиКода.Добавить("");
		
	КонецЕсли;
	
	Если Настройки.ВыводРезультатаВ = "Перечисление.УКО_ВариантыВыводаРезультатаСКД.ТабличныйДокумент" Тогда
		ТипГенератораМакетаКомпоновкиДанных = НСтр("ru = 'ГенераторМакетаКомпоновкиДанных'; en = 'DataCompositionTemplateGenerator'", Язык);
	ИначеЕсли Настройки.ВыводРезультатаВ = "Перечисление.УКО_ВариантыВыводаРезультатаСКД.Коллекция" Тогда
		ТипГенератораМакетаКомпоновкиДанных = НСтр("ru = 'ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений';
													|en = 'DataCompositionValueCollectionTemplateGenerator'", Язык);
	КонецЕсли;
	
	СтрокиКода.Добавить(НСтр("ru = 'КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;'; 
								|en = 'TemplateComposer = New DataCompositionTemplateComposer;'", Язык));	
	СтрокиКода.Добавить(СтрШаблон(НСтр("ru = 'МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		                              |						КомпоновщикНастроек.Настройки,,,
		                              |						Тип(""%1""));';
									  |en = 'CompositionTemplate = TemplateComposer.Execute(DataCompositionSchema, 
		                              |						SettingsComposer.Settings,,,
		                              |						Type(""%1""));'", Язык), ТипГенератораМакетаКомпоновкиДанных));	
	СтрокиКода.Добавить("");
	СтрокиКода.Добавить(НСтр("ru = 'ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;';
							|en = 'CompositionProcessor = New DataCompositionProcessor;'", Язык));
	
	Если ЗначениеЗаполнено(Данные.ВнешниеИсточники) Тогда
		ВнешниеИсточники = НСтр("ru = 'ВнешниеИсточники'; en = 'ExternalSources'", Язык);
	Иначе
		ВнешниеИсточники = УКО_КодНаВстроенномЯзыке_Значение(Неопределено, , Язык, ДобавлятьКомментарии);
	КонецЕсли;
	СтрокиКода.Добавить(СтрШаблон(НСтр("ru = 'ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, %1,, %2);';
										|en = 'CompositionProcessor.Initialize(CompositionTemplate, %1,, %2);'", Язык), ВнешниеИсточники, УКО_КодНаВстроенномЯзыке_Значение(Данные.ИспользованиеВнешнихФункций, , Язык, ДобавлятьКомментарии)));
	СтрокиКода.Добавить("");
	
	Если Настройки.ВыводРезультатаВ = "Перечисление.УКО_ВариантыВыводаРезультатаСКД.ТабличныйДокумент" Тогда
		
		СтрокиКода.Добавить(НСтр("ru = 'ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;';
								|en = 'OutputProcessor = New DataCompositionResultSpreadsheetDocumentOutputProcessor;'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'Результат = Новый ТабличныйДокумент;';
								|en = 'Result = New SpreadsheetDocument;'", Язык));
		
		СтрокиКода.Добавить(НСтр("ru = 'ПроцессорВывода.УстановитьДокумент(Результат);';
								|en = 'OutputProcessor.SetDocument(Result);'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'ПроцессорВывода.Вывести(ПроцессорКомпоновки);';
								|en = 'OutputProcessor.Output(CompositionProcessor);'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'ДокументРезультат.Вывести(Результат);';
								|en = 'DocumentResult.Output(Result);'", Язык));
		
	ИначеЕсли Настройки.ВыводРезультатаВ = "Перечисление.УКО_ВариантыВыводаРезультатаСКД.Коллекция" Тогда
		
		СтрокиКода.Добавить(НСтр("ru = 'ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;';
								|en = 'OutputProcessor = New DataCompositionResultValueCollectionOutputProcessor;'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'Результат = Новый ТаблицаЗначений;';
								|en = 'Result = New ValueTable;'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'ПроцессорВывода.УстановитьОбъект(Результат);';
								|en = 'OutputProcessor.SetObject(Result);'", Язык));
		СтрокиКода.Добавить(НСтр("ru = 'ПроцессорВывода.Вывести(СхемаКомпоновкиДанных);';
								|en = 'OutputProcessor.Output(CompositionProcessor);'", Язык));
		
	КонецЕсли;
	
	КодНаВстроенномЯзыке = СтрСоединить(СтрокиКода, Символы.ПС);
	
	Если Настройки.ИспользуетсяВОтчете Тогда
		
		КодНаВстроенномЯзыке = СтрШаблон(НСтр("ru = 'Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
		|	
		|	СтандартнаяОбработка = Ложь;
		|	
		|	%1
		|	
		|КонецПроцедуры'; en = 'Procedure OnComposeResult(DocumentResult, DecryptionData, StandardProcessing)
		|	
		|	StandardProcessing = False;
		|	
		|	%1
		|	
		|EndProcedure'", Язык), УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(КодНаВстроенномЯзыке, Ложь));
		
	КонецЕсли;
	
	БлокиКода.Добавить(КодНаВстроенномЯзыке);
	
	Возврат	СтрСоединить(БлокиКода, Символы.ПС);
	
КонецФункции
// Получает код на встроенном языке для значения
//
// Параметры:
//  Значение  - Произвольный - Значение
//  ДополнениеРезультата  - Переменная - Переменная для возврата дополнения результата
//   *ТребуетсяИнициализация - Булево - Требуется инициализация
//   *Комментарий - Строка - Комментарий
//  Язык  - Язык(строка) - Язык
//  ДобавлятьКомментарии  - Булево - Добавлять комментарии
//
// Возвращаемое значение:
//   Строка - код на встроенном языке для значения
//
Функция УКО_КодНаВстроенномЯзыке_Значение(Значение, ДополнениеРезультата = Неопределено, Язык = Неопределено, ДобавлятьКомментарии = Истина, ВШаблоне = Ложь) Экспорт
	
	Если Язык = Неопределено Тогда
		Язык = УКО_ОбщегоНазначения_КодЯзыкаПрограммирования();
	КонецЕсли;
	
	ТребуетсяИнициализация = Ложь;
	Комментарий = "";
	
	// Генерация кода для разных типов
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		ТребуетсяИнициализация = Истина;
		СтрокиКода = Новый Массив;
		
		СтрокиКода.Добавить(НСтр("ru = '%1 = Новый ТаблицаЗначений;'; en = '%1 = New ValueTable;'", Язык));
		
		// Добавляем код колонок
		Если Значение.Колонки.Количество() > 0 Тогда
			
			СтрокиКода.Добавить("");
			
			Если ДобавлятьКомментарии Тогда
				СтрокиКода.Добавить(НСтр("ru = '//Добавляем колонки'; en = '//Add columns'", Язык));
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого Колонка Из Значение.Колонки Цикл 
			
			СтрокиКода.Добавить("%1." + СтрШаблон(НСтр("ru = 'Колонки.Добавить(%1, %2);'; en = 'Columns.Add(%1, %2);'", Язык),
											УКО_КодНаВстроенномЯзыке_Значение(Колонка.Имя, , Язык, ДобавлятьКомментарии), УКО_КодНаВстроенномЯзыке_Значение(Колонка.ТипЗначения,  , Язык, ДобавлятьКомментарии)));
			
		КонецЦикла;
		
		// Добавляем код строк
		Если Значение.Количество() > 0 Тогда
			
			СтрокиКода.Добавить("");
			
			Если ДобавлятьКомментарии Тогда
				СтрокиКода.Добавить(НСтр("ru = '//Добавляем строки'; en = '//Add rows'", Язык));
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаТЗ Из Значение Цикл 
			СтрокиКода.Добавить(НСтр("ru = 'НоваяСтрока = %1.Добавить();'; en = 'NewRow = %1.Add();'", Язык));
			Для Каждого Колонка Из Значение.Колонки Цикл 
				СтрокиКода.Добавить(СтрШаблон(НСтр("ru = 'НоваяСтрока.%1 = %2;'; en = 'NewRow.%1 = %2;'", Язык),
												Колонка.Имя, УКО_КодНаВстроенномЯзыке_Значение(СтрокаТЗ[Колонка.Имя], , Язык, ДобавлятьКомментарии, Истина)));
			КонецЦикла;
		КонецЦикла;
		
		Результат = СтрСоединить(СтрокиКода, Символы.ПС);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда
		
		Если ЗначениеЗаполнено(Значение.Ссылка) Тогда
			Результат = СтрШаблон(НСтр("ru = 'Новый МоментВремени(%1, %2)'; en = 'New PointInTime(%1, %2)'", Язык),
										УКО_КодНаВстроенномЯзыке_Значение(Значение.Дата, , Язык, ДобавлятьКомментарии), УКО_КодНаВстроенномЯзыке_Значение(Значение.Ссылка, , Язык, ДобавлятьКомментарии));
		Иначе
			Результат = СтрШаблон(НСтр("ru = 'Новый МоментВремени(%1)'; en = 'New PointInTime(%1)'", Язык), УКО_КодНаВстроенномЯзыке_Значение(Значение.Дата, , Язык, ДобавлятьКомментарии));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Граница") Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Новый Граница(%1, %2)'; en = 'New Boundary(%1, %2)'", Язык),
									УКО_КодНаВстроенномЯзыке_Значение(Значение.Значение, , Язык, ДобавлятьКомментарии), УКО_КодНаВстроенномЯзыке_Значение(Значение.ВидГраницы, ,  Язык, ДобавлятьКомментарии));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ВидГраницы") Тогда
		
		Если Значение = ВидГраницы.Включая Тогда
			Результат = НСтр("ru = 'ВидГраницы.Включая'; en = 'BoundaryType.Including'", Язык);
		ИначеЕсли Значение = ВидГраницы.Исключая Тогда
			Результат = НСтр("ru = 'ВидГраницы.Исключая'; en = 'BoundaryType.Excluding'", Язык);
		КонецЕсли;
									
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		
		ТребуетсяИнициализация = Истина;
		СтрокиКода = Новый Массив;
		
		СтрокиКода.Добавить(НСтр("ru = '%1 = Новый СписокЗначений;'; en = '%1 = New ValueList;'", Язык));
		
		Для Каждого ЭлементСписка Из Значение Цикл
			
			ДополнениеРезультатаКодЭлемента = Неопределено;
			КодЭлемента = УКО_КодНаВстроенномЯзыке_Значение(ЭлементСписка.Значение, ДополнениеРезультатаКодЭлемента, Язык, ДобавлятьКомментарии);
			
			Если ДобавлятьКомментарии И ЗначениеЗаполнено(ДополнениеРезультатаКодЭлемента.Комментарий) Тогда
				КодДобавленияВСписок = СтрШаблон(НСтр("ru = 'Добавить(%1);// %2'; en = 'Add(%1);// %2'", Язык),
				КодЭлемента, ДополнениеРезультатаКодЭлемента.Комментарий);
			Иначе
				КодДобавленияВСписок = СтрШаблон(НСтр("ru = 'Добавить(%1);'; en = 'Add(%1);'", Язык),
				КодЭлемента);
			КонецЕсли;
			СтрокиКода.Добавить("%1." + КодДобавленияВСписок); 
			
		КонецЦикла;
		
		Результат = СтрСоединить(СтрокиКода, Символы.ПС);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда	
		
		КвалификаторыЧисла = "";
		Если Значение.СодержитТип(Тип("Число")) Тогда
			КвалификаторыЧисла = УКО_КодНаВстроенномЯзыке_Значение(Значение.КвалификаторыЧисла, , Язык, ДобавлятьКомментарии);
		КонецЕсли;
		
		КвалификаторыСтроки = "";
		Если Значение.СодержитТип(Тип("Строка")) Тогда
			КвалификаторыСтроки = УКО_КодНаВстроенномЯзыке_Значение(Значение.КвалификаторыСтроки, , Язык, ДобавлятьКомментарии);
		КонецЕсли;
		
		КвалификаторыДаты = "";
		Если Значение.СодержитТип(Тип("Дата")) Тогда
			КвалификаторыДаты = УКО_КодНаВстроенномЯзыке_Значение(Значение.КвалификаторыДаты, , Язык, ДобавлятьКомментарии);
		КонецЕсли;
		
		СписокТипов = СтрСоединить(УКО_КодНаВстроенномЯзыке_СписокИменТипов(Значение.Типы(), Язык), ",");
		Результат = СтрШаблон(НСтр("ru = 'Новый ОписаниеТипов(""%1"", %2, %3, %4)'; en = 'New TypeDescription(""%1"", %2, %3, %4)'", Язык),
		СписокТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("КвалификаторыЧисла") Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Новый КвалификаторыЧисла(%1, %2, %3)'; en = 'New NumberQualifiers(%1, %2, %3)'", Язык),
										Значение.Разрядность, Значение.РазрядностьДробнойЧасти, УКО_КодНаВстроенномЯзыке_Значение(Значение.ДопустимыйЗнак, , Язык, ДобавлятьКомментарии));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("КвалификаторыСтроки") Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Новый КвалификаторыСтроки(%1, %2)'; en = 'New StringQualifiers(%1, %2)'", Язык),
										Значение.Длина, УКО_КодНаВстроенномЯзыке_Значение(Значение.ДопустимаяДлина, , Язык, ДобавлятьКомментарии));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("КвалификаторыДаты") Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Новый КвалификаторыДаты(%1)'; en = 'New DateQualifiers(%1)'", Язык),
										УКО_КодНаВстроенномЯзыке_Значение(Значение.ЧастиДаты, , Язык, ДобавлятьКомментарии));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Результат = Формат(Значение,"ЧРД=.; ЧН=0; ЧГ=");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Строка = СтрЗаменить(Значение, """", """""");
		
		Результат = СтрШаблон("""%1""", Строка);
		
		Если УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Строка) Тогда
			Результат = СтрЗаменить(Результат, Символы.ПС, Символы.ПС + "|");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			Результат = НСтр("ru = 'Истина'; en = 'True'", Язык);
		Иначе
			Результат = НСтр("ru = 'Ложь'; en = 'False'", Язык);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Новый УникальныйИдентификатор(""%1"")'; en = 'New UUID(""%1"")'", Язык), Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Тип(""%1"")'; en = 'Type(""%1"")'", Язык), УКО_КодНаВстроенномЯзыке_ИмяТипа(Значение, Язык));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		ГодСтрока = УКО_СтрокиКлиентСервер_ЧислоВСтроку(Год(Значение));
		Если Час(Значение) = 0 
				И Минута(Значение) = 0
				И Секунда(Значение) = 0 Тогда
				
			Результат = СтрШаблон(НСтр("ru = 'Дата(%1,%2,%3)'; en = 'Date(%1,%2,%3)'", Язык), ГодСтрока, Месяц(Значение), День(Значение));
				
		Иначе 
			
			Результат = СтрШаблон(НСтр("ru = 'Дата(%1,%2,%3,%4,%5,%6)'; en = 'Date(%1,%2,%3,%4,%5,%6)'", Язык), ГодСтрока, Месяц(Значение), День(Значение), Час(Значение), Минута(Значение), Секунда(Значение));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТипДополненияПериодамиСхемыЗапроса") Тогда
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Год, НСтр("ru = 'ГОД'; en = 'YEAR'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Полугодие, НСтр("ru = 'ПОЛУГОДИЕ'; en = 'HALFYEAR'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Квартал, НСтр("ru = 'КВАРТАЛ'; en = 'QUARTER'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Месяц, НСтр("ru = 'МЕСЯЦ'; en = 'MONTH'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Декада, НСтр("ru = 'ДЕКАДА'; en = 'TENDAYS'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Неделя, НСтр("ru = 'НЕДЕЛЯ'; en = 'WEEK'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.День, НСтр("ru = 'ДЕНЬ'; en = 'DAY'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Час, НСтр("ru = 'ЧАС'; en = 'HOUR'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Минута, НСтр("ru = 'МИНУТА'; en = 'MINUTE'"));
		Соответствие.Вставить(ТипДополненияПериодамиСхемыЗапроса.Секунда, НСтр("ru = 'СЕКУНДА'; en = 'SECOND'"));
		
		Результат = Соответствие.Получить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ВидДвиженияНакопления") Тогда
		
		Если Значение = ВидДвиженияНакопления.Приход Тогда
			
			Результат = НСтр("ru = 'ВидДвиженияНакопления.Приход'; en = 'AccumulationRecordType.Receipt'", Язык);
			
		ИначеЕсли Значение = ВидДвиженияНакопления.Расход Тогда
			
			Результат = НСтр("ru = 'ВидДвиженияНакопления.Расход'; en = 'AccumulationRecordType.Expense'", Язык);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ВидДвиженияБухгалтерии") Тогда
		
		Если Значение = ВидДвиженияБухгалтерии.Дебет Тогда
			
			Результат = НСтр("ru = 'ВидДвиженияБухгалтерии.Дебет'; en = 'AccountingRecordType.Debit'", Язык);
			
		ИначеЕсли Значение = ВидДвиженияБухгалтерии.Кредит Тогда
			
			Результат = НСтр("ru = 'ВидДвиженияБухгалтерии.Кредит'; en = 'AccountingRecordType.Credit'", Язык);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ДопустимыйЗнак") Тогда
		
		Если Значение = ДопустимыйЗнак.Любой Тогда
			
			Результат = НСтр("ru = 'ДопустимыйЗнак.Любой'; en = 'AllowedSign.Any'", Язык);
			
		ИначеЕсли Значение = ДопустимыйЗнак.Неотрицательный Тогда
			
			Результат = НСтр("ru = 'ДопустимыйЗнак.Неотрицательный'; en = 'AllowedSign.Nonnegative'", Язык);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ДопустимаяДлина") Тогда
		
		Если Значение = ДопустимаяДлина.Переменная Тогда
			
			Результат = НСтр("ru = 'ДопустимаяДлина.Переменная'; en = 'AllowedLength.Variable'", Язык);
			
		ИначеЕсли Значение = ДопустимаяДлина.Фиксированная Тогда
			
			Результат = НСтр("ru = 'ДопустимаяДлина.Фиксированная'; en = 'AllowedLength.Fixed'", Язык);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ЧастиДаты") Тогда
		
		Если Значение = ЧастиДаты.Время Тогда
			
			Результат = НСтр("ru = 'ЧастиДаты.Время'; en = 'DateFractions.Time'", Язык);
			
		ИначеЕсли Значение = ЧастиДаты.Дата Тогда
			
			Результат = НСтр("ru = 'ЧастиДаты.Дата'; en = 'DateFractions.Date'", Язык);
			
		ИначеЕсли Значение = ЧастиДаты.ДатаВремя Тогда
			
			Результат = НСтр("ru = 'ЧастиДаты.ДатаВремя'; en = 'DateFractions.DateTime'", Язык);
			
		КонецЕсли;
		
	Иначе
		
		ТипЗначения = ТипЗнч(Значение);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ОбъектМетаданных = Неопределено Тогда
			Результат = НСтр("ru = 'Неопределено'; en = 'Undefined'", Язык);
		Иначе
			
			ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
			ИмяЭлементаКоллекцииМетаданных = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(ПолноеИмяМетаданных);
			
			Если Не ЗначениеЗаполнено(Значение) Тогда //Пустое значение
				
				Результат = СтрШаблон(НСтр("ru = '%1.%2.ПустаяСсылка()'; en = '%1.%2.EmptyRef()'",Язык),
				УКО_Метаданные_ИмяКоллекции(ИмяЭлементаКоллекцииМетаданных, Язык), ОбъектМетаданных.Имя);
				
			ИначеЕсли УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяЭлементаКоллекцииМетаданных) Тогда
				
				Результат = СтрШаблон("%1.%2.%3", УКО_Метаданные_ИмяКоллекции(ИмяЭлементаКоллекцииМетаданных, Язык), ОбъектМетаданных.Имя, XMLСтрока(Значение));
				
			Иначе
				
				Если УКО_МетаданныеКлиентСервер_ОбъектCПредопределенными(ИмяЭлементаКоллекцииМетаданных) Тогда
					
					Если Значение.Предопределенный Тогда
						Результат = СтрШаблон("%1.%2.%3", УКО_Метаданные_ИмяКоллекции(ИмяЭлементаКоллекцииМетаданных, Язык), ОбъектМетаданных.Имя, Значение.ИмяПредопределенныхДанных);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Результат) Тогда
					
					UID = Значение.УникальныйИдентификатор();
					Результат = СтрШаблон(НСтр("ru = '%1.%2.ПолучитьСсылку(Новый УникальныйИдентификатор(""%3""))'; en = '%1.%2.GetRef(New UUID(""%3""))'", Язык),
					УКО_Метаданные_ИмяКоллекции(ИмяЭлементаКоллекцииМетаданных, Язык), ОбъектМетаданных.Имя, UID);
					Комментарий = СтрШаблон("%1 (%2.%3)", Строка(Значение), ИмяЭлементаКоллекцииМетаданных, ОбъектМетаданных.Имя);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнениеРезультата = Новый Структура;
	ДополнениеРезультата.Вставить("ТребуетсяИнициализация", ТребуетсяИнициализация);
	ДополнениеРезультата.Вставить("Комментарий", Комментарий);
	
	Если ВШаблоне Тогда 
		
		Результат = СтрЗаменить(Результат, "%", "%%");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает имя типа
//
// Параметры:
//  Тип  - Тип - Тип
//  Язык  - Строка - Язык
//
// Возвращаемое значение:
//   Строка - Имя типа на встроенном языке
//
Функция УКО_КодНаВстроенномЯзыке_ИмяТипа(Тип, Язык)
	
	Если Тип = Тип("Число") Тогда
		Возврат НСтр("ru = 'Число'; en = 'Number'", Язык);
	ИначеЕсли Тип = Тип("Булево") Тогда
		Возврат НСтр("ru = 'Булево'; en = 'Boolean'", Язык);
	ИначеЕсли Тип = Тип("Дата") Тогда
		Возврат НСтр("ru = 'Дата'; en = 'Date'", Язык);
	ИначеЕсли Тип = Тип("Строка") Тогда
		Возврат НСтр("ru = 'Строка'; en = 'String'", Язык);
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		Возврат НСтр("ru = 'УникальныйИдентификатор'; en = 'UUID'", Язык);
	ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
		Возврат НСтр("ru = 'ХранилищеЗначения'; en = 'ValueStorage'", Язык);
	Иначе
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат УКО_КодНаВстроенномЯзыке_Значение(ОбъектМетаданных);
		Иначе
			
			ИмяТипаКоллекции = "";
			Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'СправочникСсылка'; en = 'CatalogRef'", Язык);
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'ПеречислениеСсылка'; en = 'EnumRef'", Язык);
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'ДокументСсылка'; en = 'DocumentRef'", Язык);
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'ПланВидовХарактеристикСсылка'; en = 'ChartOfCharacteristicTypesRef'", Язык);
			ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'ПланСчетовСсылка'; en = 'ChartOfAccountsRef'", Язык);
			ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'ПланВидовРасчетаСсылка'; en = 'ChartOfCalculationTypesRef'", Язык);
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'БизнесПроцессСсылка'; en = 'BusinessProcessRef'", Язык);
			ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
				ИмяТипаКоллекции = НСтр("ru = 'ЗадачаСсылка'; en = 'TaskRef'", Язык);
			КонецЕсли;
			
			Возврат СтрШаблон("%1.%2", ИмяТипаКоллекции, ОбъектМетаданных.Имя);	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция УКО_КодНаВстроенномЯзыке_СписокИменТипов(Типы, Язык)
	
	Результат = Новый Массив;
	Для Каждого Тип Из Типы Цикл 
		Результат.Добавить(УКО_КодНаВстроенномЯзыке_ИмяТипа(Тип, Язык));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// Запускает конфигуратор в пакетном режиме и выполняет команду
//
// Параметры:
//   Команда - Строка - Команда пакетного режима
//   Соединение - Строка - Соединение (/F путь)
//
Процедура УКО_Конфигуратор_ВыполнитьКоманду(Команда, Соединение) Экспорт

	КаталогПрограммы = КаталогПрограммы();
	КонфигураторПолноеИмя = """" + КаталогПрограммы + "1cv8.exe" + """" + " CONFIG";
	
	ЗапуститьПриложение(СтрШаблон("%1 %2 %3", КонфигураторПолноеИмя, Соединение, Команда), КаталогПрограммы, Истина); 	
	
КонецПроцедуры
// Извлекает схему компоновки данных из внешнего отчета
//
// Параметры:
//   ПолноеИмяФайлаОтчета - Строка - Полное имя файла внешнего отчета
//
// Возвращаемое значение:
//   Строка	- XML схема компоновки данных
//
Функция УКО_Конфигуратор_СхемаКомпоновкиДанныхИзВнешнегоОтчета(ПолноеИмяФайлаОтчета) Экспорт
	
	Результат = Неопределено;
	
	КаталогБазы = УКО_ФайлыКлиентСервер_СоздатьВременныйКаталог();
	КаталогВыгрузки = УКО_ФайлыКлиентСервер_СоздатьВременныйКаталог();
	
	Соединение = СтрШаблон("/F %1", КаталогБазы);
	Команда = СтрШаблон("/DumpExternalDataProcessorOrReportToFiles ""%1"" ""%2""", КаталогВыгрузки, ПолноеИмяФайлаОтчета); 
	
	УКО_Конфигуратор_ВыполнитьКоманду(Команда, Соединение);
	
	ИмяФайлаОписанияОбработки = УКО_ФайлыКлиентСервер_ПервыйИзКаталога(КаталогВыгрузки, "*.xml");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОписанияОбработки);
	
	ПостроительDOM = Новый ПостроительDOM;
	ОписаниеОбработки = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзелОтчета = ОписаниеОбработки.ПервыйДочерний.ПервыйДочерний;
	Если УзелОтчета.ИмяУзла = "ExternalReport" Тогда
		
		УзелСвойства = УКО_Конфигуратор_НайтиДочернийУзелDOMПоИмени(УзелОтчета, "Properties");
		
		ИмяОтчета = УКО_Конфигуратор_ЗначениеСвойстваУзлаDOM(УзелСвойства, "Name");
		ОсновнаяСхемаКомпоновкиДанныхПолноеИмя = УКО_Конфигуратор_ЗначениеСвойстваУзлаDOM(УзелСвойства, "MainDataCompositionSchema");
		Если ЗначениеЗаполнено(ОсновнаяСхемаКомпоновкиДанныхПолноеИмя) Тогда
			
			ОсновнаяСхемаКомпоновкиДанныхЧасти = СтрРазделить(ОсновнаяСхемаКомпоновкиДанныхПолноеИмя, ".");
			ИмяОсновнойСхемыКомпоновкиДанных = ОсновнаяСхемаКомпоновкиДанныхЧасти[3];
		
			ПолноеИмяФайлаСхемыКомпоновкиДанных = СтрШаблон("%1\%2\Templates\%3\Ext\Template.xml", КаталогВыгрузки, ИмяОтчета, ИмяОсновнойСхемыКомпоновкиДанных);
		
			СхемыКомпоновкиДанныхДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайлаСхемыКомпоновкиДанных);
			
			ЧтениеТекста = Новый ЧтениеТекста(СхемыКомпоновкиДанныхДвоичныеДанные.ОткрытьПотокДляЧтения());
			Результат = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Не задана основная схема компоновки данных'; en = 'No basic data composition schema defined'");
		
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неверный формат внешнего отчета'; en = 'Invalid external report format'");
		
	КонецЕсли;
	
	УдалитьФайлы(КаталогБазы);
	// УдалитьФайлы(КаталогВыгрузки);
	
	Возврат Результат;
	
КонецФункции
// Генерирует внешний отчет erf
//
// Параметры:
//   XMLСхема - Строка - XML схемы компоновки данных
//   Имя - Строка - XML схемы компоновки данных
//   Синоним - Строка - XML схемы компоновки данных
//
// Возвращаемое значение:
//   ДвоичныеДанные	- Файл внешнего отчета
//
Функция УКО_Конфигуратор_ГенерироватьВнешнийОтчет(XMLСхема, Имя, Синоним) Экспорт 
	
	ДвоичныеДанныеАрхивШаблона = ПолучитьМакет("УКО_ШаблонФайловВнешнегоОтчетаERF_ru");
	КаталогВыгрузки = УКО_ФайлыКлиентСервер_СоздатьВременныйКаталог();
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеАрхивШаблона.ОткрытьПотокДляЧтения());
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВыгрузки);
	ЧтениеZipФайла.Закрыть();
	
	ИмяОсновногоФайлаXMLОписание = УКО_ФайлыКлиентСервер_ПолноеИмя(КаталогВыгрузки, Имя + ".xml");					
	ИмяXMLФайлаМакетаОсновнаяСхема = СтрШаблон("%1\%2\Templates\ОсновнаяСхемаКомпоновкиДанных\Ext\Template.xml", КаталогВыгрузки, Имя);
	
	// Переименовываем файлы и папки согласно имени
	УКО_ФайлыКлиентСервер_ПереименоватьКаталог(УКО_ФайлыКлиентСервер_ПолноеИмя(КаталогВыгрузки, "ИмяФайлаВнешнейОбработки"),
												УКО_ФайлыКлиентСервер_ПолноеИмя(КаталогВыгрузки, Имя));
	ПереместитьФайл(УКО_ФайлыКлиентСервер_ПолноеИмя(КаталогВыгрузки, "ИмяФайлаВнешнейОбработки.xml"), ИмяОсновногоФайлаXMLОписание);
	
	// Заполняем данные основного файла
	ТекстОсновногоОписания = УКО_ФайлыКлиентСервер_ПрочитатьТекст(ИмяОсновногоФайлаXMLОписание);
	
	// 1 - Имя внешней обработки
	// 2 - Синоним русский
	// 3 - Комментарий
	// 4 - uuid
	// 5 - uuid (xr:ContainedObject)
	// 6 - uuid (xr:GeneratedType, TypeId)
	// 7 - uuid (xr:GeneratedType, ValueId)
	Комментарий = СтрШаблон(НСтр("ru = 'Сгенерирован автоматически (""%1"")'; en = 'Automatically generated (""%1"")'"), УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения());
	ТекстОсновногоОписания = СтрШаблон(ТекстОсновногоОписания, Имя, Синоним, Комментарий, Новый УникальныйИдентификатор,
										Новый УникальныйИдентификатор, Новый УникальныйИдентификатор, Новый УникальныйИдентификатор);
	
	УКО_ФайлыКлиентСервер_ЗаписатьТекст(ИмяОсновногоФайлаXMLОписание, ТекстОсновногоОписания);
	
	// Заменяем макет основная схема компоновки данных
	ЗаписьТекст = Новый ЗаписьТекста(ИмяXMLФайлаМакетаОсновнаяСхема);
	XMLОбъявление = "<?xml version=""1.0"" encoding=""UTF-8""?>";
	Если Не СтрНачинаетсяС(XMLСхема, XMLОбъявление) Тогда
		ЗаписьТекст.ЗаписатьСтроку(XMLОбъявление);
	КонецЕсли;
	ЗаписьТекст.Записать(XMLСхема);
	ЗаписьТекст.Закрыть();
	
	// Собираем внешний отчет конфигуратором
	КаталогБазы = УКО_ФайлыКлиентСервер_СоздатьВременныйКаталог();
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("erf");
	
	Соединение = СтрШаблон("/F %1", КаталогБазы);
	Команда = СтрШаблон("/LoadExternalDataProcessorOrReportFromFiles ""%1"" ""%2""", ИмяОсновногоФайлаXMLОписание, ИмяВыходногоФайла);
	УКО_Конфигуратор_ВыполнитьКоманду(Команда, Соединение);
	
	// УдалитьФайлы(КаталогВыгрузки);
	// УдалитьФайлы(ИмяВыходногоФайла);
	
	Возврат Новый ДвоичныеДанные(ИмяВыходногоФайла);
	
КонецФункции

Функция УКО_Конфигуратор_НайтиДочернийУзелDOMПоИмени(Узел, Имя)
	
	Результат = Неопределено;
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла = Имя Тогда 
			Результат = ДочернийУзел;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Конфигуратор_ЗначениеСвойстваУзлаDOM(Узел, Имя)

	Результат = Неопределено;
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла = Имя Тогда 
			Результат = ДочернийУзел.ТекстовоеСодержимое;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// Получает имя коллекции метаданных по имени объекта коллекции метаданных
//
// Параметры:
//  ИмяОбъектаКоллекции  - Строка - Имя объекта коллекции
//  Язык  - Строка - Язык
//
// Возвращаемое значение:
//   Строка - имя коллекции метаданных
//
Функция УКО_Метаданные_ИмяКоллекции(ИмяОбъектаКоллекции, Язык = "ru") Экспорт
	
	Если ИмяОбъектаКоллекции = "Справочник"
		ИЛИ ИмяОбъектаКоллекции = "Catalog" Тогда
		
		Возврат НСтр("ru = 'Справочники'; en = 'Catalogs'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "Документ"
		ИЛИ ИмяОбъектаКоллекции = "Document" Тогда
		
		Возврат НСтр("ru = 'Документы'; en = 'Documents'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "Перечисление"
		ИЛИ ИмяОбъектаКоллекции = "Enum" Тогда
		
		Возврат НСтр("ru = 'Перечисления'; en = 'Enums'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "Константа"
		ИЛИ ИмяОбъектаКоллекции = "Constant"Тогда
		
		Возврат НСтр("ru = 'Константы'; en = 'Constants'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "ЖурналДокументов"
		ИЛИ ИмяОбъектаКоллекции = "DocumentJournal" Тогда
		
		Возврат НСтр("ru = 'ЖурналыДокументов'; en = 'DocumentJournals'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "КритерийОтбора"
		ИЛИ ИмяОбъектаКоллекции = "FilterCriterion" Тогда
		
		Возврат НСтр("ru = 'КритерииОтбора'; en = 'FilterCriteria'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "ПланОбмена"
		ИЛИ ИмяОбъектаКоллекции = "ExchangePlan" Тогда
		
		Возврат НСтр("ru = 'ПланыОбмена'; en = 'ExchangePlans'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "Последовательность"
		ИЛИ ИмяОбъектаКоллекции = "Sequence" Тогда
		
		Возврат НСтр("ru = 'Последовательности'; en = 'Sequences'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "ПланВидовХарактеристик"
		ИЛИ ИмяОбъектаКоллекции = "ChartOfCharacteristicTypes" Тогда
		
		Возврат НСтр("ru = 'ПланыВидовХарактеристик'; en = 'ChartsOfCharacteristicTypes'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "ПланВидовРасчета"
		ИЛИ ИмяОбъектаКоллекции = "ChartOfCalculationTypes" Тогда
		
		Возврат НСтр("ru = 'ПланыВидовРасчета'; en = 'ChartsOfCalculationTypes'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "ПланСчетов"
		ИЛИ ИмяОбъектаКоллекции = "ChartOfAccounts" Тогда
		
		Возврат НСтр("ru = 'ПланыСчетов'; en = 'ChartsOfAccounts'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "РегистрСведений"
		ИЛИ ИмяОбъектаКоллекции = "InformationRegister" Тогда
		
		Возврат НСтр("ru = 'РегистрыСведений'; en = 'InformationRegisters'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "РегистрНакопления"
		ИЛИ ИмяОбъектаКоллекции = "AccumulationRegister" Тогда
		
		Возврат НСтр("ru = 'РегистрыНакопления'; en = 'AccumulationRegisters'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "РегистрБухгалтерии"
		ИЛИ ИмяОбъектаКоллекции = "AccountingRegister" Тогда
		
		Возврат НСтр("ru = 'РегистрыБухгалтерии'; en = 'AccountingRegisters'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "РегистрРасчета"
		ИЛИ ИмяОбъектаКоллекции = "CalculationRegister" Тогда
		
		Возврат НСтр("ru = 'РегистрыРасчета'; en = 'CalculationRegisters'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "БизнесПроцесс"
		ИЛИ ИмяОбъектаКоллекции = "BusinessProcess" Тогда
		
		Возврат НСтр("ru = 'БизнесПроцессы'; en = 'BusinessProcesses'", Язык);
		
	ИначеЕсли ИмяОбъектаКоллекции = "Задача"
		ИЛИ ИмяОбъектаКоллекции = "Task" Тогда
		
		Возврат НСтр("ru = 'Задачи'; en = 'Tasks'", Язык);
		
	КонецЕсли;
	
КонецФункции
// Получает имя объекта коллекции метаданных по имени полному имени метаданных
//
// Параметры:
//  ПолноеИмя  - Строка - Полное имя метаданных
//
// Возвращаемое значение:
//   Строка - имя объекта коллекции метаданных
//
Функция УКО_Метаданные_ИмяОбъектаКоллекцииПоПолномуИмени(ПолноеИмя) Экспорт
	
	Возврат УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ПолноеИмя, ".");
	
КонецФункции
// Получает имя объекта метаданных по имени полному имени метаданных
//
// Параметры:
//  ПолноеИмя  - Строка - Полное имя метаданных
//
// Возвращаемое значение:
//   Строка - имя объекта метаданных
//
Функция УКО_Метаданные_ИмяОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	Индекс = 1;
	УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ПолноеИмя, ".", Индекс);
	УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ПолноеИмя, ".", Индекс);
	
	Возврат УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ПолноеИмя, ".", Индекс);
	
КонецФункции
// Получает последние рабочие данные
//
// Возвращаемое значение:
//   ТаблицаЗначений - Последние рабочие данные
//
Функция УКО_Настройки_ПоследниеРабочиеДанные() Экспорт
	
	Результат= ХранилищеСистемныхНастроек.Загрузить(УКО_Настройки_КлючНастроекОбщий(), УКО_Настройки_КлючНастроекПоследниеДанные());
	
	Если Результат = Неопределено Тогда
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Тип");
		Результат.Колонки.Добавить("Имя");

	КонецЕсли;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("", "Перечисление.УКО_ТипыХраненияДанных.ПустаяСсылка");
	Соответствие.Вставить("Файл", "Перечисление.УКО_ТипыХраненияДанных.Файл");
	Соответствие.Вставить("Настройка", "Перечисление.УКО_ТипыХраненияДанных.Настройка");
	Для Каждого СтрокаТЗ Из Результат Цикл 
		
		СтрокаТЗ.Тип = Соответствие.Получить(СтрокаТЗ.Тип);

	КонецЦикла;

	Возврат Результат;
	
КонецФункции
// Сохраняет последние рабочие данные
//
// Параметры:
//   Значение - ТаблицаЗначений - Значение последних рабочих данных
//
Процедура УКО_Настройки_СохранитьПоследниеРабочиеДанные(Значение) Экспорт
	
	Результат = Значение;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Перечисление.УКО_ТипыХраненияДанных.ПустаяСсылка", "");
	Соответствие.Вставить("Перечисление.УКО_ТипыХраненияДанных.Файл", "Файл");
	Соответствие.Вставить("Перечисление.УКО_ТипыХраненияДанных.Настройка", "Настройка");
	Для Каждого СтрокаТЗ Из Результат Цикл 
		
		СтрокаТЗ.Тип = Соответствие.Получить(СтрокаТЗ.Тип);

	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить(УКО_Настройки_КлючНастроекОбщий(), УКО_Настройки_КлючНастроекПоследниеДанные(), Результат);

КонецПроцедуры
// Получает все последние данные
//
// Возвращаемое значение:
//   Структура - Набор последних данных
//    *Файлы - Массив(Строка) - Файлы
//    *Настройки - Массив(Строка) - Настройки
//    *Все - Массив(Структура) - Все
//
Функция УКО_Настройки_ПоследниеРабочиеДанныеВсе() Экспорт
	
	// Загружаем значение настройки
	ПоследниеРабочиеДанные = УКО_Настройки_ПоследниеРабочиеДанные();
	
	// Все
	ПоследниеРабочиеДанныеВсе = Новый Массив;
	
	НомерСтроки = 1;
	Для Каждого Строка Из ПоследниеРабочиеДанные Цикл 
		
		ПоследниеРабочиеДанныеВсе.Добавить(Новый Структура("Имя, Тип", Строка.Имя, Строка.Тип));
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки > 7 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследниеРабочиеФайлы = ПоследниеРабочиеДанные.Скопировать(Новый Структура("Тип", "Перечисление.УКО_ТипыХраненияДанных.Файл"),"Имя").ВыгрузитьКолонку("Имя");
	ПоследниеРабочиеНастройки = ПоследниеРабочиеДанные.Скопировать(Новый Структура("Тип", "Перечисление.УКО_ТипыХраненияДанных.Настройка"),"Имя").ВыгрузитьКолонку("Имя");
	
	Результат = Новый Структура;
	Результат.Вставить("Файлы", ПоследниеРабочиеФайлы);
	Результат.Вставить("Настройки", ПоследниеРабочиеНастройки);
	Результат.Вставить("Все", ПоследниеРабочиеДанныеВсе);
	
	Возврат Результат;
	
КонецФункции
// Добавляет в последние рабочие данные
//
// Параметры:
//   Имя - Строка - Имя
//   Тип - Перечисление.УКО_ТипыХраненияДанных - Тип хранения данных
//
Процедура УКО_Настройки_ДобавитьВПоследниеРабочиеДанные(Имя, Тип) Экспорт 
	
	ПоследниеРабочиеДанные = УКО_Настройки_ПоследниеРабочиеДанные();
	
	// Добавляем файл в начало списка
	УКО_Настройки_ДобавитьЭлементВПоследниеРабочиеДанные(ПоследниеРабочиеДанные, Имя, Тип);
	
	УКО_Настройки_СохранитьПоследниеРабочиеДанные(ПоследниеРабочиеДанные);
	
КонецПроцедуры
// Удаляет из последних рабочих данных
//
// Параметры:
//   Имя - Строка - Имя рабочих данных
//   Тип - Перечисление.УКО_ТипыХраненияДанных - Тип хранения данных
//
Процедура УКО_Настройки_УдалитьИзПоследнихРабочихДанных(Имя, Тип) Экспорт
	
	ПоследниеРабочиеДанные = УКО_Настройки_ПоследниеРабочиеДанные();
	
	НайденныеСтроки = ПоследниеРабочиеДанные.НайтиСтроки(Новый Структура("Тип, Имя", Тип, Имя));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		ПоследниеРабочиеДанные.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	УКО_Настройки_СохранитьПоследниеРабочиеДанные(ПоследниеРабочиеДанные);
	
КонецПроцедуры
// Получает наборы данных сохраненных в настройках
//
// Возвращаемое значение:
//   СписокЗначений	- Данные сохраненные в настройках
//
Функция УКО_Настройки_СписокСохраненныхДанных() Экспорт
	
	Возврат ХранилищеСистемныхНастроек.ПолучитьСписок(УКО_Настройки_КлючНастроекДанные());
	
КонецФункции
// Удаляет данные из хранилища системных настроек по имени
//
// Параметры:
//  Имя  - Строка - Имя настройки данных
//
Процедура УКО_Настройки_УдалитьДанные(Имя) Экспорт
	
	ХранилищеСистемныхНастроек.Удалить(УКО_Настройки_КлючНастроекДанные(), Имя, Неопределено);
	УКО_Настройки_УдалитьИзПоследнихРабочихДанных(Имя, "Перечисление.УКО_ТипыХраненияДанных.Настройка");
	
КонецПроцедуры
// Сохраняет данные в хранилище системных настроек
//
// Параметры:
//	Имя - Строка - Имя настройки
//	Данные - Данные - Данные
//
Процедура УКО_Настройки_СохранитьДанные(Имя, Данные) Экспорт
	
	ДвоичныеДанныеMCR = УКО_MCRФормат_ДвоичныеДанныеMCR(Данные);
	ЗаписываемыеДанные = Новый ХранилищеЗначения(ДвоичныеДанныеMCR, Новый СжатиеДанных(9));
	
	ХранилищеСистемныхНастроек.Сохранить(УКО_Настройки_КлючНастроекДанные(), Имя, ЗаписываемыеДанные);
	
КонецПроцедуры
// Читает данные из хранилища системных настроек
//
// Параметры:
//	Имя - Строка - Имя настройки
//	УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//	Данные - Данные
//
Функция УКО_Настройки_ЗагрузитьДанные(Имя, УникальныйИдентификатор) Экспорт
	
	Результат = ХранилищеСистемныхНастроек.Загрузить(УКО_Настройки_КлючНастроекДанные(), Имя);
	
	Если ТипЗнч(Результат) = Тип("ХранилищеЗначения") Тогда // Устаревший код (грузятся только Хранилище)
		Результат = УКО_MCRФорматВызовСервера_Прочитать(Результат.Получить(), УникальныйИдентификатор);
	Иначе
		УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки(Результат, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_Настройки_КлючНастроекОбщий() 
	
	Возврат "Управляемая консоль отчетов";
	
КонецФункции

Функция УКО_Настройки_КлючНастроекНастройки() 
	
	Возврат "Настройки";
	
КонецФункции

Функция УКО_Настройки_КлючНастроекДанные() 
	
	Возврат СтрШаблон("%1 (%2)", УКО_Настройки_КлючНастроекОбщий(), "Данные");
	
КонецФункции

Функция УКО_Настройки_КлючНастроекПоследниеДанные() 
	
	Возврат "Последние данные";
	
КонецФункции

Процедура УКО_Настройки_ДобавитьЭлементВПоследниеРабочиеДанные(ПоследниеРабочиеДанные, Имя, Тип)
	
	НайденныеСтроки = ПоследниеРабочиеДанные.НайтиСтроки(Новый Структура("Тип, Имя", Тип, Имя));
	Если НайденныеСтроки.Количество() Тогда
		
		Строка = НайденныеСтроки[0];
		ПоследниеРабочиеДанные.Сдвинуть(Строка, -ПоследниеРабочиеДанные.Индекс(Строка));
		
	Иначе 
		
		Строка = ПоследниеРабочиеДанные.Вставить(0);
		Строка.Тип = Тип;
		Строка.Имя = Имя;
		
	КонецЕсли;
	
	// Удалим лишние строки
	НайденныеСтроки = ПоследниеРабочиеДанные.НайтиСтроки(Новый Структура("Тип", Тип));
	Если НайденныеСтроки.Количество() > 7 Тогда
		ПоследниеРабочиеДанные.Удалить(НайденныеСтроки[НайденныеСтроки.ВГраница()]);
	КонецЕсли;
	
КонецПроцедуры
// Записывает значение настройки
//
// Параметры:
//  Имя  - Строка - Имя настройки
//  Значение  - Произвольный - Значение настройки
//
Процедура УКО_НастройкиПользователя_ЗаписатьЗначение(Имя, Знач Значение) Экспорт
	
	ЗаписываемоеЗначение = УКО_НастройкиПользователя_ПреобразованиеЗначенияНастройкиПередСохранением(Значение);
	ХранилищеСистемныхНастроек.Сохранить(УКО_НастройкиПользователя_КлючНастроек(), Имя, ЗаписываемоеЗначение);
	
КонецПроцедуры
// Обновляет значение настроек
//
// Параметры:
//  Настройки  - Структура - Настройки
//
Процедура УКО_НастройкиПользователя_ОбновитьЗначенияНастроек(Настройки) Экспорт
	
	Для Каждого ЭлементНастроек Из Настройки Цикл 
		
		ЗначениеНастройки = УКО_НастройкиПользователя_Значение(ЭлементНастроек.Ключ);
		Настройки[ЭлементНастроек.Ключ] = ЗначениеНастройки;
		
	КонецЦикла;
	
КонецПроцедуры
// Получает значение настройки
//
// Параметры:
//  Имя  - Строка - Имя настройки
//
// Возвращаемое значение:
//   Произвольный	- Значение настройки
//
Функция УКО_НастройкиПользователя_Значение(Имя) Экспорт
	
	Результат = ХранилищеСистемныхНастроек.Загрузить(УКО_НастройкиПользователя_КлючНастроек(), Имя);
	
	Если Результат = Неопределено Тогда
		Результат = УКО_НастройкиПользователя_ЗначениеПоУмолчанию(Имя);
	КонецЕсли;
	
	УКО_НастройкиПользователя_ПреобразованиеЗначенияНастройкиПередВозвратом(Результат);
	
	Возврат Результат;
	
КонецФункции
// Возвращает ключ настроек
//
// Возвращаемое значение:
//   Строка	- ключ настроек 
Функция УКО_НастройкиПользователя_КлючНастроек() 
	
	Возврат "Управляемая консоль отчетов  (настройки)";
	
КонецФункции

Функция УКО_НастройкиПользователя_ЗначениеПоУмолчанию(Имя)
	
	ЗначениеНастройкиПоУмолчанию = Новый Соответствие;
	ЗначениеНастройкиПоУмолчанию.Вставить("СокращенныйЗаголовокОсновногоОкна", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("СокращатьИменаПоследнихРабочихФайлов", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("ВыделятьОсобыеЗначенияВРезультате", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("ЧередованиеЦветовСтрокВРезультате", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("ИспользоватьКонструкторЗапросаТолстогоКлиента", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("ЯзыкПрограммирования", "");
	ЗначениеНастройкиПоУмолчанию.Вставить("МаксимальноеКоличествоВыводимыхСтрок", 1000);
	ЗначениеНастройкиПоУмолчанию.Вставить("ДанныеПриЗапуске", "Пустые");
	ЗначениеНастройкиПоУмолчанию.Вставить("ДанныеПриЗапускеИмяФайла", "");
	ЗначениеНастройкиПоУмолчанию.Вставить("ДанныеПриЗапускеИмяНастройки", "");
	ЗначениеНастройкиПоУмолчанию.Вставить("РасшифровкаТаблицЗначений", "Отключена");
	ЗначениеНастройкиПоУмолчанию.Вставить("ВопросТекстЗапросаБудетПотерянБольшеНеПоказывать", Ложь);
	ЗначениеНастройкиПоУмолчанию.Вставить("ВопросПередУдалениемСтрокДанныхБольшеНеПоказывать", Ложь);
	ЗначениеНастройкиПоУмолчанию.Вставить("ВопросПередУдалениемВнешнихИсточниковБольшеНеПоказывать", Ложь);
	ЗначениеНастройкиПоУмолчанию.Вставить("УведомлениеОЗавершенииДлительныхОпераций", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("ЗвуковойСигналПоОкончанииДлительныхОпераций", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("РазбиратьСтруктуруЗапроса", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("ОбратныйПорядокРезультатовПакетногоЗапроса", Истина);
	ЗначениеНастройкиПоУмолчанию.Вставить("АнализироватьПланЗапроса", Ложь);
	ЗначениеНастройкиПоУмолчанию.Вставить("КаталогЛоговТехнологическогоЖурнала", "");
	
	Возврат ЗначениеНастройкиПоУмолчанию.Получить(Имя);
	
КонецФункции

Функция УКО_НастройкиПользователя_ПреобразованиеЗначенияНастройкиПередСохранением(Значение)
	
	Преобразование = Новый Соответствие;
	Преобразование.Вставить("Перечисление.УКО_ТипыХраненияДанных.ПустаяСсылка", "Пустые");
	Преобразование.Вставить("Перечисление.УКО_ТипыХраненияДанных.Файл", "Файл");
	Преобразование.Вставить("Перечисление.УКО_ТипыХраненияДанных.Настройка", "Настройка");
	Преобразование.Вставить("Перечисление.УКО_РасшифровкаТаблицЗначений.Отключена", "Отключена");
	Преобразование.Вставить("Перечисление.УКО_РасшифровкаТаблицЗначений.Упрощенная", "Упрощенная");
	Преобразование.Вставить("Перечисление.УКО_РасшифровкаТаблицЗначений.Полная", "Полная");
	
	ПреобразованноеЗначение = Преобразование.Получить(Значение);
	Если ПреобразованноеЗначение <> Неопределено Тогда
		Значение = ПреобразованноеЗначение;
	КонецЕсли;
	
	Результат = Значение;
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_НастройкиПользователя_ПреобразованиеЗначенияНастройкиПередВозвратом(Значение)
	
	Преобразование = Новый Соответствие;
	Преобразование.Вставить("Пустые", "Перечисление.УКО_ТипыХраненияДанных.ПустаяСсылка");
	Преобразование.Вставить("Файл", "Перечисление.УКО_ТипыХраненияДанных.Файл");
	Преобразование.Вставить("Настройка", "Перечисление.УКО_ТипыХраненияДанных.Настройка");
	Преобразование.Вставить("Отключена", "Перечисление.УКО_РасшифровкаТаблицЗначений.Отключена");
	Преобразование.Вставить("Упрощенная", "Перечисление.УКО_РасшифровкаТаблицЗначений.Упрощенная");
	Преобразование.Вставить("Полная", "Перечисление.УКО_РасшифровкаТаблицЗначений.Полная");
	
	ПреобразованноеЗначение = Преобразование.Получить(Значение);
	Если ПреобразованноеЗначение <> Неопределено Тогда
		Значение = ПреобразованноеЗначение;
	КонецЕсли;
	
КонецПроцедуры
// Выполняет обработку строк
//
// Параметры:
//  ОбрабатываемыеДанные  - ТаблицаЗначений - Обрабатываемые данные
//  ОписаниеАлгоритма  - Структура - Описание алгоритма
//  ЗначенияПараметров  - Соответствие - Значения параметров
//  ОбрабатываемыеСтроки  - Массив - Обрабатываемые строки
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
// Возвращаемое значение:
//   СписокЗначений - Данные по обработке
//
Функция УКО_ОбработкаРезультата_Обработать(ОбрабатываемыеДанные, ОписаниеАлгоритма, ЗначенияПараметров, ОбрабатываемыеСтроки = Неопределено, АдресРезультатаВыполнения = Неопределено) Экспорт
	
	НачалоВыполнения = ТекущаяДатаСеанса();
	КоличествоСтрок = УКО_ОбработкаРезультата_КоличествоСтрок(ОбрабатываемыеДанные, ОбрабатываемыеСтроки);
	
	РезультатОбработки = Новый Соответствие;
	
	// Подготовка алгоритма и контекста
	Контекст = Новый Структура;
	Контекст.Вставить("Параметры", ЗначенияПараметров);
	Контекст.Вставить("Parametrs", ЗначенияПараметров);
	Контекст.Вставить("Строка");
	Контекст.Вставить("Row");
	АлгоритмРаботыСКонтекстом = УКО_ОбработкаРезультата_ПодготовитьАлгоритмРаботыСКонтекстом(Контекст, Ложь);
	
	ОбработкаВТранзакции = (ОписаниеАлгоритма.Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.НаВсе");
	ЗафиксироватьТранзакцию = Истина;
	Если ОбработкаВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Ошибок = 0;
	ПоследняяДата = Неопределено;	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл  
		
		НомерОбрабатываемойСтроки = УКО_ОбработкаРезультата_НомерОбрабатываемойСтроки(ОбрабатываемыеСтроки, НомерСтроки);
		
		ОбрабатываемаяСтрока = ОбрабатываемыеДанные[НомерОбрабатываемойСтроки - 1];
		Контекст.Строка = ОбрабатываемаяСтрока;
		Контекст.Row = ОбрабатываемаяСтрока;
		
		ОписаниеРезультата = УКО_ОбработкаРезультата_ОбработатьСтроку(ОбрабатываемаяСтрока, АлгоритмРаботыСКонтекстом, ОписаниеАлгоритма, Контекст);
		РезультатОбработки.Вставить(НомерОбрабатываемойСтроки, ОписаниеРезультата); 
		
		Если ОписаниеРезультата.Свойство("Ошибка") Тогда
			
			ЗафиксироватьТранзакцию = Ложь;
			Если ОписаниеАлгоритма.ПрерыватьПриОшибке Тогда
				Прервать;
			КонецЕсли;
			
			Ошибок = Ошибок + 1;
			
		КонецЕсли;
		
		Если ПоследняяДата <> ТекущаяДатаСеанса() Тогда
			
			Обработано = НомерСтроки - 1;
			ПрошлоВремени = ТекущаяДатаСеанса() - НачалоВыполнения;
			ПояснениеСостояния = УКО_ОбработкаРезультатаКлиентСервер_ПояснениеСостояния(Обработано, КоличествоСтрок, Ошибок, НачалоВыполнения, ПрошлоВремени, Ложь);
			Индикатор = Цел(Обработано * 100 / КоличествоСтрок);
			
			Если ЗначениеЗаполнено(АдресРезультатаВыполнения) Тогда
				
				// Возврат результата обработки пакета (только для фонового выполнения)
				УКО_ДлительныеОперации_СообщитьПрогресс(ПояснениеСостояния, Индикатор, РезультатОбработки);
				РезультатОбработки.Очистить();
				
			КонецЕсли;
			
			ПоследняяДата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбработкаВТранзакции Тогда
		
		Если ЗафиксироватьТранзакцию Тогда
			ЗафиксироватьТранзакцию();
		Иначе 
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	УКО_ДлительныеОперации_ВернутьРезультат(АдресРезультатаВыполнения, РезультатОбработки);
	
	Возврат РезультатОбработки;
	
КонецФункции
// Получает количество строк в обрабатываемом пакете
//
// Параметры:
//  ОбрабатываемыеДанные  - ТаблицаЗначений - Обрабатываемые данные
//  ОбрабатываемыеСтроки  - Соответствие - Набор номеров обрабатываемых строк
//
// Возвращаемое значение:
//   Число - Количество строк в обрабатываемом пакете
//
Функция УКО_ОбработкаРезультата_КоличествоСтрок(ОбрабатываемыеДанные, ОбрабатываемыеСтроки) Экспорт
	
	Если ОбрабатываемыеСтроки = Неопределено Тогда
		Результат = ОбрабатываемыеДанные.Количество();
	Иначе 
		Результат = ОбрабатываемыеСтроки.Количество();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает номер обрабатываемой строки пакета
//
// Параметры:
//  ОбрабатываемыеСтроки  - Неопределено, Массив - Обрабатываемые строки
//  НомерСтроки  - Число - Номер строки
//
// Возвращаемое значение:
//   Число - номер обрабатываемой строки пакета
//
Функция УКО_ОбработкаРезультата_НомерОбрабатываемойСтроки(ОбрабатываемыеСтроки, НомерСтроки) Экспорт
	
	Если ОбрабатываемыеСтроки = Неопределено Тогда
		Результат = НомерСтроки;
	Иначе 
		Результат = ОбрабатываемыеСтроки[НомерСтроки - 1];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает информацию пояснения по строке
//
// Параметры:
//  ОбрабатываемыеДанные  - ТаблицаЗначений - Обрабатываемые данные
//  НомерСтроки  - Число - Номер строки
//
// Возвращаемое значение:
//   Строка - Информация пояснение
//
Функция УКО_ОбработкаРезультата_ИнформацияПоСтроке(ОбрабатываемыеДанные, НомерСтроки) Экспорт
	
	Результат = Новый Массив;
	
	ВерхняяГраницаИндекса = Мин(ОбрабатываемыеДанные.Колонки.Количество() - 1, 2); // не более 3 колонок
	Для ИндексКолонки = 0 По ВерхняяГраницаИндекса Цикл
		
		Результат.Добавить(Строка(ОбрабатываемыеДанные[НомерСтроки - 1][ОбрабатываемыеДанные.Колонки[ИндексКолонки].Имя]));
		
	КонецЦикла;
	
	Возврат УКО_СтрокиКлиентСервер_Сократить(СтрСоединить(Результат, ", "), 100);
	
КонецФункции
// Обновляет результат обработки на форме
//
// Параметры:
//  Форма  - Форма - Форма
//  РезультатыОбработкиПакета  - Массив - Пакет с результатами обработки
//  ВремяОбработки  - Число - Время обработки
//
// Возвращаемое значение:
//   Структура - Результат
//		*ВремяОбработки - Число - время обработки, мс
//		*Ошибок - Число - Количество ошибок
//
Функция УКО_ОбработкаРезультата_ОбновитьРезультатНаФорме(Форма, РезультатыОбработкиПакета, ВремяОбработки = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатыОбработкиПакета) = Тип("Массив") Тогда
		
		Для Каждого ЭлементРезультат Из РезультатыОбработкиПакета Цикл 
			УКО_ОбработкаРезультата_ОбновитьРезультатНаФорме(Форма, ЭлементРезультат);
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОбрабатываемыеДанные = ПолучитьИзВременногоХранилища(Форма.АдресОбрабатываемыхДанных);
	РезультатыОбработки = ПолучитьИзВременногоХранилища(Форма.АдресРезультатовОбработки);
	
	ПапкаУспешно = Неопределено; ПапкаОшибка = Неопределено;
	ПапкиПоТекстуОшибки = Новый Соответствие;
	
	Для Каждого РезультатОбработки Из РезультатыОбработкиПакета Цикл 
		
		НомерСтроки = РезультатОбработки.Ключ;
		ОписаниеРезультата = РезультатОбработки.Значение;
		
		Если РезультатыОбработки.Получить(НомерСтроки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатыОбработки.Вставить(НомерСтроки, ОписаниеРезультата);
		
		ТекстОшибки = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ОписаниеРезультата, "Ошибка", "");
		
		// Загрузка сообщений
		Если ОписаниеРезультата.Свойство("Сообщения") Тогда
			
			Для Каждого Сообщение Из ОписаниеРезультата.Сообщения Цикл 
				НоваяСтрока = Форма.Сообщения.Добавить();
				НоваяСтрока.Текст = Сообщение;
				НоваяСтрока.НомерСтроки = НомерСтроки;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Родитель = ПапкиПоТекстуОшибки.Получить(ТекстОшибки);
			Если Родитель = Неопределено Тогда
				
				Если ПапкаОшибка = Неопределено Тогда
					ПапкаОшибка = УКО_ОбработкаРезультата_НайтиСоздатьГруппуВЖурнале(Форма.Журнал, НСтр("ru = 'Ошибка, не обработаны'; en = 'Error, not processed'"), Форма.Элементы.БиблиотекаКартинокУКО_ПредупреждениеВажное.Картинка, Истина);
				КонецЕсли;
				
				Родитель = УКО_ОбработкаРезультата_НайтиСоздатьГруппуВЖурнале(ПапкаОшибка, ТекстОшибки, Форма.Элементы.БиблиотекаКартинокУКО_ПредупреждениеВажное.Картинка);
				ПапкиПоТекстуОшибки.Вставить(ТекстОшибки, Родитель);
				
			КонецЕсли;
			
		Иначе
			
			Если ПапкаУспешно = Неопределено Тогда
				ПапкаУспешно = УКО_ОбработкаРезультата_НайтиСоздатьГруппуВЖурнале(Форма.Журнал, НСтр("ru = 'Обработанные успешно'; en = 'Processed successfully'"), Форма.Элементы.БиблиотекаКартинокУКО_ОбработанныеУспешно.Картинка);
			КонецЕсли;
			
			Родитель = ПапкаУспешно;
			
		КонецЕсли;
		
		НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Представление = СтрШаблон("№%1 (%2)", НомерСтроки, УКО_ОбработкаРезультата_ИнформацияПоСтроке(ОбрабатываемыеДанные, НомерСтроки));
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
	КонецЦикла;
	
	Ошибок = 0;
	Если ЗначениеЗаполнено(РезультатыОбработкиПакета) Тогда
		
		Для Каждого РезультатПоСтроке Из РезультатыОбработкиПакета Цикл 
			Если РезультатПоСтроке.Значение.Свойство("Ошибка") Тогда
				Ошибок = Ошибок + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВремяОбработки = 0 Тогда
		ВремяОбработки = 10;
	КонецЕсли;
	
	Возврат Новый Структура("ВремяОбработки, Ошибок", ВремяОбработки, Ошибок);

КонецФункции
// Обработать данные журнала
//
// Параметры:
//  ДеревоЖурнала  - Дерево - Дерево журнала
//
Процедура УКО_ОбработкаРезультата_ОбработатьДанныеЖурнала(ДеревоЖурнала) Экспорт
	
	Для Каждого СтрокаУровень1 Из ДеревоЖурнала.Строки Цикл 
		
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл 
			
			УКО_ОбработкаРезультата_СортироватьДеревоПоНомеру(СтрокаУровень2);
			
		КонецЦикла;
		
		УКО_ОбработкаРезультата_СортироватьДеревоПоНомеру(СтрокаУровень1);
		
	КонецЦикла;
	
КонецПроцедуры
// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, 
// обрабатывая строку результата - таблицы значений
//
// Параметры:
//  ОбрабатываемаяСтрока  - СтрокаТаблицыЗначений - Обрабатываемая строка таблицы значений
//  ОписаниеАлгоритма  - Структура - Описание алгоритма
//  Параметры  - Структура - Значения параметров алгоритма
//
// Возвращаемое значение:
//   Структура - Описание результата
//		*Ошибка - Строка - Текст ошибки
//		*Сообщения - Массив - Сообщения
//
Функция УКО_ОбработкаРезультата_ОбработатьСтроку(ОбрабатываемаяСтрока, АлгоритмРаботыСКонтекстом, ОписаниеАлгоритма, Контекст)
	
	ПолучитьСообщенияПользователю(Истина);
	
	Результат = Новый Структура;
	ОбработкаВТранзакции = (ОписаниеАлгоритма.Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.ПоСтроке");
	
	Если ОбработкаВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Ошибка = УКО_ОбщегоНазначения_ВыполнитьСКонтекстом(АлгоритмРаботыСКонтекстом, ОписаниеАлгоритма.Код, Контекст, Ложь);
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Результат.Вставить("Ошибка", Ошибка);
	КонецЕсли;
	
	Если ОбработкаВТранзакции Тогда
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			ОтменитьТранзакцию();
		Иначе 
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	// Собираем сообщения пользователю
	Сообщения = Новый Массив;
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Для Каждого ОписаниеСообщения Из СообщенияПользователю Цикл 
		Сообщения.Добавить(ОписаниеСообщения.Текст);
	КонецЦикла;
	Если ЗначениеЗаполнено(Сообщения) Тогда
		Результат.Вставить("Сообщения", Сообщения);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция УКО_ОбработкаРезультата_ПодготовитьАлгоритмРаботыСКонтекстом(Контекст, БезопасныйРежим = Истина)
	
	СтрокиКода = Новый Массив;
	Для Каждого ЭлементКонтекста Из Контекст Цикл 
		СтрокиКода.Добавить(СтрШаблон("%1 = Контекст.%1;", ЭлементКонтекста.Ключ));
	КонецЦикла;
	
	СтрокиКода.Добавить("");
	
	Если БезопасныйРежим Тогда
		УстановитьБезопасныйРежим(Истина);
		СтрокиКода.Добавить("УстановитьБезопасныйРежим(Истина);");
	КонецЕсли;
	
	СтрокиКода.Добавить("Попытка
	|	Выполнить Алгоритм;
	|Исключение
	|	ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	|КонецПопытки;");
	
	Возврат СтрСоединить(СтрокиКода, Символы.ПС);
	
КонецФункции

Функция УКО_ОбработкаРезультата_НоваяГруппаВЖурнале(СтрокаРодитель, Текст, Картинка, Вставить = Ложь)
	
	Если Вставить Тогда
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Вставить(0);
	Иначе
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	НоваяСтрока.Картинка = Картинка;
	НоваяСтрока.Текст = Текст;
	НоваяСтрока.ЭтоГруппа = Истина;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция УКО_ОбработкаРезультата_НайтиСоздатьГруппуВЖурнале(Родитель, Текст, Картинка, Вставить = Ложь)
	
	Результат = Неопределено;
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл 
		
		Если Строка.Текст = Текст
				И Строка.Картинка = Картинка
				И Строка.ЭтоГруппа = Истина Тогда
			Результат = Строка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат = Неопределено Тогда
		Результат = УКО_ОбработкаРезультата_НоваяГруппаВЖурнале(Родитель, Текст, Картинка, Вставить);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_ОбработкаРезультата_СортироватьДеревоПоНомеру(Строка)
	
	Если Строка.ЭтоГруппа Тогда
		Строка.Строки.Сортировать("НомерСтроки");
	КонецЕсли;
	
КонецПроцедуры
// Подготавливает данные для сравнения
//
// Параметры:
//	ДанныеЭталон - Данные - Данные эталон
//	ДанныеНовый - Данные - Данные новый
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
Процедура УКО_ОбщегоНазначения_ПодготовитьДанныеДляСравнения(ДанныеЭталон, ДанныеНовый, АдресРезультатаВыполнения) Экспорт
	
	Шаг = 1; КоличествоШагов = 2;
	
	Результат = Новый Структура;
	
	УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса (НСтр("ru = 'Получение результата Эталон'; en = 'Obtaining the result of the standard'"), Шаг, КоличествоШагов));
	Результат.Вставить("РезультатЭталон", УКО_ОбщегоНазначения_ПодготовитьРезультатДляСравнения(ДанныеЭталон));
	
	УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса (НСтр("ru = 'Получение результата Новый'; en = 'Getting a New result'"), Шаг, КоличествоШагов));
	Результат.Вставить("РезультатНовый", УКО_ОбщегоНазначения_ПодготовитьРезультатДляСравнения(ДанныеНовый));
	
	УКО_ДлительныеОперации_ВернутьРезультат(АдресРезультатаВыполнения, Результат);
	
КонецПроцедуры
// Получает код языка программирования
//
// Возвращаемое значение:
//   Строка - код языка программирования
//
Функция УКО_ОбщегоНазначения_КодЯзыкаПрограммирования() Экспорт
	
	КодЯзыка = УКО_НастройкиПользователя_Значение("ЯзыкПрограммирования");
	Если ПустаяСтрока(КодЯзыка) Тогда
		
		ТекущийЯзык = ТекущийЯзык();
		Если ТипЗнч(ТекущийЯзык) = Тип("ОбъектМетаданных") Тогда
			КодЯзыка = ТекущийЯзык.КодЯзыка;
		Иначе
			КодЯзыка = ТекущийЯзык;
		КонецЕсли;
		
		Если КодЯзыка <> УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() И КодЯзыка <> УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Тогда
			КодЯзыка = УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодЯзыка;
	
КонецФункции
// Получает код основного языка конфигурации
//
// Возвращаемое значение:
//   Строка - код языка программирования
//
Функция УКО_ОбщегоНазначения_КодЯзыкаКонфигурации() Экспорт
	
	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;

КонецФункции
// Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
// для вызова оператора Выполнить используется переход в безопасный режим
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате
//                       <имя объекта>.<имя процедуры>, где <имя объекта> - это общий модуль
//  Параметры  - Массив - параметры передаются в экспортную процедуру в порядке расположения элементов массива.
//
Процедура УКО_ОбщегоНазначения_ВыполнитьМетод(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	
	СписокПараметров = Новый Массив;
	Для Счетчик = 0 По Параметры.ВГраница() Цикл 
		СписокПараметров.Добавить(СтрШаблон("Параметры[%1]", Счетчик));
	КонецЦикла;
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить ИмяМетода + "(" + СтрСоединить(СписокПараметров, ", ") + ")";
	
КонецПроцедуры
// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия с заданным контекстом
//
// Параметры:
//  АлгоритмРаботыСКонтекстом  - Строка - Алгоритм (работы с контекстом) на встроенном языке 1С:Предприятия.
//  Алгоритм  - Строка - Алгоритм на встроенном языке 1С:Предприятия.
//  Контекст  - Структура - Параметры контекста
//  БезопасныйРежим  - Булево - Безопасный режим
//
// Возвращаемое значение:
//   Строка - Текст ошибки
//
Функция УКО_ОбщегоНазначения_ВыполнитьСКонтекстом(АлгоритмРаботыСКонтекстом, Алгоритм, Контекст, БезопасныйРежим = Истина) Экспорт
	
	ТекстОшибки = "";
	Выполнить АлгоритмРаботыСКонтекстом;
	
	Возврат ТекстОшибки;

КонецФункции
// Вычисляет результат выполнения выражения
//
// Параметры:
//  Алгоритм  - Строка - алгоритм на встроенном языке 1С:Предприятия.
//
// Возвращаемое значение:
//   Произвольный - Результат вычисления выражения
//
Функция УКО_ОбщегоНазначения_ВычислитьРезультатВыражениеВБезопасномРежиме(Алгоритм) Экспорт
	
	Результат = Неопределено;
	Result = Неопределено;
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить Алгоритм;
	
	Если УКО_ОбщегоНазначения_КодЯзыкаПрограммирования() = УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Тогда
		Результат = Result;
	КонецЕсли;

	Возврат Результат;

КонецФункции
// Возвращает индексируется колонка таблицы значений или нет (т.к. у ИндексыКоллекции нет метода Найти)
// Параметры:
//  ТаблицаЗначений  - ТаблицаЗначений - Таблица значений
//  ИмяКолонки  - Строка - Имя колонки
//
// Возвращаемое значение:
//   Булево - Истина, колонка индексируется; иначе Ложь
//
Функция УКО_ОбщегоНазначения_КолонкаТаблицыЗначенийИндексируется(ТаблицаЗначений, ИмяКолонки) Экспорт
	
	Для Каждого ИндексируемаяКолонка Из ТаблицаЗначений.Индексы Цикл 
		
		Если Строка(ИндексируемаяКолонка) = ИмяКолонки Тогда 
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
// Возвращает имя базы на сервере СУБД
//
// Возвращаемое значение:
//   Строка	- имя базы, Неопределено - файловая база
//
Функция УКО_ОбщегоНазначения_ИмяИнформационнойБазы() Экспорт
	
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	
	Индекс = 1;
	Если УКО_СтрокиКлиентСервер_РазборНайтиТекст(СтрокаПодключения, "Ref=", Индекс) Тогда 
		
		СимволБлока = УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(СтрокаПодключения, Индекс);
		Возврат УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(СтрокаПодключения, СимволБлока, Индекс);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
// Получает подсказку к описанию типа
//
// Параметры:
//   Имя - Строка - Имя
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//   УчитыватьNull - Булево - Учитывать Null
//
// Возвращаемое значение:
//   Строка	- Подсказка описания типа
//
Функция УКО_ОбщегоНазначения_ПодсказкаОписанияТипа(Имя, ОписаниеТипов, УчитыватьNull = Ложь) Экспорт
	
	ШаблонПодсказки = НСтр("ru = '%1
	|Тип(ы):
	|%2'; en = '%1
	|Type(s):
	|%2'");
	
	Возврат СтрШаблон(ШаблонПодсказки, Имя, УКО_ОбщегоНазначения_ПредставлениеОписанияТипов(ОписаниеТипов, УчитыватьNull));
	
КонецФункции
// Получает ссылку по внутреннему идентификатору в формате SQL - Битой ссылки
//
// Параметры:
//  UID  - Строка - UID в формате (слитно)
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Булево - Истина, ссылочный тип
//
Функция УКО_ОбщегоНазначения_СсылкаПоВнутреннемуUID(UID, Тип) Экспорт
	
	ПустаяСсылка = Новый (Тип);
	ТекстСсылкиВнутр = СтрЗаменить(ЗначениеВСтрокуВнутр(ПустаяСсылка), УКО_СтрокиКлиентСервер_ПустойUID(), UID);
	
	Попытка
		Результат = ЗначениеИзСтрокиВнутр(ТекстСсылкиВнутр);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
// Получает ссылку по уникальному идентификатору
//
// Параметры:
//  УникальныйИдентификатор  - УникальныйИдентификатор - Уникальный идентификатор
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Произвольный - Искомая ссылка
//
Функция УКО_ОбщегоНазначения_СсылкаПоУникальномуИдентификатору(УникальныйИдентификатор, Тип) Экспорт 
	
	УникальныйИдентификаторСтрока = Строка(УникальныйИдентификатор);
	Блок1 = Сред(УникальныйИдентификаторСтрока, 1, 8);
	Блок2 = Сред(УникальныйИдентификаторСтрока, 10, 4);
	Блок3 = Сред(УникальныйИдентификаторСтрока, 15, 4);
	Блок4 = Сред(УникальныйИдентификаторСтрока, 20, 4);
	Блок5 = Сред(УникальныйИдентификаторСтрока, 25, 12);
	
	ВнутреннийUID = Блок4 + Блок5 + Блок3 + Блок2 + Блок1;
	Возврат УКО_ОбщегоНазначения_СсылкаПоВнутреннемуUID(ВнутреннийUID, Тип);
	
КонецФункции
// Вычисляет результат выполнения выражения
//
// Параметры:
//  Выражение  - Строка - Алгоритм на встроенном языке 1С:Предприятия.
//  БезопасныйРежим  - Булево - Признак включения безопасного режима
//
// Возвращаемое значение:
//   Произвольный, Структура - Результат вычисления выражения, в случае ошибки возвращается структура с текстом ошибки
//
Функция УКО_ОбщегоНазначения_ВычислитьВыражение(Выражение, БезопасныйРежим = Истина) Экспорт
	
	Если БезопасныйРежим Тогда
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		Результат = Вычислить(Выражение);
	Исключение
		Результат = Новый Структура("Ошибка", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция УКО_ОбщегоНазначения_ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции
// Преобразует XML-строку в значение
// См. также ЗначениеВСтрокуXML.
//
// Параметры:
//  СтрокаXML - Строка - XML-строка, с сериализованным объектом..
//
// Возвращаемое значение:
//  Произвольный - значение, полученное из переданной XML-строки.
//
Функция УКО_ОбщегоНазначения_ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

Функция УКО_ОбщегоНазначения_ПредставлениеОписанияТипов(ОписаниеТипов, УчитыватьNull = Ложь)
	
	ВозвращаемаяСтрока = "";
	КоличествоДобавленныхТипов = 0;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если Тип = Тип("Null") И Не УчитыватьNull Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоличествоДобавленныхТипов < 10 Тогда
			ВозвращаемаяСтрока = ВозвращаемаяСтрока + УКО_ОбщегоНазначения_ПредставлениеТипа(ОписаниеТипов, Тип) + Символы.ПС;
		КонецЕсли;
			
		КоличествоДобавленныхТипов = КоличествоДобавленныхТипов + 1;
		
	КонецЦикла;
	
	Если КоличествоДобавленныхТипов > 10 Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + СтрШаблон(НСтр("ru = '... Всего (%1)'; en = '... Total (%1)'"), КоличествоДобавленныхТипов);
	КонецЕсли;
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции

Функция УКО_ОбщегоНазначения_ПредставлениеТипа(ОписаниеТипов, Тип)
	
	Если Тип = Тип("Строка") Тогда
		
		КвалификаторыСтроки = ОписаниеТипов.КвалификаторыСтроки;
		Если КвалификаторыСтроки.Длина = 0 Тогда //Строка неограниченной длины
			
			ВозвращаемаяСтрока = НСтр("ru = 'Строка (неограниченная длина)'; en = 'String (unlimited length)'");
			
		Иначе
			
			Шаблон = НСтр("ru = 'Строка (%1, %2)'; en = 'String (%1, %2)'");
			Если КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
				Тип = НСтр("ru = 'фиксированная'; en = 'fixed'");
			Иначе
				Тип = НСтр("ru = 'переменная'; en = 'variable'");
			КонецЕсли;
			ВозвращаемаяСтрока = СтрШаблон(Шаблон, КвалификаторыСтроки.Длина, Тип);
			
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		ВозвращаемаяСтрока = СтрШаблон(НСтр("ru = 'Дата (%1)'; en = 'Date (%1)'"), ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		КвалификаторыЧисла = ОписаниеТипов.КвалификаторыЧисла;
		
		Если КвалификаторыЧисла = ДопустимыйЗнак.Любой Тогда
			ДопСтрокаЗнак = "-/+";
		Иначе
			ДопСтрокаЗнак = "+";
		КонецЕсли;
		
		ВозвращаемаяСтрока = СтрШаблон(НСтр("ru = 'Число %1(%2.%3)'; en = 'Number %1(%2.%3)'"), ДопСтрокаЗнак, КвалификаторыЧисла.Разрядность, КвалификаторыЧисла.РазрядностьДробнойЧасти);
		
	ИначеЕсли Тип = Тип("РезультатЗапроса") ИЛИ Тип = Тип("ТаблицаЗначений") Тогда
		
		ВозвращаемаяСтрока = НСтр("ru = 'ТаблицаЗначений'; en = 'ValueTable'");
		
	ИначеЕсли Тип = Тип("ВидДвиженияНакопления") ИЛИ Тип = Тип("Тип") ИЛИ Тип = Тип("ВидСчета") ИЛИ Тип = Тип("ХранилищеЗначения") 
		ИЛИ Тип = Тип("УникальныйИдентификатор") ИЛИ Тип = Тип("Булево") ИЛИ Тип = Тип("МоментВремени") Тогда
		
		ВозвращаемаяСтрока = Тип;
		
	ИначеЕсли Тип = Тип("ОписаниеТипов") Тогда
		
		ВозвращаемаяСтрока = НСтр("ru = 'ОписаниеТипов'; en = 'TypeDescription'");
		
	Иначе
		
		НайденныеМетаданные = Метаданные.НайтиПоТипу(Тип);
		Если НайденныеМетаданные = Неопределено Тогда
			ВозвращаемаяСтрока = Строка(Тип);
		Иначе
			ВозвращаемаяСтрока = НайденныеМетаданные.ПолноеИмя();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции	

Функция УКО_ОбщегоНазначения_ПодготовитьРезультатДляСравнения(Данные)
	
	Если Данные.Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		Возврат УКО_Запрос_ПолучитьРезультат(Данные, "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение", Истина);
		
	ИначеЕсли УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(Данные.Тип) Тогда
			
		Возврат УКО_СКД_ПолучитьРезультат(Данные, "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Выполнение");
		
	КонецЕсли;
	
КонецФункции
// Возвращает строку имени элемента данных для запроса из отладки
//
// Параметры:
//	Объект - СхемаКомпоновкиДанных, Запрос, ПостроительЗапроса, ПостроительОтчета, ДинамическийСписок, МакетКомпоновкиДанных - Объект отладки
//	ТипЭлементов - Перечисление.УКО_ЭлементыДанных - Тип элементов
//	ТипХранения - Перечисление.УКО_ТипыХраненияДанных - Тип хранения данных
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//   Строку - Имя данных используемое при загрузке данных из отладки
//
Функция УКО_ОтложеннаяОтладка_СохранитьДанные(Объект, ТипЭлементов, ТипХранения, ДополнительныеПараметры) Экспорт
	
	ТекстОшибки = "";
	Если ТипЭлементов = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		Данные = УКО_ОтложеннаяОтладка_ДанныеЗапросаИзОбъекта(Объект, ТекстОшибки);
	Иначе
		Данные = УКО_ОтложеннаяОтладка_ДанныеСКДИзОбъекта(Объект, ДополнительныеПараметры.Настройки, ДополнительныеПараметры.ВнешниеНаборыДанных, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Результат = ТекстОшибки;
		
	Иначе
		
		Имя = ДополнительныеПараметры.Имя;
		Если Имя = Неопределено Тогда
			Имя = УКО_ОтложеннаяОтладкаКлиентСервер_ИмяДанных(ТипЭлементов);
		КонецЕсли;
		
		Если ТипХранения = "Перечисление.УКО_ТипыХраненияДанных.Файл" Тогда
			
			Путь = ДополнительныеПараметры.Путь;
			РазделительПути = ПолучитьРазделительПутиСервера();
			Если НЕ СтрЗаканчиваетсяНа(Путь, РазделительПути) Тогда
				Путь = Путь + РазделительПути;
			КонецЕсли;
			Имя = СтрШаблон("%1%2.%3", Путь, Имя, УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных());
			УКО_MCRФормат_ЗаписатьДанныеВФайл(Данные, Имя);
			
		ИначеЕсли ТипХранения = "Перечисление.УКО_ТипыХраненияДанных.Настройка" Тогда 
			
			УКО_Настройки_СохранитьДанные(Имя, Данные);
			
		КонецЕсли;
		
		УКО_Настройки_ДобавитьВПоследниеРабочиеДанные(Имя, ТипХранения);
		
		Результат = НСтр("ru = 'Сохранено успешно'; en = 'Saved successfully'");
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция УКО_ОтложеннаяОтладка_ДанныеЗапросаИзОбъекта(Объект, ТекстОшибки)
	
	Результат = Новый Массив;
	Ошибки = Новый Массив;
	
	Если ТипЗнч(Объект) = Тип("ДинамическийСписок") Тогда
		
		Если Не Объект.ПроизвольныйЗапрос Тогда
			
			Ошибки.Добавить(НСтр("ru = 'Не удалось загрузить данные динамического списка (флаг ПроизвольныйЗапрос не установлен)'; en = 'Dynamic list data could not be loaded (CustomQuery flag is not set)'"));
			
		КонецЕсли;
		
	ИначеЕсли НЕ УКО_ОтложеннаяОтладка_ЭтоДопустимыйТипОбъектаПолученияЗапроса(Объект) Тогда
		
		Ошибки.Добавить(НСтр("ru = 'Неверный тип параметра, ожидаются типы Запрос, МакетКомпоновкиДанных, ДинамическийСписок, ПостроительЗапроса, ПостроительОтчета'; en = 'Invalid parameter type, Query, DataCompositionTemplate, DynamicListQueryBuilder, ReportBuilder'"));
		
	Иначе
		
		Если ТипЗнч(Объект) = Тип("МакетКомпоновкиДанных") Тогда
			
			Для Каждого НаборДанных Из Объект.НаборыДанных Цикл 
				
				Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
					
					ВременныеТаблицы = Новый Соответствие;
					Параметры = Новый Соответствие;
					Для Каждого ЗначениеПараметра Из Объект.ЗначенияПараметров Цикл 
						Параметры.Вставить(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
					КонецЦикла;
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("Параметры", Параметры);
					ДополнительныеПараметры.Вставить("ВременныеТаблицы", ВременныеТаблицы);
					ЭлементДанныхЗапрос = УКО_ОтложеннаяОтладка_НовыйЭлементДанных("Перечисление.УКО_ЭлементыДанных.Запрос", НаборДанных.Имя, НаборДанных.Запрос, ДополнительныеПараметры);
					
					Результат.Добавить(ЭлементДанныхЗапрос);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// Получаем текст запроса
			Если ТипЗнч(Объект) = Тип("ДинамическийСписок") Тогда
				Текст = Объект.ТекстЗапроса;
			Иначе 
				Текст = Объект.Текст;
			КонецЕсли;
			
			// Загрузка временных таблиц
			ВременныеТаблицы = Новый Соответствие;
			Если ТипЗнч(Объект) = Тип("Запрос") Тогда
				
				Если Объект.МенеджерВременныхТаблиц <> Неопределено Тогда
					
					ЛимитЯчеек = УКО_ОтложеннаяОтладка_ЛимитЯчеекВнешнихИсточников();
					Для Каждого ВременнаяТаблица Из Объект.МенеджерВременныхТаблиц.Таблицы Цикл
						
						ТаблицаЗначений = ВременнаяТаблица.ПолучитьДанные().Выгрузить();
						КоличествоЯчеек = ВременнаяТаблица.Колонки.Количество() * ТаблицаЗначений.Количество();
						
						Если КоличествоЯчеек > ЛимитЯчеек Тогда // Проверим лимит ячеек
							
							Ошибки.Добавить(СтрШаблон(НСтр("ru = 'Слишком большой объем данных таблица: %1, ячеек %2 (лимит: %3)'; en = 'Too much data to table: %1, cells %2 (limit: %3)'"),
												ВременнаяТаблица.ПолноеИмя, УКО_СтрокиКлиентСервер_ЧислоВСтроку(КоличествоЯчеек), УКО_СтрокиКлиентСервер_ЧислоВСтроку(ЛимитЯчеек)));

						КонецЕсли;
						
						ОписаниеВнешнегоИсточника = УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(ВременнаяТаблица.ПолноеИмя, 
						НСтр("ru = 'Значение'; en = 'Value'"), ТаблицаЗначений);
						ВременныеТаблицы.Вставить(Новый УникальныйИдентификатор, ОписаниеВнешнегоИсточника);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Загрузка параметров
			Параметры = Новый Соответствие;
			Если ТипЗнч(Объект) = Тип("ДинамическийСписок") Тогда
				
				Для Каждого ПараметрЗапроса Из Объект.Параметры.Элементы Цикл
					Параметры.Вставить(Строка(ПараметрЗапроса.Параметр), ПараметрЗапроса.Значение);
				КонецЦикла;
				
			Иначе
				
				Для Каждого ПараметрЗапроса Из Объект.Параметры Цикл
					
					ЗначениеПараметра = ПараметрЗапроса.Значение;
					Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Граница") Тогда
						ЗначениеПараметра = УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра("Перечисление.УКО_СложныйПараметрЗапроса.Граница", УКО_Запрос_ОписаниеИзГраницы(ЗначениеПараметра));
					КонецЕсли;
					
					Параметры.Вставить(ПараметрЗапроса.Ключ, ЗначениеПараметра);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Параметры", Параметры);
			ДополнительныеПараметры.Вставить("ВременныеТаблицы", ВременныеТаблицы);
			ЭлементДанныхЗапрос = УКО_ОтложеннаяОтладка_НовыйЭлементДанных("Перечисление.УКО_ЭлементыДанных.Запрос", НСтр("ru = 'Запрос'; en = 'Query'"), Текст, ДополнительныеПараметры);
			
			Результат.Добавить(ЭлементДанныхЗапрос);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(Ошибки, "; ");
	
	Возврат Результат;
	
КонецФункции

Функция УКО_ОтложеннаяОтладка_ДанныеСКДИзОбъекта(Схема, Настройки, ВнешниеНаборыДанных, ТекстОшибки)
	
	Результат = Новый Массив;
	
	Ошибки = Новый Массив;
	Если ТипЗнч(Схема) <> Тип("СхемаКомпоновкиДанных") Тогда
		Ошибки.Добавить(НСтр("ru = 'Неверный тип параметра Схема ожидается (СхемаКомпоновкиДанных)'; en = 'Invalid parameter type Scheme is expected (DataCompositionSchema)'"));
	КонецЕсли;
	
	Если Настройки <> Неопределено И ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Ошибки.Добавить(НСтр("ru = 'Неверный тип параметра Настройки ожидается (НастройкиКомпоновкиДанных)'; en = 'Invalid parameter type Settings is expected (DataCompositionSettings)'"));
	КонецЕсли;
	
	Если ВнешниеНаборыДанных <> Неопределено И ТипЗнч(ВнешниеНаборыДанных) <> Тип("Структура") Тогда
		Ошибки.Добавить(НСтр("ru = 'Неверный тип параметра ВнешниеНаборыДанных ожидается (Структура)'; en = 'Invalid parameter type ExternalSource is expected (Structure)'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		
		ВнешниеИсточники = Новый Соответствие;
		
		Если ВнешниеНаборыДанных <> Неопределено Тогда
			
			ЛимитЯчеек = УКО_ОтложеннаяОтладка_ЛимитЯчеекВнешнихИсточников();
			Для Каждого ВнешнийИсточник Из ВнешниеНаборыДанных Цикл
				
				ТаблицаЗначений = ВнешнийИсточник.Значение;
				КоличествоЯчеек = ТаблицаЗначений.Колонки.Количество() * ТаблицаЗначений.Количество();
				
				Если КоличествоЯчеек > ЛимитЯчеек Тогда // Проверим лимит ячеек
					
					Ошибки.Добавить(СтрШаблон(НСтр("ru = 'Слишком большой объем данных таблица: %1, ячеек %2 (лимит: %3)'; en = 'Too much data to table: %1, cells %2 (limit: %3)'"),
															ВнешниеНаборыДанных.Ключ, УКО_СтрокиКлиентСервер_ЧислоВСтроку(КоличествоЯчеек), УКО_СтрокиКлиентСервер_ЧислоВСтроку(ЛимитЯчеек)));
					
				КонецЕсли;
				
				ОписаниеВнешнегоИсточника = УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(ВнешнийИсточник.Ключ, НСтр("ru = 'Значение'; en = 'Value'"), ТаблицаЗначений);
				ВнешниеИсточники.Вставить(Новый УникальныйИдентификатор, ОписаниеВнешнегоИсточника);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВнешниеИсточники", ВнешниеИсточники);
		ЭлементДанныхСхемаКомпоновкиДанных = УКО_ОтложеннаяОтладка_НовыйЭлементДанных("Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных", "Схема", УКО_СКД_XMLТекст(Схема), ДополнительныеПараметры);
		
		Если Настройки <> Неопределено Тогда
			
			ЭлементДанныхВариантНастроек = УКО_ОтложеннаяОтладка_НовыйЭлементДанных("Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД", "Вариант", УКО_СКД_XMLТекст(Настройки));
			
			ЭлементыСхемыКомпоновкиДанных = Новый Массив;
			ЭлементыСхемыКомпоновкиДанных.Добавить(ЭлементДанныхВариантНастроек);
			ЭлементДанныхСхемаКомпоновкиДанных.Вставить("Elements", ЭлементыСхемыКомпоновкиДанных);
			
		КонецЕсли;
		
		Результат.Добавить(ЭлементДанныхСхемаКомпоновкиДанных);
		
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(Ошибки, "; ");
	
	Возврат Результат;
	
КонецФункции

Функция УКО_ОтложеннаяОтладка_НовыйЭлементДанных(Тип, Имя, Текст, ДополнительныеПараметры = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Name", Имя);
	Результат.Вставить("Type", Тип);
	Результат.Вставить("Text", Текст);
	
	Если Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		Результат.Вставить("ExternalSources", ДополнительныеПараметры.ВременныеТаблицы);
		Результат.Вставить("Parameters", ДополнительныеПараметры.Параметры);
	ИначеЕсли Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		Результат.Вставить("ExternalSources", ДополнительныеПараметры.ВнешниеИсточники);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_ОтложеннаяОтладка_ЭтоДопустимыйТипОбъектаПолученияЗапроса(Объект)
	
	Возврат ТипЗнч(Объект) = Тип("ДинамическийСписок")
				ИЛИ ТипЗнч(Объект) = Тип("Запрос")
				ИЛИ ТипЗнч(Объект) = Тип("ПостроительЗапроса")
				ИЛИ ТипЗнч(Объект) = Тип("ПостроительОтчета")
				ИЛИ ТипЗнч(Объект) = Тип("МакетКомпоновкиДанных");
	
КонецФункции

Функция УКО_ОтложеннаяОтладка_ЛимитЯчеекВнешнихИсточников()
	
	Возврат 500000;
	
КонецФункции
// Выполняет обработку строк
//
// Параметры:
//  ОбрабатываемыеДанные  - Массив - Обрабатываемые данные
//  ОбрабатываемыеСтроки  - Массив - Обрабатываемые строки
//  Узлы  - ТаблицаЗначений - Обрабатываемые данные
//  Регистрируется  - Структура - Описание регистрации
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
// Возвращаемое значение:
//   СписокЗначений - Данные по обработке
//
Функция УКО_ПланыОбмена_ЗарегистрироватьИзменения(ОбрабатываемыеДанные, ОбрабатываемыеСтроки = Неопределено, Узлы, Регистрируется, АдресРезультатаВыполнения = Неопределено) Экспорт
	
	НачалоВыполнения = ТекущаяДатаСеанса();
	КоличествоСтрок = УКО_ОбработкаРезультата_КоличествоСтрок(ОбрабатываемыеДанные, ОбрабатываемыеСтроки);
	РезультатОбработки = Новый Соответствие;
	
	ПоследняяДата = Неопределено;
	Ошибок = 0;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл  

		НомерОбрабатываемойСтроки = УКО_ОбработкаРезультата_НомерОбрабатываемойСтроки(ОбрабатываемыеСтроки, НомерСтроки);
		ОбрабатываемаяСтрока = ОбрабатываемыеДанные[НомерОбрабатываемойСтроки - 1];
		
		Если Регистрируется.Тип = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.Ссылка" Тогда
			
			ОбъектРегистрации = ОбрабатываемаяСтрока[Регистрируется.Значение];
			
		ИначеЕсли Регистрируется.Тип = "Перечисление.УКО_ТипыРегистрируемыхДанныхВПланеОбмена.НаборЗаписей" Тогда
			
			ПолноеИмяМетаданных = Регистрируется.Значение;
			
			ИмяЭлементаКоллекцииМетаданных = УКО_Метаданные_ИмяОбъектаКоллекцииПоПолномуИмени(ПолноеИмяМетаданных);
			ИмяОбъектаКоллекцииМетаданных = УКО_Метаданные_ИмяОбъектаПоПолномуИмени(ПолноеИмяМетаданных);

			Ключи = Новый Структура;
			Если ИмяЭлементаКоллекцииМетаданных = "РегистрСведений" Тогда
				
				ОбъектМетаданных = Метаданные.РегистрыСведений[ИмяОбъектаКоллекцииМетаданных];
				
				Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
					Ключи.Вставить("Регистратор", ОбрабатываемаяСтрока.Регистратор);
				Иначе
					
					Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл 
						Ключи.Вставить(Измерение.Имя, ОбрабатываемаяСтрока[Измерение.Имя]);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				Ключи.Вставить("Регистратор", ОбрабатываемаяСтрока.Регистратор);
			КонецЕсли;
			
			НаборЗаписей = Вычислить(СтрШаблон("%1.%2.СоздатьНаборЗаписей()", УКО_Метаданные_ИмяКоллекции(ИмяЭлементаКоллекцииМетаданных), ИмяОбъектаКоллекцииМетаданных));
			Для Каждого ОписаниеКлюча Из Ключи Цикл 
				НаборЗаписей.Отбор[ОписаниеКлюча.Ключ].Установить(ОписаниеКлюча.Значение); 
			КонецЦикла;
			
			ОбъектРегистрации = НаборЗаписей;

		КонецЕсли;
		
		ОписаниеРезультата = УКО_ПланыОбмена_ЗарегистрироватьИзмененияПоСтроке(Узлы, ОбъектРегистрации);
		РезультатОбработки.Вставить(НомерОбрабатываемойСтроки, ОписаниеРезультата); 
		Если ОписаниеРезультата.Свойство("Ошибка") Тогда
			Ошибок = Ошибок + 1;
		КонецЕсли;
		
		Если ПоследняяДата <> ТекущаяДатаСеанса() Тогда
			
			Обработано = НомерСтроки - 1;
			ПрошлоВремени = ТекущаяДатаСеанса() - НачалоВыполнения;
			ПояснениеСостояния = УКО_ОбработкаРезультатаКлиентСервер_ПояснениеСостояния(Обработано, КоличествоСтрок, Ошибок, НачалоВыполнения, ПрошлоВремени, Ложь);
			Индикатор = Цел(Обработано * 100 / КоличествоСтрок);
			
			Если ЗначениеЗаполнено(АдресРезультатаВыполнения) Тогда
				УКО_ДлительныеОперации_СообщитьПрогресс(ПояснениеСостояния, Индикатор, РезультатОбработки);
				РезультатОбработки.Очистить();
			КонецЕсли;
			
			ПоследняяДата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЦикла;
	
	УКО_ДлительныеОперации_ВернутьРезультат(АдресРезультатаВыполнения, РезультатОбработки);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция УКО_ПланыОбмена_ЗарегистрироватьИзмененияПоСтроке(Узлы, ОбъектРегистрации)
	
	Результат = Новый Структура;
	
	Попытка
		
		ПланыОбмена.ЗарегистрироватьИзменения(Узлы, ОбъектРегистрации);
		
	Исключение
		
		Результат.Вставить("Ошибка", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции
// Инициализирует форму для проверки обновлений
//
// Параметры:
//  Форма - Форма - Форма
//  ЭлементРодитель - Элемент - Элемент (родитель)
//
Процедура УКО_ПроверкаОбновлений_Инициализировать(Форма, ЭлементРодитель) Экспорт
	
	ИмяКоманды = "ПроверкаОбновления";
	ИмяЭлемента = ИмяКоманды;
	НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Действие = ИмяКоманды;
		
	НоваяКнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ЭлементРодитель);
	НоваяКнопка.Видимость = Ложь;
	НоваяКнопка.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = ИмяКоманды; 
	НоваяКнопка.Заголовок = НСтр("ru = 'Доступно обновление'; en = 'An update is available'");
	
КонецПроцедуры
// Инициализируем форму
//
// Параметры:
//  Форма - Форма - Форма
//
Процедура УКО_ПроверкаОшибокВФорме_Инициализировать(Форма) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Ошибки", Новый ОписаниеТипов("ФорматированнаяСтрока")));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ПолеОшибки = ЭлементыФормы.Добавить("Ошибки", Тип("ПолеФормы"));
	ПолеОшибки.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеОшибки.ПутьКДанным = "Ошибки";
	ПолеОшибки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеОшибки.Заголовок = НСтр("ru = 'Ошибки'; en = 'Errors'");
	ПолеОшибки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОшибкиОбработкаНавигационнойСсылки");
	ПолеОшибки.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры
// Сохраняет данные объекта в файл
//
// Параметры:
//  Схема  - СхемаКомпоновкиДанных - Схема компоновки данных
//  Путь  - Строка - Путь
//  Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных (необязательный)
//  ВнешниеНаборыДанных  - Структура - Внешние наборы данных (необязательный)
//  ИмяБезРасширения - Строка - Имя файла без расширения (необязательный)
//
// Возвращаемое значение:
//   Строка - Информация о результате
//
Функция СохранитьСКДВФайл(Схема, Путь, Настройки = Неопределено, ВнешниеНаборыДанных = Неопределено, ИмяБезРасширения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Путь", Путь);
	ДополнительныеПараметры.Вставить("Имя", ИмяБезРасширения);
	ДополнительныеПараметры.Вставить("ВнешниеНаборыДанных", ВнешниеНаборыДанных);
	ДополнительныеПараметры.Вставить("Настройки", Настройки);
	
	Возврат УКО_ОтложеннаяОтладка_СохранитьДанные(Схема, "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных", "Перечисление.УКО_ТипыХраненияДанных.Файл", ДополнительныеПараметры);
	
КонецФункции
// Сохраняет данные объекта в настройки
//
// Параметры:
//  Схема  - СхемаКомпоновкиДанных - Схема компоновки данных
//  Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных (необязательный)
//  ВнешниеНаборыДанных  - Структура - Внешние наборы данных (необязательный)
//  ИмяНастройки - Строка - Имя настройки (необязательный)
//
// Возвращаемое значение:
//   Строка - Информация о результате
//
Функция СохранитьСКДВНастройки(Схема, Настройки = Неопределено, ВнешниеНаборыДанных = Неопределено, ИмяНастройки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Имя", ИмяНастройки);
	ДополнительныеПараметры.Вставить("ВнешниеНаборыДанных", ВнешниеНаборыДанных);
	ДополнительныеПараметры.Вставить("Настройки", Настройки);
	
	Возврат УКО_ОтложеннаяОтладка_СохранитьДанные(Схема, "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных", "Перечисление.УКО_ТипыХраненияДанных.Настройка", ДополнительныеПараметры);
	
КонецФункции
// Выполняет схему компоновки данных, возвращает результат
//
// Параметры:
//	Данные - Данные - Данные
//	Режим - Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных - Режим выполнения схемы компоновки данных
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	* АдресРезультата - Строка - Адрес временного хранилища результата
//	* АдресСхемыКомпоновкиДанных - Строка - Адрес временного хранилища схемы компоновки данных
//	* АдресДанныхРасшифровки - Строка - Адрес временного хранилища расшифровки
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
// Возвращаемое значение:
//	ТабличныйДокумент - Табличный документ результат
//
Функция УКО_СКД_ПолучитьРезультат(Данные, Режим, ДополнительныеПараметры = Неопределено, АдресРезультатаВыполнения = Неопределено) Экспорт
	
	Перем ДанныеРасшифровкиОбъект;
	
	// Инициализация дополнительных параметров
	АдресРезультата = Неопределено;
	АдресДанныхРасшифровки = Неопределено;
	АдресСхемыКомпоновкиДанных = Неопределено;
	АдресИсполняемыхЗапросов = Неопределено;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		АдресРезультата = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "АдресРезультата");
		АдресСхемыКомпоновкиДанных = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "АдресСхемыКомпоновкиДанных");
		АдресДанныхРасшифровки = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "АдресДанныхРасшифровки");
		АдресИсполняемыхЗапросов = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДополнительныеПараметры, "АдресИсполняемыхЗапросов");
		
	КонецЕсли;
	
	ВнешниеИсточники = 	УКО_Данные_ВнешниеИсточники(Данные);
	
	ТабличныйДокументРезультат = Новый ТабличныйДокумент;
	
	ВыводРезультата = УКО_ОбщегоНазначенияКлиентСервер_ЭтоРежимВыполненияСРезультатом(Режим);
	АнализИсполняемыхЗапросов = ВыводРезультата ИЛИ Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.ПолучениеИсполняемыхЗапросов";
	СДаннымиРасшифровки = ЗначениеЗаполнено(АдресРезультата);
	Если ВыводРезультата Тогда
		КоличествоШагов = 3;
	Иначе
		КоличествоШагов = 2;
	КонецЕсли;
	Шаг = 1;
	
	ТекстОшибкиПриВыполнении = "";
	Попытка 
		
		УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса (НСтр("ru = 'Получение схемы'; en = 'Getting the schema'"), Шаг, КоличествоШагов));
		
		// Начало замера времени выполнения --------------------------------------------------------------------------------- {
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СхемаКомпоновкиДанных = УКО_СКД_СхемаКомпоновкиДанных(Данные.XMLСхемаКомпоновкиДанных);
		
		УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса (НСтр("ru = 'Компоновка макета'; en = 'The layout of the layout'"), Шаг, КоличествоШагов));
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		// Настройки варианта
		Если Данные.Свойство("XMLВариантОтчета") Тогда
			НастройкиКомпоновкиДанных = УКО_СКД_ВариантНастроек(Данные.XMLВариантОтчета);
		Иначе
			НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		
		// Пользовательские настройки
		Если Данные.Свойство("XMLПользовательскиеНастройки") Тогда
			ПользовательскиеНастройки = УКО_СКД_ПользовательскиеНастройки(Данные.XMLПользовательскиеНастройки);
			КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		КонецЕсли;
		
		НастройкиКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
		
		Если СДаннымиРасшифровки Тогда 
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровкиОбъект);
		Иначе 
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
		КонецЕсли;
		
		// Конец замера { ---------------------------------------------------------------------------------------------------
		ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
		
		Если АнализИсполняемыхЗапросов Тогда
			ИсполняемыеЗапросы = УКО_СКД_ИсполняемыеЗапросы(СхемаКомпоновкиДанных, МакетКомпоновкиДанных);
		КонецЕсли;
			
		Если ВыводРезультата Тогда

			УКО_ДлительныеОперации_СообщитьПрогресс(УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса (НСтр("ru = 'Вывод результата'; en = 'The output'"), Шаг, КоличествоШагов));
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			
			ИспользованиеВнешнихФункций = Данные.ИспользованиеВнешнихФункций;
			Если СДаннымиРасшифровки Тогда 
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеИсточники, ДанныеРасшифровкиОбъект, ИспользованиеВнешнихФункций);
			Иначе
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеИсточники, , ИспользованиеВнешнихФункций);
			КонецЕсли;
			
			ПроцессорВыводаРезультатаОтчета = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВыводаРезультатаОтчета.УстановитьДокумент(ТабличныйДокументРезультат);
			ПроцессорВыводаРезультатаОтчета.НачатьВывод();
			ПроцессорВыводаРезультатаОтчета.Вывести(ПроцессорКомпоновкиДанных);
			ПроцессорВыводаРезультатаОтчета.ЗакончитьВывод();
			
		КонецЕсли;
		
	Исключение
		
		// Ошибка при выполнении
		ТекстОшибкиПриВыполнении = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат = Новый Структура;
	
	Если ВыводРезультата Тогда
		
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
			Результат.Вставить("АдресРезультата", ПоместитьВоВременноеХранилище(ТабличныйДокументРезультат, АдресРезультата));
			Результат.Вставить("АдресСхемыКомпоновкиДанных", ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресСхемыКомпоновкиДанных));
			Результат.Вставить("АдресДанныхРасшифровки", ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОбъект, АдресДанныхРасшифровки));
			Результат.Вставить("Количество", "?");
		КонецЕсли;
		
	КонецЕсли;
	
	Если АнализИсполняемыхЗапросов Тогда
		
		АдресИсполняемыхЗапросовСКД = ПоместитьВоВременноеХранилище(ИсполняемыеЗапросы, АдресИсполняемыхЗапросов);
		Результат.Вставить("АдресИсполняемыхЗапросовСКД", АдресИсполняемыхЗапросовСКД);
		
	КонецЕсли;
	
	Результат.Вставить("РежимВыполнения", Режим);
	
	Если ЗначениеЗаполнено(ТекстОшибкиПриВыполнении) Тогда
		ВремяВыполнения = Неопределено;
	КонецЕсли;
	Результат.Вставить("ВремяВыполнения", ВремяВыполнения);
	Результат.Вставить("ОшибкаПриВыполнении", ТекстОшибкиПриВыполнении);
	
	УКО_ДлительныеОперации_ВернутьРезультат(АдресРезультатаВыполнения, Результат);
	
	Возврат ТабличныйДокументРезультат;
	
КонецФункции
// Возвращает схему компоновки данных по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст схемы
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - Схема компоновки данных
//
Функция УКО_СКД_СхемаКомпоновкиДанных(Текст) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
		
	Иначе
		
		Возврат Новый СхемаКомпоновкиДанных;
		
	КонецЕсли;

КонецФункции
// Возвращает пользовательские настройки по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст пользовательские настройки
//
// Возвращаемое значение:
//   ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские настройки компоновки данных
//
Функция УКО_СКД_ПользовательскиеНастройки(Текст) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ПользовательскиеНастройкиКомпоновкиДанных"));
		
	Иначе
		
		Результат = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
// Возвращает вариант настроек по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст варианта настроек
//
// Возвращаемое значение:
//   НастройкиКомпоновкиДанных - Вариант настроек
//
Функция УКО_СКД_ВариантНастроек(Текст) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("НастройкиКомпоновкиДанных"));
		
	Иначе
		
		Результат = Новый НастройкиКомпоновкиДанных;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
// Возвращает XML текст для объекта системы компоновки данных
//
// Параметры:
//   Объект - СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,
//				ПользовательскиеНастройкиКомпоновкиДанных - Объект системы компоновки данных
//
// Возвращаемое значение:
//   Строка - XML текст объекта
//
Функция УКО_СКД_XMLТекст(Объект) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	Если ТипЗнч(Объект) = Тип("СхемаКомпоновкиДанных") Тогда
		ИмяТипаОбъекта = "dataCompositionSchema";
		URLТипаОбъекта = "http://v8.1c.ru/8.1/data-composition-system/schema";
	ИначеЕсли ТипЗнч(Объект) = Тип("НастройкиКомпоновкиДанных") Тогда	
		ИмяТипаОбъекта = "Settings";
		URLТипаОбъекта = "http://v8.1c.ru/8.1/data-composition-system/settings";
	ИначеЕсли ТипЗнч(Объект) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ИмяТипаОбъекта = "UserSettings";
		URLТипаОбъекта = "http://v8.1c.ru/8.1/data-composition-system/settings";
	КонецЕсли;
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект, ИмяТипаОбъекта, URLТипаОбъекта);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции
// Проверяет текст схемы компоновки данных
//
// Параметры:
//	Текст - Строка - XML текст схемы компоновки данных
//
// Возвращаемое значение:
//	Строка - Текст ошибки
//
Функция УКО_СКД_ПроверитьТекст(Текст) Экспорт 
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Текст) Тогда
			
		Попытка
			УКО_СКД_СхемаКомпоновкиДанных(Текст);
		Исключение
			Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
			
	Иначе
			
		Результат = УКО_СКДКлиентСервер_ТекстОшибкиПустаяСхема();
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_СКД_ИсполняемыеЗапросы(СхемаКомпоновкиДанных, МакетКомпоновкиДанных)
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Имя", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(200));
	Результат.Колонки.Добавить("Объединение", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Текст", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
	Результат.Колонки.Добавить("ИсходныйТекст", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока());
	
	УКО_СКД_ИсполняемыеЗапросыСборДанныхСхемыКомпоновкиДанных(СхемаКомпоновкиДанных.НаборыДанных, Результат);
	УКО_СКД_ИсполняемыеЗапросыСборДанныхМакетКомпоновкиДанных(МакетКомпоновкиДанных.НаборыДанных, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_СКД_ИсполняемыеЗапросыСборДанныхСхемыКомпоновкиДанных(НаборыДанных, КоллекцияСтрок)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл 
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			НоваяСтрока = КоллекцияСтрок.Строки.Добавить();
			НоваяСтрока.Имя = НаборДанных.Имя;
			НоваяСтрока.ИсходныйТекст = НаборДанных.Запрос;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			
			НоваяСтрока = КоллекцияСтрок.Строки.Добавить();
			НоваяСтрока.Имя = НаборДанных.Имя;
			НоваяСтрока.Объединение = Истина;
			
			УКО_СКД_ИсполняемыеЗапросыСборДанныхСхемыКомпоновкиДанных(НаборДанных.Элементы, НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКО_СКД_ИсполняемыеЗапросыСборДанныхМакетКомпоновкиДанных(НаборыДанных, КоллекцияСтрок)
	
	Если КоллекцияСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НаборДанных Из НаборыДанных Цикл 
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			
			Строка = КоллекцияСтрок.Строки.Найти(НаборДанных.Имя, "Имя");
			Строка.Текст = НаборДанных.Запрос;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			Строка = КоллекцияСтрок.Строки.Найти(НаборДанных.Имя, "Имя");
			УКО_СКД_ИсполняемыеЗапросыСборДанныхМакетКомпоновкиДанных(НаборДанных.Элементы, Строка);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// Инициализирует форму для работы с результатов в виде табличного документа
//
// Параметры:
//	Форма - Форма - Форма
//
Процедура УКО_ТабличныйДокумент_ИнициализироватьФорму(Форма) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КэшВыделеннойОбласти", Новый ОписаниеТипов));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПолеСумма", УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(50)));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтоОсновнаяФорма = СтрНайти(Форма.ИмяФормы, "Основная");
	СоздаватьКнопкуНеВсеСтрокиВыведены = ЭтоОсновнаяФорма;
	
	ПодменюУровеньГруппировок = ЭлементыФормы.Добавить("ТабличныйДокументРезультатКонтекстноеМенюГруппировкиУровень", Тип("ГруппаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
	ПодменюУровеньГруппировок.Заголовок = НСтр("ru = 'Уровень группировок'; en = 'Grouping level'");
	
	Если ЭтоОсновнаяФорма Тогда
		КоманднаяПанель = ЭлементыФормы.ТабличныйДокументРезультатКоманднаяПанель;
		КнопкаЭкспортВ = ЭлементыФормы.Вставить("ТабличныйДокументРезультатКоманднаяПанельПодменюЭкспортВ", Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКоманднаяПанельКнопки, ЭлементыФормы.СравнитьРезультаты);
		ГруппаНеВсеСтрокиВыведены = ЭлементыФормы.Добавить("ГруппаНеВсеСтрокиВыведены", Тип("ГруппаФормы"), КоманднаяПанель);
		ГруппаСумма = ЭлементыФормы.Добавить("ГруппаСумма", Тип("ГруппаФормы"), КоманднаяПанель);
	Иначе
		КоманднаяПанель = ЭлементыФормы.ГруппаКоманднаяПанель;
		КнопкаЭкспортВ = ЭлементыФормы.Добавить("ТабличныйДокументРезультатКоманднаяПанельПодменюЭкспортВ", Тип("КнопкаФормы"), ЭлементыФормы.КнопкиГруппа);
		ГруппаНеВсеСтрокиВыведены = ЭлементыФормы.Вставить("ГруппаНеВсеСтрокиВыведены", Тип("ГруппаФормы"), КоманднаяПанель, ЭлементыФормы.ГруппаЕще);
		ГруппаСумма = ЭлементыФормы.Вставить("ГруппаСумма", Тип("ГруппаФормы"), КоманднаяПанель, ЭлементыФормы.ГруппаЕще);
	КонецЕсли;

	// Уровень группировки ...
	Для Уровень = 1 По 13 Цикл 
		
		ИмяНовойКоманды = "УстановитьУровеньГруппировки" + Уровень;
		НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
		НоваяКоманда.Действие = "КомандаУстановитьУровеньГруппировки";
		
		НоваяКнопка = ЭлементыФормы.Добавить("КнопкаУстановитьУровеньГруппировки" + Уровень, Тип ("КнопкаФормы"), ПодменюУровеньГруппировок);
		НоваяКнопка.ИмяКоманды = ИмяНовойКоманды; 
		НоваяКнопка.Заголовок = СтрШаблон(НСтр("ru = 'Уровень %1'; en = 'Level%1'"), Уровень);
		НоваяКнопка.Видимость = Ложь;
		
	КонецЦикла;
	
	// Экспорт в ...
	ИмяНовойКоманды = "ЭкспортВ";
	НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
	НоваяКоманда.Заголовок = НСтр("ru = 'Экспорт в ...'; en = 'Export to ...'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Экспорт результата в xls и другие форматы ...'; en = 'Export the result to xls and other formats ...'");
	НоваяКоманда.Действие = ИмяНовойКоманды;
	
	КнопкаЭкспортВ.ИмяКоманды = ИмяНовойКоманды;

	// Выделить ячейки
	ИмяНовойКоманды = "ВыделитьЯчейки";
	НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
	НоваяКоманда.Действие = ИмяНовойКоманды;
	НоваяКоманда.Заголовок = НСтр("ru = 'Выделить/отменить выделение'; en = 'Select / deselect'");
	
	КнопкаВыделитьЯчейки = ЭлементыФормы.Добавить("Кнопка" + ИмяНовойКоманды, Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
	КнопкаВыделитьЯчейки.ИмяКоманды = ИмяНовойКоманды;
	КнопкаВыделитьЯчейки.Картинка = Форма.Элементы.БиблиотекаКартинокУКО_Выделенный.Картинка;
	
	// Копировать UID Ссылки
	ИмяНовойКоманды = "КопироватьUIDСсылки";
	НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
	НоваяКоманда.Действие = ИмяНовойКоманды;
	НоваяКоманда.Заголовок = НСтр("ru = 'UID ссылки'; en = 'Copy UID'");
	
	КнопкаКопироватьUIDСсылки = ЭлементыФормы.Добавить("Кнопка" + ИмяНовойКоманды, Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
	КнопкаКопироватьUIDСсылки.ИмяКоманды = ИмяНовойКоманды;
	КнопкаКопироватьUIDСсылки.Картинка = Форма.Элементы.БиблиотекаКартинокУКО_КопироватьВБуферОбмена.Картинка;
	
	// Копировать ссылку на встроенном языке
	ИмяНовойКоманды = "КопироватьСсылкуКодНаВстроенномЯзыке";
	НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
	НоваяКоманда.Действие = ИмяНовойКоманды;
	НоваяКоманда.Заголовок = НСтр("ru = 'Ссылка (на встроенном языке)'; en = 'Ref (in built-in language)'");
	
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке = ЭлементыФормы.Добавить("Кнопка" + ИмяНовойКоманды, Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке.ИмяКоманды = ИмяНовойКоманды;
	КнопкаКопироватьСсылкуКодНаВстроенномЯзыке.Картинка = Форма.Элементы.БиблиотекаКартинокУКО_КопироватьВБуферОбмена.Картинка;
	
	// Ссылка в ПубличныеИдентификаторыСинхронизируемыхОбъектов
	Если Метаданные.РегистрыСведений.Найти("ПубличныеИдентификаторыСинхронизируемыхОбъектов") <> Неопределено Тогда
		ИмяНовойКоманды = "СсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов";
		НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
		НоваяКоманда.Действие = ИмяНовойКоманды;
		НоваяКоманда.Заголовок = НСтр("ru = 'Ссылка в ПубличныеИдентификаторыСинхронизируемыхОбъектов'; en = 'Ref in ПубличныеИдентификаторыСинхронизируемыхОбъектов'");
		
		КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов = ЭлементыФормы.Добавить("Кнопка" + ИмяНовойКоманды, Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
		КнопкаСсылкаВПубличныеИдентификаторыСинхронизируемыхОбъектов.ИмяКоманды = ИмяНовойКоманды;
	КонецЕсли;
	
	// Ссылка в СоответствияОбъектовИнформационныхБаз
	Если Метаданные.РегистрыСведений.Найти("СоответствияОбъектовИнформационныхБаз") <> Неопределено Тогда
		ИмяНовойКоманды = "СсылкаВСоответствияОбъектовИнформационныхБаз";
		НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
		НоваяКоманда.Действие = ИмяНовойКоманды;
		НоваяКоманда.Заголовок = НСтр("ru = 'Ссылка в СоответствияОбъектовИнформационныхБаз'; en = 'Ref in СоответствияОбъектовИнформационныхБаз'");
		
		КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз = ЭлементыФормы.Добавить("Кнопка" + ИмяНовойКоманды, Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
		КнопкаСсылкаВСоответствияОбъектовИнформационныхБаз.ИмяКоманды = ИмяНовойКоманды;
	КонецЕсли;
	
	
	
	// Найти ссылки
	ИмяНовойКоманды = "НайтиСсылки";
	НоваяКоманда = Форма.Команды.Добавить(ИмяНовойКоманды);
	НоваяКоманда.Действие = ИмяНовойКоманды;
	НоваяКоманда.Заголовок = НСтр("ru = 'Найти ссылки'; en = 'Find links'");
	
	КнопкаНайтиСсылки = ЭлементыФормы.Добавить("Кнопка" + ИмяНовойКоманды, Тип("КнопкаФормы"), ЭлементыФормы.ТабличныйДокументРезультатКонтекстноеМенюГруппа);
	КнопкаНайтиСсылки.ИмяКоманды = ИмяНовойКоманды;
	
	
	
	// Группа не все строки выведены
	ГруппаНеВсеСтрокиВыведены.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНеВсеСтрокиВыведены.ОтображатьЗаголовок = Ложь;
	ГруппаНеВсеСтрокиВыведены.Заголовок = НСтр("ru = 'Не все строки выведены (группа)'; en = 'Not all lines are output (group)'");
	ГруппаНеВсеСтрокиВыведены.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	
	КартинкаНеВсеСтрокиВыведены = ЭлементыФормы.Добавить("КартинкаНеВсеСтрокиВыведены", Тип("ДекорацияФормы"), ГруппаНеВсеСтрокиВыведены);
	КартинкаНеВсеСтрокиВыведены.Вид = ВидДекорацииФормы.Картинка;
	КартинкаНеВсеСтрокиВыведены.Заголовок = НСтр("ru = 'Картинка'; en = 'Picture'");
	КартинкаНеВсеСтрокиВыведены.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КартинкаНеВсеСтрокиВыведены.Картинка = Форма.Элементы.БиблиотекаКартинокУКО_ПредупреждениеВажное.Картинка;
	КартинкаНеВсеСтрокиВыведены.Высота = 1;
	
	НадписьНеВсеСтрокиВыведены = ЭлементыФормы.Добавить("НадписьНеВсеСтрокиВыведены", Тип("ДекорацияФормы"), ГруппаНеВсеСтрокиВыведены);
	НадписьНеВсеСтрокиВыведены.Вид = ВидДекорацииФормы.Надпись;
	НадписьНеВсеСтрокиВыведены.Заголовок = НСтр("ru = 'Не все строки выведены'; en = 'Not all lines are output'");
	НадписьНеВсеСтрокиВыведены.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	
	Если СоздаватьКнопкуНеВсеСтрокиВыведены Тогда
		КнопкаНеВсеСтрокиВыведены = ЭлементыФормы.Добавить("КнопкаНеВсеСтрокиВыведены", Тип("КнопкаФормы"), ГруппаНеВсеСтрокиВыведены);
		КнопкаНеВсеСтрокиВыведены.Вид = ВидКнопкиФормы.Гиперссылка;
		КнопкаНеВсеСтрокиВыведены.ИмяКоманды = "ВывестиВсеСтрокиРезультата";
	КонецЕсли;
	
	// Группа сумма
	ГруппаСумма.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСумма.Заголовок = НСтр("ru = 'Сумма (группа)'; en = 'Amount (group)'");
	ГруппаСумма.ОтображатьЗаголовок = Ложь;
	ГруппаСумма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	КартинкаСумма = ЭлементыФормы.Добавить("КартинкаСумма", Тип("ДекорацияФормы"), ГруппаСумма);
	КартинкаСумма.Вид = ВидДекорацииФормы.Картинка;
	КартинкаСумма.Заголовок = НСтр("ru = 'Картинка'; en = 'Picture'");
	КартинкаСумма.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	КартинкаСумма.Картинка = Форма.Элементы.БиблиотекаКартинокУКО_Сумма.Картинка;
	КартинкаСумма.Высота = 1;
	
	ПолеСумма = ЭлементыФормы.Добавить("ПолеСумма", Тип("ПолеФормы"), ГруппаСумма);
	ПолеСумма.Вид = ВидПоляФормы.ПолеВвода;
	ПолеСумма.ПутьКДанным = "ПолеСумма";
	ПолеСумма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеСумма.Заголовок = НСтр("ru = 'Поле'; en = 'Field'");
	ПолеСумма.Подсказка = НСтр("ru = 'Сумма выделенных ячеек'; en = 'Sum of selected cells'");
	ПолеСумма.РастягиватьПоГоризонтали = Ложь;
	ПолеСумма.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	ПолеСумма.Ширина = 20;

КонецПроцедуры
// Добавляет колонку в таблицу значений на форме
//
// Параметры:
//	Форма - Форма - Форма
//	ИмяРеквизита - Строка - Имя реквизита
//	Имя - Строка - Имя колонки
//	ТипЗначения - ОписаниеТипов - Описание типов
//
Процедура УКО_Формы_ДобавитьКолонкуВТаблицуЗначений(Форма, ИмяРеквизита, Имя, ТипЗначения) Экспорт
	
	ДопустимыеТипы = УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповБезNull(ТипЗначения);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Имя, ДопустимыеТипы, ИмяРеквизита, Имя, Ложь));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭлементыФормы = Форма.Элементы;
	НоваяКолонка = ЭлементыФормы.Добавить(ИмяРеквизита + Имя, Тип("ПолеФормы"), ЭлементыФормы[ИмяРеквизита]);
	НоваяКолонка.ПутьКДанным = ИмяРеквизита + "." + Имя;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	//НоваяКолонка.КартинкаШапки = УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(ТипЗначения);
	НоваяКолонка.ДоступныеТипы = ДопустимыеТипы;
	НоваяКолонка.Подсказка = УКО_ОбщегоНазначения_ПодсказкаОписанияТипа(Имя, ТипЗначения, Истина);
	НоваяКолонка.ВыбиратьТип = (УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ТипЗначения) <> 1);
	
	НоваяКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_ТаблицаЗначенийРеквизитНачалоВыбора");
	НоваяКолонка.УстановитьДействие("Очистка", "Подключаемый_ТаблицаЗначенийРеквизитОчистка");
	
КонецПроцедуры
// Добавляет условное оформление
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Условное оформление
//	ИмяПоля - Строка - Имя оформляемого поля
//	Оформление - Структура - Оформление
//	ЛевоеЗначение - Строка - Имя поля отбора
//	ПравоеЗначение - Произвольный - Значение отбора
//	ВидСравнения - ВидСравнения - Вид сравнения отбора
//
Процедура УКО_Формы_ДобавитьУсловноеОформление(УсловноеОформление, ИмяПоля, Оформление, ЛевоеЗначение, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	Если ЗначениеЗаполнено(ВидСравнения) Тогда
		ОтборЭлемента.ВидСравнения = ВидСравнения;
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = ПравоеЗначение;
	
	Для Каждого ЭлементОформления Из Оформление Цикл 
		Элемент.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ, ЭлементОформления.Значение);
	КонецЦикла;
	
КонецПроцедуры
// Добавляет условное оформление группой
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Условное оформление
//	ИмяПоля - Строка - Имя оформляемого поля
//	Оформление - Структура - Оформление
//	Условия - Массив(Структура) - Условия
//				*Поле - Строка - Имя поля
//				*Значение - Произвольный - Значение
//	Тип - ТипГруппыЭлементовОтбораКомпоновкиДанных - Тип
//
Процедура УКО_Формы_ДобавитьУсловноеОформлениеГруппой(УсловноеОформление, ИмяПоля, Оформление, Условия, Тип = Неопределено) Экспорт 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Если ЗначениеЗаполнено(Тип) Тогда
		ОтборГруппа.ТипГруппы = Тип;
	КонецЕсли;
	
	Для Каждого Условие Из Условия Цикл 
		
		ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Условие.Поле);
		ОтборЭлемента.ПравоеЗначение = Условие.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементОформления Из Оформление Цикл 
		Элемент.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ, ЭлементОформления.Значение);
	КонецЦикла;
	
КонецПроцедуры
// Заполняет список выбора элемента, тип списка максимальное количество выводимых строк
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
Процедура УКО_Формы_ЗаполнитьСписокВыбораМаксимальноеКоличествоВыводимыхСтрок(Элемент) Экспорт
	
	Список = Элемент.СписокВыбора;
	Список.Добавить(0, НСтр("ru = 'Не ограничено'; en = 'Not limited'"));
	Список.Добавить(1000, НСтр("ru = '1000 строк'; en = '1000 rows'"));
	Список.Добавить(3000, НСтр("ru = '3000 строк'; en = '3000 rows'"));
	Список.Добавить(5000, НСтр("ru = '5000 строк'; en = '5000 rows'"));
	Список.Добавить(10000, НСтр("ru = '10000 строк'; en = '10000 rows'"));
	
КонецПроцедуры
// Заполняет список выбора элемента, тип списка язык программирования
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
//   ДобавлятьОпределяетсяАвтоматически - Булево - Добавлять пункт определяется автоматически
Процедура УКО_Формы_ЗаполнитьСписокВыбораЯзыкПрограммирования(Элемент, ДобавлятьОпределяетсяАвтоматически = Ложь) Экспорт
	
	Список = Элемент.СписокВыбора;
	
	Если ДобавлятьОпределяетсяАвтоматически Тогда
		Список.Добавить("", НСтр("ru = 'Определяется автоматически'; en = 'Is determined automatically'"));
	КонецЕсли;
	
	Список.Добавить(УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский(), "Русский",,Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA5klEQVQ4jcWQMU7E" + Символы.ВК + Символы.ПС + "MBBF38STXWQkuj0ArtC20O35t+EEVOYOIBLbWdsUSUAgITlQ8KUp39P/A/8dQaR7" + Символы.ВК + Символы.ПС + "9j7/Br51ziigpRScc5tg7z2AdoDmvL3AwmgHUErZLFgZBTgeM6cTDEMbbC2cz/lT" + Символы.ВК + Символы.ПС + "AJkYIYQ2gTEz80UwDFNzA5FvgkfuuQuOGt7aBOaaJzwPq6AAIQQYx+YN69sVIPU9" + Символы.ВК + Символы.ПС + "r8bQHw6Y3Q7Z70EVVBERaikwTdSUKCkxxUjqe0hpFgRr8eOIjRGdB/6YS60MpVCt" + Символы.ВК + Символы.ПС + "hZQQRHbADXDV1v8jAXgRRLplim4UXJb7W94B9j1dBC/71TUAAAAASUVORK5CYII=" + Символы.ВК + Символы.ПС + "")));
	Список.Добавить(УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский(), "English",,Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACLklEQVQ4jcWRT0iT" + Символы.ВК + Символы.ПС + "cRzGP7/t3bDNBR0KIsO0iyj5B0kCD0IQVh51XcoOhhSkXrx00AoCI8tLdYmQiCIs" + Символы.ВК + Символы.ПС + "K4xQ1P6o2C4lDRVkRDLlbehokvPdn/ed274dEiTsYHToA8/pgYfn+33gf6NQyuZr" + Символы.ВК + Символы.ПС + "bMzs7ejg0WiQGw+nSZhpZvoa0I9UkjEMimdmqGgeYT2d5eKpEhpWPrAjfz/lLS12" + Символы.ВК + Символы.ПС + "UMp5qfOxrA4OyXo4LNGYJc/ezItppWW5p0eWuroka5rSN/JVIqGIRIeHJWMYcuX2" + Символы.ВК + Символы.ПС + "sKCUUwO07oEFYp4DtEbG2Z0DXq+XdBZiExNk4nH2tLVRlxsmNTlFtOYkXQ/muHl/" + Символы.ВК + Символы.ПС + "CkADpVyfPs/Kn/hSWyuB6mrJGMYWLxAICEq5FEq5Xng88ZKyMrKJxLYeZ3O5mPX5" + Символы.ВК + Символы.ПС + "8Iq4NYD1WAyxLMQ0txUgdjvizoWYASjl8vv9kkqlfpO5siL+ggKZLi3d4qVSKZn0" + Символы.ВК + Символы.ПС + "fRSUcmkAlaefU18XovNcBZ6hpzgLC8mtqsIyTWwOB/FEEs2miPT2Ek4qrobyGR2b" + Символы.ВК + Символы.ПС + "+nUOQPuZQ9xpOgh3r/O9rJoL7zJYloWZTGIlk6yuJTh7+S3G8Xryag7TbRuj5cS+" + Символы.ВК + Символы.ПС + "zYCjMo/+coCh0nrO35vjRzRBWgRncTGOoiIkm0FfXqP52nteLYCnrZUafZyNHcFY" + Символы.ВК + Символы.ПС + "WmZwVzmvn/hwODQMQNd1FoNB7G43lq4TCn0D4FZviMVgHseamqC/H4VSTmAnkLOt" + Символы.ВК + Символы.ПС + "CTYxgTWFUraNJtpfBqQ39G/8BIkxQKnXq0GJAAAAAElFTkSuQmCC")));
	
КонецПроцедуры
// Заполняет список выбора элемента, тип списка настройка расшифровка таблиц значений
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
Процедура УКО_Формы_ЗаполнитьСписокВыбораРасшифровкаТаблицЗначений(Элемент) Экспорт
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Добавить("Перечисление.УКО_РасшифровкаТаблицЗначений.Отключена", НСтр("ru = 'Отключена'; en = 'Disabled'"));
	СписокВыбора.Добавить("Перечисление.УКО_РасшифровкаТаблицЗначений.Упрощенная", НСтр("ru = 'Упрощенная'; en = 'Simplified'"));
	СписокВыбора.Добавить("Перечисление.УКО_РасшифровкаТаблицЗначений.Полная", НСтр("ru = 'Полная (медленная, с количеством строк)'; en = 'Full (slow, with the number of lines)'"));
		
КонецПроцедуры
// Обновить список выбора элемента, тип объекта
//
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
//   КодЯзыкаПрограммирования - Строка - Код языка программирования
//
Процедура УКО_Формы_ОбновитьСписокВыбораТипОбъекта(Элемент, КодЯзыкаПрограммирования) Экспорт
	
	ТипыОбъектов = УКО_МетаданныеКлиентСервер_ДоступныеТипыОбъекта(КодЯзыкаПрограммирования);
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого ТипОбъекта Из ТипыОбъектов Цикл 
		
		КоллекцияМетаданных = Метаданные[УКО_Метаданные_ИмяКоллекции(ТипОбъекта, КодЯзыкаПрограммирования)];
		Если ЗначениеЗаполнено(КоллекцияМетаданных) Тогда
			СписокВыбора.Добавить(ТипОбъекта,,,БиблиотекаКартинок[ТипОбъекта]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// Добавляет элемент на форму
//
// Параметры:
//	Приемник - Форма, Массив - Приемник реквизитов
//	Имя - Строка - Имя
//	Тип - ОписаниеТипов - Тип значения
//	Заголовок - Строка - Заголовок
//	Путь - Строка - Путь
//	СохраняемыеДанные - Булево - СохраняемыеДанные
//
Процедура УКО_Формы_ДобавитьРеквизит(Приемник, Имя, Тип, Заголовок = "", Путь = "", СохраняемыеДанные = Ложь) Экспорт
	
	ДобавлениеВФорму = ТипЗнч(Приемник) <> Тип("Массив");
	
	Если ДобавлениеВФорму Тогда
		ДобавляемыеРеквизиты = Новый Массив; 
	Иначе
		ДобавляемыеРеквизиты = Приемник;
	КонецЕсли;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Имя, Тип, Путь, Заголовок, СохраняемыеДанные));
	
	Если ДобавлениеВФорму Тогда
		Приемник.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры
// Добавляет элемент на форму
//
// Параметры:
//	Форма - Форма - Форма
//	Имя - Строка - Имя
//	Тип - ТипЭлемента - Тип элемента
//	Поля - Структура - Поля заполнения
//	Родитель - Элемент - Элемент родитель
//
// Возвращаемое значение:
//   Элемент - Элемент
//
Функция УКО_Формы_ДобавитьЭлемент(Форма, Имя, Тип, Поля, Родитель = Неопределено) Экспорт
	
	Элемент = Форма.Элементы.Добавить(Имя, Тип, Родитель);
	ЗаполнитьЗначенияСвойств(Элемент, Поля);
	
	Возврат Элемент;
	
КонецФункции
// Производит чтение данных из строки (DCR формат)
//
// Параметры:
//  СтрокаДерева  - СтрокаДерева - Строка дерева
//
// Возвращаемое значение:
//   Массив - Данные
//
Функция УКО_ЧтениеDCR_ПрочитатьДанные(СтрокаДерева) Экспорт
	
	Данные = Новый Массив;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		ДанныеНовогоЭлемента = Новый Структура;
		
		Если Строка.ТипСтроки = 0 Тогда
			ТипСтроки = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных";
		ИначеЕсли Строка.ТипСтроки = 1 Тогда
			ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД";
		ИначеЕсли Строка.ТипСтроки = 2 Тогда
			ТипСтроки = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД";
		КонецЕсли;
		
		ДанныеНовогоЭлемента.Вставить("Type", УКО_MCRФормат_ЗначениеTypeВXML(ТипСтроки));
		ДанныеНовогоЭлемента.Вставить("Name", Строка.Имя);
		ДанныеНовогоЭлемента.Вставить("Text", Строка.Данные);
		ДанныеНовогоЭлемента.Вставить("Elements", УКО_ЧтениеDCR_ПрочитатьДанные(Строка));
		
		Данные.Добавить(ДанныеНовогоЭлемента);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции
// Производит чтение данных из строки (Q1C формат)
//
// Параметры:
//  СтрокаДерева  - СтрокаДерева - Строка дерева
//
// Возвращаемое значение:
//   Массив - Данные
//
Функция УКО_ЧтениеQ1C_ПрочитатьДанные(СтрокаДерева) Экспорт
	
	Данные = Новый Массив;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		ДанныеНовогоЭлемента = Новый Структура;
		ДанныеНовогоЭлемента.Вставить("Type", "Query");
		ДанныеНовогоЭлемента.Вставить("Text", "");
		ДанныеНовогоЭлемента.Вставить("Parameters", Новый Соответствие);
		
		Если ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
			Для Каждого Поле Из Строка.Значение Цикл 
				
				Если Поле.Ключ = "name"
					ИЛИ Поле.Ключ = "text" Тогда
					Тип = Тип("Строка");
				КонецЕсли;
				
				ДанныеНовогоЭлемента.Вставить(ТРег(Поле.Ключ), XMLЗначение(Тип, Поле.Значение));
				
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ВложеннаяСтрока Из Строка.Строки Цикл 
			
			Если ВложеннаяСтрока.Имя = "parameters" Тогда
				ДанныеНовогоЭлемента.Вставить("Parameters", УКО_ЧтениеQ1C_ЧтениеПараметровЗапроса(ВложеннаяСтрока));
			КонецЕсли;
			
		КонецЦикла;
		
		Данные.Добавить(ДанныеНовогоЭлемента);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция УКО_ЧтениеQ1C_ЧтениеПараметровЗапроса(СтрокаДерева)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл 
		
		ДанныеПараметра = Строка.Значение;
		
		ЗначениеПараметра = УКО_ЧтениеQ1C_ЧтениеЗначенияПараметраЗапроса(Строка);
		
		Если ЗначениеПараметра <> Неопределено Тогда 
			ЗначенияПараметров.Вставить(ДанныеПараметра.Name, ЗначениеПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция УКО_ЧтениеQ1C_ЧтениеЗначенияПараметраЗапроса(СтрокаДерева)
	
	ДанныеПараметра = СтрокаДерева.Значение;
	ТипПараметра = ДанныеПараметра.Type;
	
	ЗначениеПараметра = Неопределено;
	Если ТипПараметра = "ТаблицаЗначений" Тогда
		
		ЗначениеПараметра = УКО_ЧтениеQ1C_ЧтениеЗначенияТаблицыЗначений (СтрокаДерева);
		
	ИначеЕсли ТипПараметра = "МоментВремени" Тогда
		
		ОписаниеМоментаВремени = СтрокаДерева.Строки[0].Значение;
		Ссылка = XMLЗначение(Тип(ОписаниеМоментаВремени.Type), ОписаниеМоментаВремени.ValueRef);
		Дата = XMLЗначение(Тип("Дата"), ОписаниеМоментаВремени.ValueDate);
		ЗначениеПараметра = УКО_ОбщегоНазначенияВызовСервера_НовыйМоментВремени(Дата, Ссылка);
		
	ИначеЕсли ТипПараметра = "СписокЗначений" Тогда
		
		ЗначениеПараметра = Новый СписокЗначений;
		Для Каждого СтрокаПараметр Из СтрокаДерева.Строки Цикл //Блок Items
			ЗначениеПараметра.Добавить (УКО_ЧтениеQ1C_ЧтениеЗначенияПараметраЗапроса(СтрокаПараметр));
		КонецЦикла;
		
	Иначе
		
		ЗначениеПараметра = УКО_ЧтениеQ1C_ЧтениеЗначенияСТипом(ДанныеПараметра);
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция УКО_ЧтениеQ1C_ЧтениеЗначенияСТипом(ДанныеЗначения, ОписаниеТипов = Неопределено)
	
	Значение = Неопределено;
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов(ДанныеЗначения.Type);
		Тип = Тип(ДанныеЗначения.Type);
	Иначе
		Типы = Новый Массив;
		Тип = ОписаниеТипов.Типы()[0];
		Типы.Добавить(Тип);
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
	КонецЕсли;
	
	Если ДанныеЗначения.Свойство("Value") Тогда
		Значение = XMLЗначение(Тип, ДанныеЗначения.Value);
	КонецЕсли;
	
	Возврат ОписаниеТипов.ПривестиЗначение(Значение);
	
КонецФункции

Функция УКО_ЧтениеQ1C_ЧтениеЗначенияТаблицыЗначений(СтрокаДерева)
	
	Колонки = Новый ТаблицаЗначений;
	Колонки.Колонки.Добавить("Имя");
	Колонки.Колонки.Добавить("Тип");
	Колонки.Колонки.Добавить("Длина");
	
	ЗначенияЯчеек = Новый Массив;
	
	Для Каждого СтрокаItem Из СтрокаДерева.Строки Цикл 
		
		ДанныеЯчейки = СтрокаItem.Значение;
		ИмяКолонки = ДанныеЯчейки.nameCol;
		ДлинаТипаКолонки = УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(ДанныеЯчейки, "Length", 0);
				
		// Получаем данные колонки
		НайденнаяСтрока = Колонки.Найти(ИмяКолонки, "Имя");
		Если НайденнаяСтрока = Неопределено Тогда
			
			СтрокаКолонка = Колонки.Добавить();
			СтрокаКолонка.Имя = ИмяКолонки;
			ТипКолонки = Новый Массив;
			СтрокаКолонка.Тип = ТипКолонки;
			СтрокаКолонка.Длина = ДлинаТипаКолонки;
			
		Иначе
			
			СтрокаКолонка = НайденнаяСтрока;
			
			ДлинаТипа = НайденнаяСтрока.Длина;
			Если ДлинаТипа = 0 ИЛИ ДлинаТипаКолонки = 0 Тогда
				ДлинаТипа = 0;
			Иначе
				ДлинаТипа = Макс(НайденнаяСтрока.Длина, ДлинаТипаКолонки);
			КонецЕсли;
			СтрокаКолонка.Длина = ДлинаТипа;
			
			ТипКолонки = СтрокаКолонка.Тип;
			
		КонецЕсли;
		
		Если ТипКолонки.Найти(ДанныеЯчейки.Type) = Неопределено Тогда
			ТипКолонки.Добавить(ДанныеЯчейки.Type);
		КонецЕсли;
		
		// Получаем значения ячеек
		ОписаниеЯчейки = Новый Структура("ИндексКолонки, ИндексСтроки, Значение", Число(ДанныеЯчейки.Col), Число(ДанныеЯчейки.Row), УКО_ЧтениеQ1C_ЧтениеЗначенияСТипом(ДанныеЯчейки));
		ЗначенияЯчеек.Добавить(ОписаниеЯчейки);
		
	КонецЦикла;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Колонки Цикл 
		
		Если Колонка.Длина = 0 Тогда
			КвалификаторыСтроки = Неопределено;
		Иначе 
			КвалификаторыСтроки = Новый КвалификаторыСтроки(Колонка.Длина, ДопустимаяДлина.Фиксированная);
		КонецЕсли;
		
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(СтрСоединить(Колонка.Тип, ","),,КвалификаторыСтроки));
		
	КонецЦикла;
	
	Для Каждого ЗначениеЯчейки Из ЗначенияЯчеек Цикл 
		
		Если ТаблицаЗначений.Количество() < (ЗначениеЯчейки.ИндексСтроки + 1) Тогда
			ТаблицаЗначений.Добавить();
		КонецЕсли;
		
		ТаблицаЗначений[ЗначениеЯчейки.ИндексСтроки].Установить(ЗначениеЯчейки.ИндексКолонки, ЗначениеЯчейки.Значение);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции
// Читает данные файла MCR из временного хранилища и помещает в иерархический массив структур
//
// Параметры:
//   ЧитаемыеДанные - Строка - Адрес временного хранилища содержащего данные 
//   				- ДвоичныеДанные - Двоичные данные 
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор
//
// Возвращаемое значение:
//   Массив	- Массив (иерархический) содержит структуры
//
Функция УКО_MCRФорматВызовСервера_Прочитать(ЧитаемыеДанные, УникальныйИдентификатор) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ЧитаемыеДанные) Тогда
		ФайлZipДвоичныеДанные = ПолучитьИзВременногоХранилища(ЧитаемыеДанные);
	Иначе
		ФайлZipДвоичныеДанные = ЧитаемыеДанные;
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ФайлZipДвоичныеДанные.ОткрытьПотокДляЧтения());
	КаталогДляРаспаковки = ПолучитьИмяВременногоФайла();
	
	ЭлементZip = ЧтениеZipФайла.Элементы[0]; //берем первый файл (всегда один)
	ЧтениеZipФайла.Извлечь(ЭлементZip, КаталогДляРаспаковки);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогДляРаспаковки + ПолучитьРазделительПути() + ЭлементZip.Имя);
	
	НовоеДеревоДанных = УКО_XML_ПрочитатьВДерево(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	// Удалим временные файлы
	УдалитьФайлы(КаталогДляРаспаковки);
	
	КорневойЭлемент = НовоеДеревоДанных.Строки[0];
	ВерсияДанныхФайла = КорневойЭлемент.Значение.Version;
	
	Если ВерсияДанныхФайла > УКО_ОбщегоНазначенияКлиентСервер_MCRПоддерживаемаяВерсия() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неподдерживаемая версия данных %1, требуется обновление.'; en = 'Unsupported version of data %1, update required.'"), ВерсияДанныхФайла);
	КонецЕсли;
	
	Данные = УКО_MCRФормат_ПрочитатьДанные(КорневойЭлемент);
	УКО_MCRФормат_ДополнительнаяОбработкаДанныхПослеЗагрузки(Данные, УникальныйИдентификатор);
	
	Возврат Данные;
	
КонецФункции
// Получает значение поля по умолчанию по имени
//
// Параметры:
//   Имя - Строка - Имя поля
//
// Возвращаемое значение:
//   Произвольный - Значение поля по умолчанию
//
Функция УКО_MCRФорматКлиентСервер_ЗначениеПоляПоУмолчанию(Имя) Экспорт
	
	Если Имя = "Deploy" Тогда
		Результат = Истина;
	ИначеЕсли Имя = "UsingExternalFunctions" Тогда
		Результат = Ложь;
	ИначеЕсли Имя = "Dedicated" Тогда
		Результат = Ложь;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УКО_ОбщегоНазначенияКлиентСервер_ДобавитьЗначениеВМассив(Массив, Значение, ПроверкаДублирования = Истина)
	
	ДобавитьЗначение = (ПроверкаДублирования = Ложь) 
			ИЛИ Массив.Найти(Значение) = Неопределено;
		
	Если ДобавитьЗначение Тогда
		Массив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры
// Возвращает последнюю поддерживаемую версию формата MCR
// Возвращаемое значение:
//   Строку - Последняя версия MCR
Функция УКО_ОбщегоНазначенияКлиентСервер_MCRПоддерживаемаяВерсия() Экспорт
	
	Возврат "1.9";
	
КонецФункции
// Получает тип поля по имени
//
// Параметры:
//   Имя - Строка - Имя поля
//
// Возвращаемое значение:
//   Тип - Тип поля
//
Функция УКО_MCRФорматКлиентСервер_ТипЗначенияПоля(Имя) Экспорт
	
	Если Имя = "Name" Тогда
		Результат = Тип("Строка");
	ИначеЕсли Имя = "Text" Тогда
		Результат = Тип("Строка");
	ИначеЕсли Имя = "Dedicated" Тогда
		Результат = Тип("Булево");
	ИначеЕсли Имя = "UsingExternalFunctions" Тогда
		Результат = Тип("Булево");
	ИначеЕсли Имя = "Deploy" Тогда
		Результат = Тип("Булево");
	ИначеЕсли Имя = "MaxCount" Тогда
		Результат = Тип("Число");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает подсказку к описанию типа
//
// Параметры:
//   Код - Строка - Код
//   ПрерыватьПриОшибке - Булево - Прерывать при ошибке
//   Транзакция - Перечисление.УКО_ТипТранзакцииОбработкиРезультата - Транзакция
//
// Возвращаемое значение:
//   Структура	- Описание алгоритма
//
Функция УКО_MCRФорматКлиентСервер_ОписаниеАлгоритмаОбработки(Код = "", Знач ПрерыватьПриОшибке = Неопределено, Знач Транзакция = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Код", Код);
	
	Если ПрерыватьПриОшибке = Неопределено Тогда
		ПрерыватьПриОшибке = Ложь;
	КонецЕсли;
	Результат.Вставить("ПрерыватьПриОшибке", ПрерыватьПриОшибке);
	
	Если Транзакция = Неопределено Тогда
		Транзакция = "Перечисление.УКО_ТипТранзакцииОбработкиРезультата.ПоСтроке";
	КонецЕсли;
	Результат.Вставить("Транзакция", Транзакция);
	
	Возврат Результат;
	
КонецФункции

Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповБезNull(ОписаниеТипов) Экспорт
	
	Возврат	Новый ОписаниеТипов(ОписаниеТипов,,"Null");
	
КонецФункции

Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов, ИсключатьNull = Истина)
	
	Результат = Неопределено;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ИсключатьNull И Тип = Тип("Null") Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = Тип;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// Возвращает версию расширения
// Возвращаемое значение:
//   Строка	- версию расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения() Экспорт
	
	Возврат "3.8.9";
	
КонецФункции
// Проверяет это один из типов строки СКД
//
// Параметры:
//   Тип - Перечисление.УКО_ЭлементыДанных - Тип
//
// Возвращаемое значение:
//   Булево - Истина, если это один из типов СКД
//
Функция УКО_ДанныеКлиентСервер_ЭтоОдинИзТиповСтрокиСКД(Тип) Экспорт
	
	Возврат	Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ВариантОтчетаСКД"
				ИЛИ Тип = "Перечисление.УКО_ЭлементыДанных.ПользовательскаяНастройкаСКД";
				
КонецФункции
// Возвращает описание внешнего источника
//
// Параметры:
//   Имя - Строка - Имя
//   Тип - Перечисление.УКО_ТипыЗначенийВнешнегоИсточника - Тип значения внешнего источника
//   Значение - Строка - Значение
//
// Возвращаемое значение:
//   Структура	- Описание внешнего источника
//
Функция УКО_ДанныеКлиентСервер_ОписаниеВнешнегоИсточника(Имя = Неопределено, Тип = Неопределено, Значение = Неопределено) Экспорт
	
	Возврат Новый Структура("Имя, Тип, Значение", Имя, Тип, Значение);
	
КонецФункции
// Проверяет это режим выполнения с результатом
//
// Параметры:
//  Режим  - Перечисление.УКО_РежимВыполненияЗапроса, Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных - Режим выполнения
//
// Возвращаемое значение:
//   Булево - Истина, Режим выполнения с результатом
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоРежимВыполненияСРезультатом(Режим) Экспорт
	
	Возврат Режим = "Перечисление.УКО_РежимВыполненияЗапроса.Выполнение"
		ИЛИ Режим = "Перечисление.УКО_РежимВыполненияЗапроса.СРезультатамиВременныхТаблиц"
		ИЛИ Режим = "Перечисление.УКО_РежимВыполненияСхемыКомпоновкиДанных.Выполнение";
	
КонецФункции
// Возвращает описание вывода временной таблицы
//
// Параметры:
//   Вывод - Перечисление.УКО_ВыводВременнойТаблицы - Вывод временной таблицы
//
// Возвращаемое значение:
//   Структура	- Описание вывода временной таблицы
//
Функция УКО_ДанныеКлиентСервер_ОписаниеВыводаВременнойТаблицы(Вывод = Неопределено) Экспорт
	
	Если Вывод = Неопределено Тогда
		Вывод = НСтр("ru = 'Выводить'; en = 'Output'");
	КонецЕсли;
	
	Возврат Новый Структура("Вывод", Вывод);
	
КонецФункции
// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + УКО_СтрокиКлиентСервер_НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает описание настроек вывода временной таблицы
//
// Параметры:
//   Данные - Данные - Данные
//   Имя - Строка - Имя временной таблицы
//
// Возвращаемое значение:
//   Структура	- Описание настроек вывода временной таблицы
//
Функция УКО_ДанныеКлиентСервер_ПолучитьОписаниеВыводаВременнойТаблицы(Данные, Имя) Экспорт
	
	ВыводВременныхТаблиц = Данные.ВыводВременныхТаблиц;
	
	Результат = ВыводВременныхТаблиц.Получить(Имя);
	Если Результат = Неопределено Тогда
		Результат = УКО_ДанныеКлиентСервер_ОписаниеВыводаВременнойТаблицы();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Возвращает код русского языка
// Возвращаемое значение:
//   Строка	- Код русского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаРусский() Экспорт
	Возврат "ru";
КонецФункции
// Возвращает описание границы
//
// Параметры:
//   Значение - Граница, Дата, МоментВремени - Значение
//   Вид - Перечисление.УКО_ВидГраницы - Вид границы (по умолчанию: Включая)
//
// Возвращаемое значение:
//   Структура	- Описание границы
//
Функция УКО_ЗапросКлиентСервер_ОписаниеГраницы(Значение, Вид = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если Вид = Неопределено Тогда
		Вид = "Перечисление.УКО_ВидГраницы.Включая";
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Значение", Вид, Значение);
	
КонецФункции
// Получить строку Этапа процесса по шаблону 
//
// Параметры:
//   Текст - Строка - Текст
//   Шаг - Число - Шаг
//   КоличествоШагов - Число - Общее число шагов
//
// Возвращаемое значение:
//   Строка	- Представление этапа
//
Функция УКО_ДлительныеОперацииКлиентСервер_ТекстЭтапаПроцесса(Текст, Шаг, КоличествоШагов) Экспорт
	
	Если КоличествоШагов = 1 Тогда
		ТекстЭтапа = Текст;
	Иначе 
		ТекстЭтапа = СтрШаблон("(%1/%2) - %3", Шаг, КоличествоШагов, Текст);
	КонецЕсли;
	
	Шаг = Шаг + 1;
	
	Возврат ТекстЭтапа;
	
КонецФункции
// Возвращает информацию о ошибке в тексте запрос
//
// Параметры:
//   ТекстОшибки - Строка - Текст ошибки вида //{(1, 1)}: Ожидается ВЫБРАТЬ
//   АнализируетсяПланЗапроса - Булево - Анализируется план запроса (присутствуют маркировочные запросы)
//
// Возвращаемое значение:
//   Структура - Информация о ошибке
//   	*Текст - Строка - Текст ошибки
//   	*НомерСтроки - Число - Номер строки
//   	*НомерСтолбца - Число - Номер столбцы
Функция УКО_ЗапросКлиентСервер_ИнформацияООшибке(ТекстОшибки, АнализируетсяПланЗапроса = Ложь) Экспорт
	
	// Разбирает строку ошибки запроса
	// Например: {(19, 2)}: Синтаксическая ошибка "Справочник.Товары"
	// <<?>>Справочник.Товары КАК Товары	
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 1;
	Если УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(ТекстОшибки, Индекс) = "{" Тогда
		
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, "(", Индекс);
		НомерСтроки = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, ", ", Индекс);
		НомерСтолбца = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, ")}: ", Индекс);
		Текст = УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ТекстОшибки, "", Индекс);
		
		Если АнализируетсяПланЗапроса Тогда
			НомерСтроки = НомерСтроки - 1;
		КонецЕсли;
		
	Иначе 
		
		Текст = ТекстОшибки;
		НомерСтроки = 1; НомерСтолбца = 1;
		
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("Текст", Текст);
	Ошибка.Вставить("НомерСтроки", НомерСтроки);
	Ошибка.Вставить("НомерСтолбца", НомерСтолбца);
	
	Возврат Ошибка;
	
КонецФункции
// Чтение целого число из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Число(Результат);
	
КонецФункции

Функция УКО_СтрокиКлиентСервер_НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции
// Чтение набора символов
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НаборСимволов - Строка - Набор символов
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка
//
Функция УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Строка, НаборСимволов, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = "";
	
	Для Индекс = 1 По СтрДлина(НаборСимволов) Цикл 
		Результат = Результат + УКО_СтрокиКлиентСервер_РазборПропуститьСимвол (Строка, Сред(НаборСимволов, Индекс, 1), НачальныйИндекс, СмещатьИндекс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_СтрокиКлиентСервер_РазборПропуститьСимвол(Строка, Символ, НачальныйИндекс, СмещатьИндекс = Истина)
	
	Результат = "";
	
	Если Сред(Строка, НачальныйИндекс, 1) = Символ Тогда
		
		Результат = Символ;
		
		Если СмещатьИндекс Тогда
			НачальныйИндекс = НачальныйИндекс + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Чтение символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный символ
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = Сред(Строка, НачальныйИндекс, 1);
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = НачальныйИндекс + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Чтение строки до символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Символ - Строка - Стоп символ
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка до стоп символа
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(Строка, Символ, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = Неопределено Тогда
		Индекс = СтрНайти(Строка, Символ, , НачальныйИндекс);
	Иначе
		Индекс = СтрНайти(Строка, Символ, Направление, НачальныйИндекс);
	КонецЕсли;
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Получает картинку по типу
//
// Параметры:
//  Тип  - Тип - Тип
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип) Экспорт
	
	Если Тип = Тип("ТаблицаЗначений") Тогда 
		Результат = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъектаКоллекцииМетаданных = УКО_СтрокиКлиентСервер_РазборПрочитатьИдентификатор(ОбъектМетаданных.ПолноеИмя());
			Результат = БиблиотекаКартинок[ИмяОбъектаКоллекцииМетаданных];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Возвращает фрагмент текста запроса, отделяющего один запрос от другого (используется в пакетных запросах).
//
// Возвращаемое значение:
//  Строка - разделитель запросов. ///////////////////////////////////////////////////////////////////////////////
//
Функция УКО_ЗапросКлиентСервер_РазделительПакетов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции
// Новое значение сложного параметра
//
// Параметры:
//   Вид - Перечисление.УКО_СложныйПараметрЗапроса - Вид
//   Значение - Произвольный - Значение
//   Представление - Строка - Представление
//
// Возвращаемое значение:
//   Структура - Данные сложного параметра
//
Функция УКО_ЗапросКлиентСервер_ЗначениеСложногоПараметра(Вид, Значение, Представление = "") Экспорт
	
	Если Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Выражение" Тогда
		
		Представление = УКО_СтрокиКлиентСервер_Сокращенно(Значение, 70);
		
	ИначеЕсли Вид = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		
		Представление = НСтр("ru = '<Таблица значений>'; en = '<Table of values>'");
		
	ИначеЕсли Вид = "Перечисление.УКО_СложныйПараметрЗапроса.Граница" Тогда
		
		Если Значение.Вид = "Перечисление.УКО_ВидГраницы.Включая" Тогда
			ВидПредставление = НСтр("ru = 'Включая'; en = 'Including'");
		ИначеЕсли Значение.Вид = "Перечисление.УКО_ВидГраницы.Исключая" Тогда
			ВидПредставление = НСтр("ru = 'Исключая'; en = 'Excluding'");
		КонецЕсли;
		
		Представление = СтрШаблон("%1; %2", ВидПредставление, Значение.Значение);
		
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Значение, Представление", Вид, Значение, Представление);
	
КонецФункции
// Чтение незначащих символов (пробел, табуляция, перенос строки)
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанные незначимые символы
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс); 
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
			
			Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборНезначащихСимволов(), Сред(Строка, Индекс, 1)) Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Форматирует текст укорачивая до заданной длины
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   Многострочная - Булево - Многострочное использование
//
// Возвращаемое значение:
//   Строка - Отформатированный текст
//
Функция УКО_СтрокиКлиентСервер_Сокращенно(Текст, Количество, Многострочная = Ложь) Экспорт
	
	ТекстМногострочный = УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Текст);
	
	Если ТекстМногострочный
		И НЕ Многострочная Тогда
		
		ПерваяСтрока = СтрПолучитьСтроку(Текст, 1);
		Результат = УКО_СтрокиКлиентСервер_Сократить(ПерваяСтрока, Количество, Истина);
		
	Иначе
		
		Результат = УКО_СтрокиКлиентСервер_Сократить(Текст, Количество);
		
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции
// Проверяет строка многострочная?
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, если строка многострочная
//
Функция УКО_СтрокиКлиентСервер_МногострочнаяСтрока(Строка) Экспорт
	
	Возврат Булево(СтрНайти(Строка, Символы.ПС));
	
КонецФункции

Функция УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов, ИсключатьNull = Истина) Экспорт
	
	Результат = ОписаниеТипов.Типы().Количество();
	Если ИсключатьNull Тогда
		
		Если ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
			Результат = Результат - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Сокращает текст до N символов
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   ВсегдаДобавлятьЗавершение - Булево - Всегда добавлять завершающий символы ...
//
// Возвращаемое значение:
//   Строка - Сокращенная строка
//
Функция УКО_СтрокиКлиентСервер_Сократить(Текст, Количество, ВсегдаДобавлятьЗавершение = Ложь) Экспорт
	
	Завершение = "...";
	НормальнаяДлина = Количество - СтрДлина(Завершение);
	
	Длина = СтрДлина(Текст);
	Если Длина > НормальнаяДлина Тогда
		
		Результат = Лев(Текст, НормальнаяДлина) + Завершение;
		
	Иначе
		
		Результат = Текст;
		Если ВсегдаДобавлятьЗавершение Тогда
			Результат = Результат + Завершение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Возвращает по объекту метаданных доступны ли для него предопределенные элементы
//
// Параметры:
//   ИмяОбъекта - Строка - Имя объекта метаданных
//
// Возвращаемое значение:
//   Булево - Истина, доступны предопределенные элементы
//
Функция УКО_МетаданныеКлиентСервер_ОбъектCПредопределенными(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Справочник" 
				ИЛИ ИмяОбъекта = "Catalog"
				ИЛИ УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта)
				ИЛИ ИмяОбъекта = "ПланВидовХарактеристик"
				ИЛИ ИмяОбъекта = "ChartOfCharacteristicTypes"
				ИЛИ ИмяОбъекта = "ПланСчетов"
				ИЛИ ИмяОбъекта = "ChartOfAccounts"
				ИЛИ ИмяОбъекта = "ПланВидовРасчета"
				ИЛИ ИмяОбъекта = "ChartOfCalculationTypes";

КонецФункции
// Возвращает шрифт особых значений
// Возвращаемое значение:
//   Шрифт - Шрифт
Функция УКО_ОбщегоНазначенияКлиентСервер_ШрифтОсобыхЗначенийРезультата() Экспорт
	Возврат Новый Шрифт(,,Истина);
КонецФункции
// Возвращает Описание типов строка)
// Параметры:
//   ДлинаСтроки - Число - Длина строки
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов строка
Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповСтрока(ДлинаСтроки = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
	
КонецФункции
// Определяет этот объект перечисление
//
// Параметры:
//   ИмяОбъекта - Строка - Объект метаданных
//
// Возвращаемое значение:
//   Булево - Истина, это имя перечисление
//
Функция УКО_МетаданныеКлиентСервер_ЭтоОбъектПеречисление(ИмяОбъекта) Экспорт
	
	Возврат ИмяОбъекта = "Перечисление" 
				ИЛИ ИмяОбъекта = "Enum";

КонецФункции
// Возвращает информацию о ошибке строки данных
//
// Параметры:
//   ТекстОшибки - Строка - Текст ошибки вида 
//							Ошибка разбора XML:  - [2,4] Фатальная ошибка: Extra content at the end of the document
// Возвращаемое значение:
//   Структура - Информация о ошибке
//   	*Текст - Строка - Текст ошибки
//   	*НомерСтроки - Число - Номер строки
//   	*НомерСтолбца - Число - Номер столбцы
//
Функция УКО_СКДКлиентСервер_ИнформацияООшибке(ТекстОшибки) Экспорт
	
	// Разбирает строку ошибки СКД
	// Например: "Ошибка разбора XML:  - [1,1]
	// Фатальная ошибка: 
	// Document is empty"

	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = 1;
	УКО_СтрокиКлиентСервер_РазборНайтиТекст(ТекстОшибки, " - [", Индекс);
	НомерСтроки = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
	УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, ",", Индекс);
	НомерСтолбца = УКО_СтрокиКлиентСервер_РазборПрочитатьЦелоеЧисло(ТекстОшибки, Индекс);
	УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(ТекстОшибки, "]", Индекс);
	УКО_СтрокиКлиентСервер_РазборПрочитатьНезначимые(ТекстОшибки, Индекс);
	Текст = УКО_СтрокиКлиентСервер_РазборПрочитатьДоСимвола(ТекстОшибки, "", Индекс);
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", Текст);
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("НомерСтолбца", НомерСтолбца);
	
	Возврат Результат;
	
КонецФункции
// Возвращает доступные типы объекта
//
// Параметры:
//   КодЯзыка - Строка - Код языка
//
// Возвращаемое значение:
//   Массив - Строки доступных типов объектов
//
Функция УКО_МетаданныеКлиентСервер_ДоступныеТипыОбъекта(КодЯзыка = "ru") Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(НСтр("ru = 'Справочник'; en = 'Catalog'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'Документ'; en = 'Document'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'Перечисление'; en = 'Enum'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'ПланВидовХарактеристик'; en = 'ChartOfCharacteristicTypes'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'ПланСчетов'; en = 'ChartOfAccounts'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'ПланВидовРасчета'; en = 'ChartOfCalculationTypes'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'ПланОбмена'; en = 'ExchangePlan'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'БизнесПроцесс'; en = 'BusinessProcess'", КодЯзыка));
	Результат.Добавить(НСтр("ru = 'Задача'; en = 'Task'", КодЯзыка));
	
	Возврат Результат;
	
КонецФункции

Функция УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = "QWERTYUIOPASDFGHJKLZXCVBNM";
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции
// Возвращает текст состояния обработки результата
//
// Параметры:
//   Обработано - Число - Количество обработанных строк
//   Количество - Число - Общее количество строк
//   КоличествоОшибок - Число - Количество ошибок
//   НачалоВыполнения - Дата - Дата, время начала выполнения
//   Прошло - Число - Количество секунд прошедшее с момента начала
//   Кратко - Булево - Краткое или полное пояснение (полное для отдельной формы, краткое для функции Состояние)
//
// Возвращаемое значение:
//   Строка - Пояснение состояния обработки результата
Функция УКО_ОбработкаРезультатаКлиентСервер_ПояснениеСостояния(Обработано, Количество, КоличествоОшибок, НачалоВыполнения, Прошло, Кратко = Истина) Экспорт
	
	Прошло = Цел(Прошло);
	ОцениваетсяТекст = НСтр("ru = 'оценивается...'; en = 'estimates...'");
	
	Если Обработано = 0 
			ИЛИ Прошло = 0 Тогда
		Осталось = Неопределено;
		СредняяСкорость = ОцениваетсяТекст;
		Если Обработано = 0 Тогда
			ПреставлениеОсталось = ОцениваетсяТекст;
		Иначе
			ПреставлениеОсталось = УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(0);
		КонецЕсли;
		ДатаОкончания = Неопределено;
	Иначе
		Осталось = ((Количество - Обработано) * Прошло)/Обработано;
		СредняяСкорость = Окр(Обработано / Прошло, 1);
		ПреставлениеОсталось = УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(Осталось);
		ДатаОкончания = НачалоВыполнения + Осталось;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата();
	Если ДатаОкончания = Неопределено Тогда	
		ПредставлениеОкончания = ОцениваетсяТекст;
	ИначеЕсли НачалоДня(ТекущаяДата) = НачалоДня(ДатаОкончания) Тогда
		ПредставлениеОкончания = Формат(ДатаОкончания,"ДЛФ=T");
	ИначеЕсли НачалоДня(ТекущаяДата + 24*60*60) = НачалоДня(ДатаОкончания) Тогда
		ПредставлениеОкончания = СтрШаблон(НСтр("ru = 'завтра %1'; en = 'tomorrow %1'"), Формат(ДатаОкончания,"ДЛФ=T"));
	Иначе
		ПредставлениеОкончания = Формат(ДатаОкончания, "ДЛФ=DT");
	КонецЕсли;

	Результат = СтрШаблон(НСтр("ru = 'Обработано: %1/%2, осталось: %3'; en = 'Processed: %1/%2, %3 left'"),	Обработано,	Количество,	ПреставлениеОсталось);
	
	Если ЗначениеЗаполнено(КоличествоОшибок) Тогда
		Результат = Результат + СтрШаблон(НСтр("ru = ', ошибок: %1'; en = ', errors: %1'"), КоличествоОшибок);
	КонецЕсли;
		
	Если Не Кратко Тогда
		Результат = Результат + Символы.ПС + СтрШаблон(НСтр("ru = 'Прошло: %1, Окончание: %2
			|Скорость (средняя) строк/сек: %3'; en = 'Elapsed: %1, Ending: %2
			|Speed (average) of rows/sec: %3'"), УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(Прошло), ПредставлениеОкончания, СредняяСкорость);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Возвращает краткое представление интервала времени (в секундах)
//
// Параметры:
//   КоличествоСекунд - Число - Количество секунд в интервале
//
// Возвращаемое значение:
//   Строка - Представление интервала
//
Функция УКО_СтрокиКлиентСервер_КраткоеПредставлениеИнтервалаВремени(КоличествоСекунд) Экспорт
	
	КоличествоСекунд = Цел(КоличествоСекунд);
	
	Если КоличествоСекунд = 0 Тогда
		Возврат НСтр("ru = 'меньше секунды'; en = 'less than a second'");
	КонецЕсли;
	
	СекундВМинуте = 60;
	СекундВЧасе = 60 * СекундВМинуте;
	СекундВДне = 24 * СекундВЧасе;
	СекундВНеделе = 7 * СекундВДне;
	СекундМесяце = 30 * СекундВНеделе;
	
	Результат = Новый Массив;
	ОстатокИнтервала = КоличествоСекунд;
	
	Месяцев = Цел(ОстатокИнтервала/СекундМесяце);
	ОстатокИнтервала = ОстатокИнтервала % СекундМесяце;
	Если ЗначениеЗаполнено(Месяцев) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 мес.'; en = '%1 m.'"), Месяцев));
	КонецЕсли;
	
	Недель = Цел(ОстатокИнтервала/СекундВНеделе);
	ОстатокИнтервала = ОстатокИнтервала % СекундВНеделе;
	Если ЗначениеЗаполнено(Недель) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 нед.'; en = '%1 w.'"), Недель));
	КонецЕсли;
	
	Дней = Цел(ОстатокИнтервала/СекундВДне);
	ОстатокИнтервала = ОстатокИнтервала % СекундВДне;
	Если ЗначениеЗаполнено(Дней) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 дн.'; en = '%1 d.'"), Дней));
	КонецЕсли;
	
	Часов = Цел(ОстатокИнтервала/СекундВЧасе);
	ОстатокИнтервала = ОстатокИнтервала % СекундВЧасе;
	Если ЗначениеЗаполнено(Часов) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 ч.'; en = '%1 h.'"), Часов));
	КонецЕсли;
	
	Минут = Цел(ОстатокИнтервала/СекундВМинуте);
	ОстатокИнтервала = ОстатокИнтервала % СекундВМинуте;
	Если ЗначениеЗаполнено(Минут) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 мин.'; en = '%1 min.'"), Минут));
	КонецЕсли;
	
	Если КоличествоСекунд < 15 * 60 Тогда
	
		Если Минут > 1 Тогда
			ОстатокИнтервала = Цел(ОстатокИнтервала / 15) * 15; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОстатокИнтервала) Тогда
			Результат.Добавить(СтрШаблон(НСтр("ru = '%1 сек.'; en = '%1 sec.'"), ОстатокИнтервала));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции
// Возвращает текст ошибки когда СКД пустая
//
// Возвращаемое значение:
//   Строка	- текст ошибки когда СКД пустая
//
Функция УКО_СКДКлиентСервер_ТекстОшибкиПустаяСхема() Экспорт

	ТекстОшибки = НСтр("ru = 'Ошибка разбора XML:  - [1,1]
	|Фатальная ошибка: 
	|Extra content at the end of the document'; en = 'XML parsing error: - [1,1]
	|Fatal error: 
	|Extra content at the end of the document'");
	
	Возврат ТекстОшибки;

КонецФункции 
// Вычисляет значение выражения на встроенном языке
//
// Параметры:
//  Алгоритм  - Строка - Алгоритм на встроенном языке
//  Комментарий  - Строка - Комментарий
//
// Возвращаемое значение:
//   Произвольный - Результат вычисления выражения на встроенном языке
//
Функция УКО_ОбщегоНазначенияВызовСервера_ВычислитьВыражениеНаВстроенномЯзыке(Алгоритм, Комментарий) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		
		Результат = УКО_ОбщегоНазначения_ВычислитьРезультатВыражениеВБезопасномРежиме(Алгоритм);
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке().Причина.Описание;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СтрШаблон(НСтр("ru = 'Вычисление выражения (%1):
		|%2
		|Ошибка: %3'; en = 'The computation of the expression (%1):
		|%2
		|Error: %3'"), Комментарий, Алгоритм, ОписаниеОшибки);
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
// Получает момент времени
//
// Параметры:
//   Дата - Дата - Дата
//   Ссылка - Ссылка - Ссылка (необязательный)
//
// Возвращаемое значение:
//   МоментВремени	- Момент времени
//
Функция УКО_ОбщегоНазначенияВызовСервера_НовыйМоментВремени(Дата, Ссылка = Неопределено) Экспорт
	
	Возврат Новый МоментВремени(Дата, Ссылка);
	
КонецФункции
// Возвращает имя расширения
// Возвращаемое значение:
//   Строка	- Имя расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения() Экспорт 
	
	Возврат НСтр("ru = 'Управляемая консоль отчетов'; en = 'Managed reporting console'");
	
КонецФункции
// Возвращает идентификатор расширения
// Возвращаемое значение:
//   Строка	- Идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширения() Экспорт 
	
	Возврат "УправляемаяКонсольОтчетов";
	
КонецФункции
// Возвращает сокращенный идентификатор расширения
// Возвращаемое значение:
//   Строка	- Сокращенный идентификатор расширения
Функция УКО_ОбщегоНазначенияКлиентСервер_ИдентификаторРасширенияСокращенный() Экспорт 
	
	Возврат "УКО";
	
КонецФункции
// Проверяет это простой тип
//
// Параметры:
//   Тип - Тип - Тип
//
// Возвращаемое значение:
//   Булево - Если тип простой
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип)
	
	Результат = Тип = Тип("Null") ИЛИ Тип = Тип("Неопределено") ИЛИ Тип = Тип("Число") ИЛИ Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") 
				ИЛИ Тип = Тип("УникальныйИдентификатор") ИЛИ Тип = Тип("ХранилищеЗначения") ИЛИ Тип = Тип("Тип") ИЛИ Тип = Тип("МоментВремени") 
				ИЛИ Тип = Тип("Структура") ИЛИ Тип = Тип("ОписаниеТипов") ИЛИ Тип = Тип("ВидДвиженияБухгалтерии") ИЛИ Тип = Тип("ВидДвиженияНакопления")
				ИЛИ Тип = Тип("ВидСчета") ИЛИ Строка(Тип) = "НеизвестныйОбъект";
				
	#Если Сервер Тогда
		Результат = Результат ИЛИ Тип = Тип("РезультатЗапроса");
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции
// Возвращает полное имя расширения
//
// Возвращаемое значение:
//   Строка	- полное имя расширения
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения() Экспорт
	
	Возврат СтрШаблон("%1 %2", УКО_ОбщегоНазначенияКлиентСервер_ИмяРасширения(), УКО_ОбщегоНазначенияКлиентСервер_ВерсияРасширения());
	
КонецФункции
// Получает картинку типа
//
// Параметры:
//  Тип  - Тип - Тип
//  ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(Тип, ОписаниеТипов = Неопределено) Экспорт
	
	Если Тип = Тип("Неопределено") Тогда 
		Картинка = Новый Картинка;
	ИначеЕсли Тип = Тип("Тип")
			ИЛИ Тип = Тип("ОписаниеТипов") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuNvyMY98AAABoSURBVDhPY/j//z8DJZgizSCLB6EB" + Символы.ВК + Символы.ПС + "mpqa/52dHLFikBx6eGF4wczMFKTZG6QwNjbyPwiD2CAxkBxBA2Ca0Q2AGULQAGQF" + Символы.ВК + Символы.ПС + "yC7AFdV4Y2EkGwCKiYryov+geAdhEBs5dpADdBAmZVKzNgDOWtNtpSsLpgAAAABJ" + Символы.ВК + Символы.ПС + "RU5ErkJggg=="));
	ИначеЕсли Тип = Тип("Число") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB+SURBVDhPY2AYBVhDwKFr538QdmnbAsbO7Vv/" + Символы.ВК + Символы.ПС + "EwoqkIIGmCKQJmQNaHyQHIp6mFq4JpgGm779YDEsBoCEMVyFYgDIC86tm8GuQncR" + Символы.ВК + Символы.ПС + "1Eb8BsA0gQzBYgBhLyDbTpYLQM4EGQKLDaRAhTkdvxfIiQW4HlC8w9IAsemAUDoZ" + Символы.ВК + Символы.ПС + "xPIAH+BkJrGgRacAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Строка") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAB1SURBVDhPY2AYLOA/0CEg3ECpg0CGgIFD1044" + Символы.ВК + Символы.ПС + "m5ChIFthLoBrcmnbQrQByAqpawDIGyBs37kTb9ggewHkXbArkL1ASnjAwwvZAFLC" + Символы.ВК + Символы.ПС + "A6sBSC5Adi3+KAf5G2QzWhhgDXBC0YwsT3TU4jKUqgaQZRjxgUhswAAA9DFDYfgs" + Символы.ВК + Символы.ПС + "T48AAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("Булево") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAFPSURBVDhPY2CgBvCfqN8QvsjwPwiHLTD47zhZ" + Символы.ВК + Символы.ПС + "/L/zFKn/QbP1/7tPUv7vPUn9v32X1P+AiQb/QWox7ARpJBZ4Nxv8p8gA4zwxTJc4" + Символы.ВК + Символы.ПС + "TZXA64CA7bL//bfJgtUYZoqBaRSXOEwSBwsG7ZX7H7xPDsUwkGan6RL/rVpFweL6" + Символы.ВК + Символы.ПС + "KRDasxrJKzADQIrcl8r+B2kCAeu9ImDN+rlC/09ePgIxIBliAMgl8LBwmAhxAUgR" + Символы.ВК + Символы.ПС + "yBC3JTJgQ9A1g9ToJSFcAjcgdK4B3NkgQ0A2YtMMUuRarA93CdyAoBkIA2AuUfcT" + Символы.ВК + Символы.ПС + "gTsbOVCcciAGgFwCNyAQmECIBQ7pemClIJfADfDtJN4A+0SIASCXwA0AJU/PKgNg" + Символы.ВК + Символы.ПС + "yEr8d8nT+68TLfJfL1b8v32G9n/jGPn/FrGq/3WCgXyg5tqpRWADQC7BSJGkugTD" + Символы.ВК + Символы.ПС + "AM9KiEtcS/UJusQ+URczU5GTswEMEielMbjVjwAAAABJRU5ErkJggg=="));
	ИначеЕсли Тип = Тип("ВидДвиженияНакопления") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAz0lEQVQ4T2P4//8/RRirICkYQyB4" + Символы.ВК + Символы.ПС + "n/x/EEYXx4UxBAJ3yP33WSMDZKKKw/C6dev+gzCMD5cAafTbJPsfRDvPkAQbYlIm" + Символы.ВК + Символы.ПС + "ClcIwiCNiYmJKGJwhtcKGbBGEDarFvlvkCeEYgA2zSCMwgFhx6kSYM3IYrg0gzCG" + Символы.ВК + Символы.ПС + "gIa/6H/dZGEgE8LHpxmEsQrCMCHNIIxVEISJ0QzCWAWJ1QzCGALYND9Ldvt/014N" + Символы.ВК + Символы.ПС + "ju84acDl4YpAGJfNIE2HxBjgeIYoL1wNikKQAch8YjBWQVIwVkHi8X8GAOxy2Avy" + Символы.ВК + Символы.ПС + "wzimAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("ВидДвиженияБухгалтерии")
			ИЛИ Тип = Тип("ВидСчета") Тогда 
		Картинка = БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли Тип = Тип("Дата") Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAGPSURBVDhPrZPLSwJRFMb7k3rRH1GuWrRrHbQO" + Символы.ВК + Символы.ПС + "bNIcpUarTdSqx6akkoxCQkMqyBatIoJIIyeK6F2Olho6z69zb1hN2gNq4Mc55zvn" + Символы.ВК + Символы.ПС + "fPfCcOvq/uPTk2Ne3MbAOFmXcL0zCuQPeV1LY/O2c3c3p0Eix9fRAHnNAyt/8qUW" + Символы.ВК + Символы.ПС + "X/DBbrAxAXmp69fE50W7wfxqDHJqH/LRD9BMNnMLaWSg2sAsXsEsXMFisQLVFf2t" + Символы.ВК + Символы.ПС + "rxZqGxjZNIxcGk/9XVAcLZznmRGY2WOU4rO8NqlvlZTvDbgRLTH4EsWK6fcGd3sw" + Символы.ВК + Символы.ПС + "PqBTrjiawSLTK7lVvKl9A/0yAY3QL7fxJHRCaWtCccpN9avGau0iATN/XsMgEoF2" + Символы.ВК + Символы.ПС + "GiOi7/EsSkuN0M6YHuO5SrmZkyENeT/9hZVlqMdhqGk7mdYG0pegUe81D8NQjiAF" + Символы.ВК + Символы.ПС + "PHaDueVFqKkgyqlZPPa003A9Jz/ejXIy+KaxnvFwgEG/y24wFQrx6+sXWzDu93+k" + Символы.ВК + Символы.ПС + "TxTsBpOhkFcY8MI/LBJu+AMuQqhC8jvRKzohiIL9Mf3lRb8A8+FJK+/UducAAAAA" + Символы.ВК + Символы.ПС + "SUVORK5CYII="));
		Если ОписаниеТипов <> Неопределено Тогда
			Если ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC42/Ixj3wAAAcNJREFUOE+NU9suQ0EUPf/iDyTiI0g8eheJROIbCK8IEW2K" + Символы.ВК + Символы.ПС + "JkhoXB4qxKWkfdC4tklzSvUitIi6t6Vu1Vq6hjk9cwgeTiYzZ9Zlr71Ha2/VNPPX" + Символы.ВК + Символы.ПС + "2T/YPDM/h16HE119g2LlnufWu9wr4PnVJTinZqEfxHGXu8dToYCrTAZBfR9Drmnw" + Символы.ВК + Символы.ПС + "v5XEICgrYCekowTgrfSO12IRVU19yD+/IPf4hLv7PHwb23SikAgC9/IiguF9BUx1" + Символы.ВК + Символы.ПС + "EkjwdSaH9E0G3o1d8L50orE2p2vmG5jKJKCyBJ9d3iJ1fgXb2KSRicaA9GjcsE1l" + Символы.ВК + Символы.ПС + "aZsEB6m0UJbgo9MLrPl3RLAixG77MLIPeVGzGUxlElS32RFKnAplghOpc4QiCfQ4" + Символы.ВК + Символы.ПС + "Rj4JOnoHBDhXX6sE5gnG0DAcxsJmRAFftzRiL54ULTYc3GSzKjgQE8p0YFaOHp0h" + Символы.ВК + Символы.ПС + "cniCQDhaccBa2GeZtucLTGUSSNsSvJdIYtHrr2TALnBIWHMkmRbKVttmsB47xsDo" + Символы.ВК + Символы.ПС + "RKULrIMT5i0PCdO2BmYFu1d8ykQqk7i6vqXUnK2rETXTNpXdHh86v8IzBsk823Ri" + Символы.ВК + Символы.ПС + "G3eJPrNVTJuBsWba/vUtSCL5Gtlntorrv1/jT8/1r7MPBZCljqnY77MAAAAASUVO" + Символы.ВК + Символы.ПС + "RK5CYII="));
			ИначеЕсли ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда
				Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAIuSURBVDhPrZPbTxNREMb5Y3xXo/HZZ9TE8GB8" + Символы.ВК + Символы.ПС + "8UFNaGJMrHcboNuKULsGGxUTKTWxSm2slhDTJVVMhBB80BgKQu1l2ULbZQu90QK9" + Символы.ВК + Символы.ПС + "bbef52yhTSOoD57kl8nMOfPNZCanre1/HHnxkQEJDhT+Yx9WZyxAfkH194rR9y11" + Символы.ВК + Символы.ПС + "v30aBgmqGM8cRnhcj1qe3zfmfW1Eq8DEM4Tfav4Zr4NpFXC85xD2zyL88y+QN5lU" + Символы.ВК + Символы.ПС + "An1s7+8CypYIZVNEjdpdiL8bb9yXN/cWqGZCqGZDyPVokD55TGX7BQslE0TRa1d9" + Символы.ВК + Символы.ПС + "hdzXiuk/C6hCJIlCkwJ8BBarHc+dbthcHgy9csEw8BRahu1uDJLOoLr2vQWZ+FTA" + Символы.ВК + Символы.ПС + "PGhDKp1FYVlAIJrARjik2tMXtU0RKiDHJ1EhyPEp5HTnkD5xBD3sEyTTGZRW4yhK" + Символы.ВК + Символы.ПС + "Ig5csCAhRCEEI+BjCXR2mevDdIyNoSJwBE/TRjywjrhAj1zYRrGi4LhxFOO+KOYi" + Символы.ВК + Символы.ПС + "KaxkS7hlerwjMOpGOehCOdQKNzGFZZZBsSQjKOVxtKMT3gUJ00tZTOru4Bqz08GI" + Символы.ВК + Символы.ПС + "+w3K/pco+e3YuNGBVPshlWHHOxRkBQev2BpMCzl4fCJ+SFu4rGfrHVidTrV9OfYZ" + Символы.ВК + Символы.ПС + "1fXZBvoHg1gS1xEJCpib59XK3JcAPsz4sSIlcUqjqwsMOZ0GXa8B/WaG0I1+UxdB" + Символы.ВК + Символы.ПС + "p1qyLohrSfC+RdL2bfi+ziNGktvPX8XZm/ebq9zvV9N9X2IGcP2eBVq9Cdq7D2li" + Символы.ВК + Символы.ПС + "I/kXf1WIeuufWvwAAAAASUVORK5CYII="));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAABFSURBVDhPY2AYPiA7O/s/CMN8BOMj0Q14fYvL" + Символы.ВК + Символы.ПС + "ADQDcRtCyACQQVA12A0hwQC4N1G8NKQMIC8M8AYgUgiTnw6GT5Yg2ScAOrt7BzPC" + Символы.ВК + Символы.ПС + "tocAAAAASUVORK5CYII="));
	ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwAAADsABataJCQAAAB90RVh0U29mdHdhcmUAUGFpbnQuTkVU" + Символы.ВК + Символы.ПС + "ID8/Pz8/PyAzLjUuNefKA2EAAAH5SURBVDhPrZPfT1JhGMf507qQOaVaxpRumZCQ" + Символы.ВК + Символы.ПС + "5fLGiyhlaxEGGmvFKjEhRTaXsxyWDLDjRpScZjWYVMOSOQMn1Fi1fuqn8542Fp20" + Символы.ВК + Символы.ПС + "G8/2XJy9z/t93u/387463X5+r5LnnCtxLxH3UZYiNrX+/Bfre857nexnpyaxGLGy" + Символы.ВК + Символы.ПС + "szHI90IfP8p3WLjVzsflU2TCnewpICa+L4RITR2nmhuglD5JadlDMtBOMW5hfvjg" + Символы.ВК + Символы.ПС + "/wVyD1xMnDcg3TCRvGZEnnYQPKsnpmzeVUB4E9MzSv0s3UYKdfA130NN7uZTYZSY" + Символы.ВК + Символы.ПС + "30hZsjHnNfDPHIR3Nq+SuNJGJetBCnawsWjlzXwnxUcuVeDlXTPjA81MDZm0NlTv" + Символы.ВК + Символы.ПС + "eaXRd5gva2MkAkaqj+28SypZZEeI+o7wNmohcEavliZIIfBkskv1Kc8OEuzXM+Nu" + Символы.ВК + Символы.ПС + "UZsTkxfw9R7A39fEyG4Cwvt20UEudZlxbxu5xAlycRvZmJUX9y08f6iIXjyEPGNW" + Символы.ВК + Символы.ПС + "c9CcIB0yU33azYe8l9TEMSoZO5UlO5tpG6VUF+Vnl+oo77lbtQLSdRPbhd4GAp+z" + Символы.ВК + Символы.ПС + "Perl+ZvEtKtFKyDS31Imbq3crBNYX7CyplweQWJd9jeQ0FgQ6YuJ30pzdQKVlF1l" + Символы.ВК + Символы.ПС + "L0jUVmcbSGgFhgxOQWA1HWbM0UTU04o4atjZzKhDjxwPMXz6N4mY0rufD1j3C7vu" + Символы.ВК + Символы.ПС + "vw0TxEc9AAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("МоментВремени") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADuSURBVDhPY/j//z9FGIXjbmHBEaqlZQaikcXxYTjDxdqa" + Символы.ВК + Символы.ПС + "N0lW9k4BH9/vZBmZ2/4GBjzICnFhBgcHh/8gDDTgfz4///8SLq7/QEP+u1pZgcUJ" + Символы.ВК + Символы.ПС + "YbhJIBeAbC7k5f2dIi19O1BPjxvZJlwYhROvoMAWpapqCqKRxfFhrIKkYKyCMKyS" + Символы.ВК + Символы.ПС + "1N+gXT0ZyMSUcwKKg+QxJJCxcd5EIIVdDoRB8lglYBhoA5DCLgfCIHmsEjAMUgDE" + Символы.ВК + Символы.ПС + "NhHVq8DOhYo1QPk2IHmsGmEYpADkV4a0mRgYGgbYNcIwSAHIJopcgC6GjAkaQI1Y" + Символы.ВК + Символы.ПС + "aAD5FV0chCFh0N8AAGaTn8a00cVlAAAAAElFTkSuQmCC"));
	ИначеЕсли Тип = Тип("Граница") Тогда 
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xh" + Символы.ВК + Символы.ПС + "BQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0" + Символы.ВК + Символы.ПС + "IDQuMC4xNzNun2MAAADzSURBVDhPY/j//z8KdnBwAFKoYvgwCidMQ4Pbxcrqf5CO" + Символы.ВК + Символы.ПС + "DheyOD4MZ8QrKIilSkndz+fn/58oJ3fTzdKSKEPATnawt//vYW7+v4CP738JF9f/" + Символы.ВК + Символы.ПС + "XCGh/y7W1v/BcgQw3KQYJSWxFCmpu3kCAiAXXHe3sOBEtgkXRuFEqqmxgmz2NzBg" + Символы.ВК + Символы.ПС + "QRbHhzEEQM5CF8OHMQSQDVBJ6m/Qrp4M5yNjJ6A4SB5DAtkA47yJcDY2DJLHEERz" + Символы.ВК + Символы.ПС + "AZyNDYPkMQTRDQBim4jqVWDnQsUaoHwbkDxBA0B+ZUibiYGhYUDYAJBNFLkAxsaG" + Символы.ВК + Символы.ПС + "CRpAjVhoAPkVxkfGkDDobwAAFxmTw3vLbs8AAAAASUVORK5CYII="));
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияВызовСервера_КартинкаТипа(Тип);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
// Проверяет это ссылочный тип
//
// Параметры:
//  Тип  - Тип - Тип
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, ссылочный тип
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЭтоСсылочныйТип(Тип, ИсключаяПеречисления = Ложь) Экспорт
	
	ПростойТип = УКО_ОбщегоНазначенияКлиентСервер_ЭтоПростойТип(Тип);
	Результат = Не ПростойТип;
	Если ИсключаяПеречисления Тогда 
		
		#Если Сервер Тогда
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Результат = Ложь;  
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Возвращает имя события журнала регистрации
//
// Возвращаемое значение:
//   Строка	- имя события журнала регистрации
//
Функция УКО_ОбщегоНазначенияКлиентСервер_СобытиеЖурналаРегистрации() Экспорт
	
	Возврат УКО_ОбщегоНазначенияКлиентСервер_ПолноеИмяРасширения();
	
КонецФункции
// Возвращает имя переменной для возврата значений редактирование выражения
// Параметры:
//   КодЯзыка - Строка - Код языка
// Возвращаемое значение:
//   Строка	- Имя переменной
Функция УКО_ОбщегоНазначенияКлиентСервер_ИмяПеременнойВозвратаРедактированияВыражения(КодЯзыка) Экспорт
	Возврат НСтр("ru = 'Результат'; en = 'Result'", КодЯзыка);
КонецФункции
// Возвращает Описание типов Число
// Параметры:
//   ЧислоРазрядов - Число - Число разрядов
//   ЧислоРазрядовДробнойЧасти - Число - Число разрядов дробной части
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов Число
Функция УКО_ОбщегоНазначенияКлиентСервер_ОписаниеТиповЧисло(ЧислоРазрядов = 0, ЧислоРазрядовДробнойЧасти = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти));
	
КонецФункции
// Проверяет содержит ли описание типов тип ТаблицаЗначений
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
// Возвращаемое значение:
//   Булево - Истина, если тип содержит тип ТаблицаЗначений
Функция УКО_ОбщегоНазначенияКлиентСервер_СодержитТипТаблицаЗначений(ОписаниеТипов) Экспорт 
	
	Возврат ОписаниеТипов.СодержитТип(Тип("ТаблицаЗначений"))
	
КонецФункции
// Получает значение свойства структуры
// Параметры:
//   Структура - Структура - Структура
//   Имя - Строка - Имя свойства
//   ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию, когда в данной структуре нет этого свойства
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры
Функция УКО_ОбщегоНазначенияКлиентСервер_ЗначениеСвойстваСтруктуры(Структура = Неопределено, Имя = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ЗначениеПоУмолчанию;
	
	Если (ТипЗнч(Структура) = Тип("Структура")
				ИЛИ ТипЗнч(Структура) = Тип("ДанныеФормыСтруктура"))
			И Структура.Свойство(Имя) Тогда
		
		Значение = Структура[Имя];
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
// Возвращает цвет текста гиперссылки
//
// Возвращаемое значение:
//   Цвет - Цвет текста
//
Функция УКО_ОбщегоНазначенияКлиентСервер_ЦветТекстаГиперссылки() Экспорт
	
	// https://ru.wikipedia.org/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A6%D0%B2%D0%B5%D1%82%D0%B0_%D1%81%D1%81%D1%8B%D0%BB%D0%BE%D0%BA
	// Голубая ссылка
	Возврат Новый Цвет(51,102,187); 
	
КонецФункции
// Возвращает шрифт особых значений гиперссылка
// Возвращаемое значение:
//   Шрифт - Шрифт
Функция УКО_ОбщегоНазначенияКлиентСервер_ШрифтОсобыхЗначенийРезультатаГиперссылка() Экспорт
	Возврат Новый Шрифт(,,Истина,,Истина);
КонецФункции
// Возвращает основное расширение файлов данных, которое используется для сохранения
// Возвращаемое значение:
//   Строка - Основное расширение файлов данных
Функция УКО_ОбщегоНазначенияКлиентСервер_ОсновноеРасширениеФайловДанных() Экспорт
	Возврат "mcr";
КонецФункции
// Возвращает код английского языка
// Возвращаемое значение:
//   Строка	- Код английского языка
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КодЯзыкаАнглийский() Экспорт
	Возврат "en";
КонецФункции
// Добавляет в массив данные (с возможностью исключения дублей)
//
// Параметры:
//   Массив - Массив - Массив
//   ДобавляемыеЗначения - Массив - Массив добавляемых значений
//   ПроверкаДублирования - Булево - Проверка дублирования
//
Процедура УКО_ОбщегоНазначенияКлиентСервер_ДобавитьВМассив(Массив, ДобавляемыеЗначения, ПроверкаДублирования = Истина) Экспорт
	
	Если ТипЗнч(ДобавляемыеЗначения) = Тип("Массив") Тогда
		
		Для Каждого ДобавляемоеЗначение Из ДобавляемыеЗначения Цикл 
			УКО_ОбщегоНазначенияКлиентСервер_ДобавитьЗначениеВМассив(Массив, ДобавляемоеЗначение, ПроверкаДублирования);
		КонецЦикла;
		
	Иначе
		
		УКО_ОбщегоНазначенияКлиентСервер_ДобавитьЗначениеВМассив(Массив, ДобавляемыеЗначения, ПроверкаДублирования);
		
	КонецЕсли;
	
	
КонецПроцедуры
// Получает картинку по описание типов
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка описания типов
//
Функция УКО_ОбщегоНазначенияКлиентСервер_КартинкаОписанияТипов(ОписаниеТипов) Экспорт
	
	Если ОписаниеТипов = "Перечисление.УКО_СложныйПараметрЗапроса.ТаблицаЗначений" Тогда
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	КонецЕсли;
	
	КоличествоТипов = УКО_ОбщегоНазначенияКлиентСервер_КоличествоТипов(ОписаниеТипов);
	
	Если КоличествоТипов = 0 Тогда 
		
		Картинка = Новый Картинка;
		
	ИначеЕсли КоличествоТипов > 1 Тогда 
		
		Картинка = Новый Картинка(Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA" + Символы.ВК + Символы.ПС + "AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3" + Символы.ВК + Символы.ПС + "YXJlAHBhaW50Lm5ldCA0LjAuMTczbp9jAAAAWUlEQVQ4T92OQQrAQAgD85o+pp/y" + Символы.ВК + Символы.ПС + "6WkVBFlCSdlDoYfJIeogSG5REYDNowBnUDEPVipcQe8l3dmCe85JdsnfBF2+oUIJ" + Символы.ВК + Символы.ПС + "jgBX5rypcAXqy4rvBYptgYssfYgLqgc0Wk0lF3MAAAAASUVORK5CYII="));
		
	Иначе
		
		Картинка = УКО_ОбщегоНазначенияКлиентСервер_КартинкаТипа(УКО_ОбщегоНазначенияКлиентСервер_ОсновнойТип(ОписаниеТипов), ОписаниеТипов);
		
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции
// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция УКО_СтрокиКлиентСервер_НаборСимволовРусскиеЛатинскиеБуквы()
	
	НаборСимволовРусскиеБуквы = "ЙЦУКЕ" + Символ(1025) + "НГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"; //1025 - Код символа буквы ежик, елка
	НаборСимволовРусскиеБуквы = НаборСимволовРусскиеБуквы + НРег(НаборСимволовРусскиеБуквы);
	
	Возврат НаборСимволовРусскиеБуквы + УКО_СтрокиКлиентСервер_НаборСимволовЛатинскиеБуквы();
	
КонецФункции
// Возвращает строку имени элемента данных для запроса из отладки
//
// Параметры:
//	Тип - Перечисление.УКО_ЭлементыДанных - Тип элементов
//
// Возвращаемое значение:
//   Строку - Имя данных используемое при загрузке данных из отладки
//
Функция УКО_ОтложеннаяОтладкаКлиентСервер_ИмяДанных(Тип) Экспорт
	
	Если Тип = "Перечисление.УКО_ЭлементыДанных.Запрос" Тогда
		
		Результат = НСтр("ru = 'Запрос (из отладки)'; en = 'Query (from debug)'");
		
	ИначеЕсли Тип = "Перечисление.УКО_ЭлементыДанных.СхемаКомпоновкиДанных" Тогда
		
		Результат = НСтр("ru = 'Схема компоновки данных (из отладки)'; en = 'Data composition schema (from debug)'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_СтрокиКлиентСервер_НаборНезначащихСимволов()
	
	Возврат Символы.ПС + Символы.ВК + Символы.Таб + " ";
	
КонецФункции
// Найти текст, пропустить
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Текст - Строка - Искомый текст
//   НачальныйИндекс - Число - Начальный индекс
//   НомерВхождения - Число - Номер вхождения
//
// Возвращаемое значение:
//   Булево	- Истина, Искомый текст найден
//
Функция УКО_СтрокиКлиентСервер_РазборНайтиТекст(Строка, Текст, НачальныйИндекс = 1, НомерВхождения = 1) Экспорт
	
	Индекс = СтрНайти(Строка, Текст,, НачальныйИндекс, НомерВхождения);
	Если ЗначениеЗаполнено(Индекс) Тогда
		УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Строка, Текст, Индекс);
		НачальныйИндекс = Индекс;
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
// Чтение шестнадцатеричного числа из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьШестнадцатеричноеЧисло(Строка, НачальныйИндекс = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если НачальныйИндекс = Неопределено Тогда
		НачальныйИндекс = 1;
	КонецЕсли;
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл 
		
		Если Не СтрНайти(УКО_СтрокиКлиентСервер_НаборСимволовШестнадцатеричныеЦифры(), Сред(Строка, Индекс, 1)) Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс); 
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УКО_СтрокиКлиентСервер_НаборСимволовШестнадцатеричныеЦифры()
	
	Возврат "0123456789ABCDEFabcdef";
	
КонецФункции
// Прочитать блок, PlanSQL='select'
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачалоБлока - Строка - Текст начала читаемого блока
//   КонецБлока - Строка - Текст конца читаемого блока
//   НачальныйИндекс - Число - Начальный индекс
//
// Возвращаемое значение:
//   Булево	- Истина, Искомый текст найден
//
Функция УКО_СтрокиКлиентСервер_РазборПрочитатьБлок(Строка, НачалоБлока, КонецБлока, НачальныйИндекс = 1) Экспорт
	
	Результат = "";
	Если УКО_СтрокиКлиентСервер_РазборНайтиТекст(Строка, НачалоБлока, НачальныйИндекс) Тогда
		
		СимволБлока = УКО_СтрокиКлиентСервер_РазборПрочитатьСимвол(Строка, НачальныйИндекс, Ложь);
		Если СимволБлока = Символ(34) ИЛИ СимволБлока = "'" Тогда
			УКО_СтрокиКлиентСервер_РазборПропуститьНаборСимволов(Строка, СимволБлока, НачальныйИндекс);
		Иначе
			СимволБлока = "";
		КонецЕсли;
		
		ИндексНачалаБлока = НачальныйИндекс;
		ИскомыйТекстКонецБлока = СимволБлока + КонецБлока;
		УКО_СтрокиКлиентСервер_РазборНайтиТекст(Строка, ИскомыйТекстКонецБлока, НачальныйИндекс);
		ИндексКонцаБлока = НачальныйИндекс - СтрДлина(ИскомыйТекстКонецБлока);
		
		Результат = Сред(Строка, ИндексНачалаБлока, ИндексКонцаБлока - ИндексНачалаБлока);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Возвращает число из строки 36-E6 в 0.000006
//
// Параметры:
//   Строка - Строка - Экспоненциальное число
//
// Возвращаемое значение:
//   Число - Число
//
Функция УКО_СтрокиКлиентСервер_ЭкспоненциальноеЧисло(Строка) Экспорт

	Результат = 0;
	Строка = ВРег(СокрЛП(Строка));
	Если СтрДлина(Строка) > 0 Тогда 
		
		ИндексЭкспоненты  = СтрНайти(Строка, "E");
		Если ИндексЭкспоненты = 0 Тогда 
			
			Результат = Число(Строка);
			
		Иначе
			
			ЧислоДоЭкспоненты = Число(Лев(Строка, ИндексЭкспоненты - 1));
			ЧислоПослеЭкспоненты = Число(Сред(Строка, ИндексЭкспоненты + 1));
			Результат =  ЧислоДоЭкспоненты * Pow(10 ,ЧислоПослеЭкспоненты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
// Возвращает строку пустой уникальный идентификатор
// Возвращаемое значение:
//   Строка - Пустой уникальный идентификатор
Функция УКО_СтрокиКлиентСервер_ПустойУникальныйИдентификатор() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции
// Добавляет табуляцию в многострочный текст
//
// Параметры:
//   Текст - Строка - Текст
//   ДобавлятьВПервуюСтрока - Булево - Добавлять в первую строку
//   Количество - Число - Количество добавляемых табуляций
//
// Возвращаемое значение:
//   Строка - Текст с добавленной табуляцией
//
Функция УКО_СтрокиКлиентСервер_ДобавитьТабВМногострочныйТекст(Текст, ДобавлятьВПервуюСтрока = Истина, Количество = 1) Экспорт
	
	ВставляемыеСимволы = "";
	Для Счетчик = 1 По Количество Цикл 
		ВставляемыеСимволы = ВставляемыеСимволы + Символы.Таб;
	КонецЦикла;
	
	Результат = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + ВставляемыеСимволы);
	Если ДобавлятьВПервуюСтрока Тогда
		Результат = ВставляемыеСимволы + Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
// Возвращает текст "n строк" с верным окончанием
//
// Параметры:
//   Количество - Число - Количество строк
//
// Возвращаемое значение:
//   Строка - Текст "n строк" с верным окончанием
//
Функция УКО_СтрокиКлиентСервер_ТекстНекотороеКоличествоСтрок(Количество) Экспорт
	
	Возврат СтрокаСЧислом(НСтр("ru = '%1 строк; %1 строка; %1 строки; %1 строки; %1 строк; %1 строк';
								|en = '%1 rows; %1 row; %1 rows; %1 rows; %1 rows; %1 rows'"),	Количество, ВидЧисловогоЗначения.Количественное);
	
КонецФункции
// Возвращает Число в виде строки
//
// Параметры:
//   Число - Число - Преобразуемое число
//
// Возвращаемое значение:
//   Строка - Число в виде строки
//
Функция УКО_СтрокиКлиентСервер_ЧислоВСтроку(Число) Экспорт
	
	Возврат Формат(Число, "ЧН=; ЧГ=");
	
КонецФункции
// Возвращает пустой UID "00000000000000000000000000000000"
//
// Возвращаемое значение:
//   Строка - Пустой UID
//
Функция УКО_СтрокиКлиентСервер_ПустойUID() Экспорт
	
	Возврат "00000000000000000000000000000000";
	
КонецФункции
// Создает временный каталог в каталоге временных файлов
//
// Возвращаемое значение:
//   Строка - Полное имя каталога
//
Функция УКО_ФайлыКлиентСервер_СоздатьВременныйКаталог() Экспорт
	
	Результат = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(Результат);
	
	Возврат Результат;

КонецФункции
// Получает первый файл из каталога по маске
//
// Параметры:
//	Путь - Строка - Путь
//	Маска - Строка - Маска файлов
//
// Возвращаемое значение:
//   Строка - Полное имя файла 
//
Функция УКО_ФайлыКлиентСервер_ПервыйИзКаталога(Путь, Маска = "*.*") Экспорт
	
	НайденныеФайлы = НайтиФайлы(Путь, Маска);
	Если ЗначениеЗаполнено(НайденныеФайлы) Тогда
		Результат = НайденныеФайлы[0].ПолноеИмя;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// Переименовывает каталог
//
// Параметры:
//	СтароеИмя - Строка - Старое имя
//	НовоеИмя - Строка - Новое имя
//
Процедура УКО_ФайлыКлиентСервер_ПереименоватьКаталог(СтароеИмя, НовоеИмя) Экспорт 
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject"); 
	FSO.MoveFolder(СтароеИмя, НовоеИмя); 
	
КонецПроцедуры
// Получает полное имя дополняя путь именем
//
// Параметры:
//	Путь - Строка - Путь
//	Имя - Строка - Имя файла
//
// Возвращаемое значение:
//   Строка - Полное имя файла 
//
Функция УКО_ФайлыКлиентСервер_ПолноеИмя(Путь, Имя) Экспорт
	
	Возврат Путь + ПолучитьРазделительПути() + Имя;
	
КонецФункции
// Читает текст из файла
//
// Параметры:
//	Объект - Строка,Поток - Объект чтения
//
// Возвращаемое значение:
//   Строка - Прочитанный текст
//
Функция УКО_ФайлыКлиентСервер_ПрочитатьТекст(Объект) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(Объект);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции
// Записывает текст в файл
//
// Параметры:
//	ПолноеИмяФайла - Строка - Полное имя файла
//	Текст - Строка - Текст
//
Процедура УКО_ФайлыКлиентСервер_ЗаписатьТекст(ПолноеИмяФайла, Текст) Экспорт
	
	ЗаписьТекст = Новый ЗаписьТекста(ПолноеИмяФайла);
	ЗаписьТекст.Записать(Текст);
	ЗаписьТекст.Закрыть();
	
КонецПроцедуры
